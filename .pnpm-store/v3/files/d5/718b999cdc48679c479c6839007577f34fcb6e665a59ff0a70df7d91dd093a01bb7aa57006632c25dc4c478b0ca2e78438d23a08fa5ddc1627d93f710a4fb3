{"version":3,"sources":["../../src/services/create-pages.ts"],"names":["createPages","parentSpan","gatsbyNodeGraphQLFunction","store","deferNodeMutation","shouldRunCreatePagesStatefully","activity","reporter","activityTimer","start","timestamp","Date","now","currentPages","Map","getState","pages","originalGraphQL","wrappedGraphQL","returnValue","apply","arguments","end","totalMS","warn","graphql","traceId","waitForCascadingActions","span","dataStore","info","countNodes","size","process","env","gatsby_log_level","types","getTypes","verbose","length","map","type","join","deletedPages","tim","changedPages","dispatch","actions","apiFinished","apiName"],"mappings":"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","sourcesContent":["import reporter from \"gatsby-cli/lib/reporter\"\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { IDataLayerContext } from \"../state-machines/data-layer/types\"\nimport { assertStore } from \"../utils/assert-store\"\nimport { IGatsbyPage } from \"../redux/types\"\nimport { actions } from \"../redux/actions\"\nimport { deleteUntouchedPages, findChangedPages } from \"../utils/changed-pages\"\nimport { getDataStore } from \"../datastore\"\n\nexport async function createPages({\n  parentSpan,\n  gatsbyNodeGraphQLFunction,\n  store,\n  deferNodeMutation,\n  shouldRunCreatePagesStatefully,\n}: Partial<IDataLayerContext>): Promise<{\n  deletedPages: Array<string>\n  changedPages: Array<string>\n}> {\n  assertStore(store)\n  const activity = reporter.activityTimer(`createPages`, {\n    parentSpan,\n  })\n  activity.start()\n  const timestamp = Date.now()\n  const currentPages = new Map<string, IGatsbyPage>(store.getState().pages)\n\n  // Wrap the GraphQL function so we can measure how long it takes to run.\n  const originalGraphQL = gatsbyNodeGraphQLFunction\n  // eslint-disable-next-line\n  async function wrappedGraphQL() {\n    const start = Date.now()\n    // @ts-ignore not sure how to type the following\n    const returnValue = await originalGraphQL.apply(this, arguments) // eslint-disable-line\n    const end = Date.now()\n    const totalMS = end - start\n    if (totalMS > 10000) {\n      reporter.warn(\n        `Your GraphQL query in createPages took ${\n          totalMS / 1000\n        } seconds which is an unexpectedly long time. See https://gatsby.dev/create-pages-performance for tips on how to improve this.`\n      )\n    }\n    return returnValue\n  }\n\n  await apiRunnerNode(\n    `createPages`,\n    {\n      graphql: wrappedGraphQL,\n      traceId: `initial-createPages`,\n      waitForCascadingActions: true,\n      parentSpan: activity.span,\n      deferNodeMutation,\n    },\n    { activity }\n  )\n  activity.end()\n\n  if (shouldRunCreatePagesStatefully) {\n    const activity = reporter.activityTimer(`createPagesStatefully`, {\n      parentSpan,\n    })\n    activity.start()\n    await apiRunnerNode(\n      `createPagesStatefully`,\n      {\n        graphql: gatsbyNodeGraphQLFunction,\n        traceId: `initial-createPagesStatefully`,\n        waitForCascadingActions: true,\n        parentSpan: activity.span,\n        deferNodeMutation,\n      },\n      {\n        activity,\n      }\n    )\n    activity.end()\n  }\n\n  const dataStore = getDataStore()\n  reporter.info(\n    `Total nodes: ${dataStore.countNodes()}, ` +\n      `SitePage nodes: ${\n        store.getState().pages.size\n      } (use --verbose for breakdown)`\n  )\n\n  if (process.env.gatsby_log_level === `verbose`) {\n    const types = dataStore.getTypes()\n    reporter.verbose(\n      `Number of node types: ${types.length}. Nodes per type: ${types\n        .map(type => type + `: ` + dataStore.countNodes(type))\n        .join(`, `)}`\n    )\n  }\n\n  reporter.verbose(`Checking for deleted pages`)\n\n  const deletedPages = deleteUntouchedPages(\n    store.getState().pages,\n    timestamp,\n    !!shouldRunCreatePagesStatefully\n  )\n\n  reporter.verbose(\n    `Deleted ${deletedPages.length} page${deletedPages.length === 1 ? `` : `s`}`\n  )\n\n  const tim = reporter.activityTimer(`Checking for changed pages`, {\n    parentSpan,\n  })\n  tim.start()\n\n  const { changedPages } = findChangedPages(\n    currentPages,\n    store.getState().pages\n  )\n\n  reporter.verbose(\n    `Found ${changedPages.length} changed page${\n      changedPages.length === 1 ? `` : `s`\n    }`\n  )\n\n  tim.end()\n\n  store.dispatch(actions.apiFinished({ apiName: `createPages` }))\n\n  return {\n    changedPages,\n    deletedPages,\n  }\n}\n"],"file":"create-pages.js"}