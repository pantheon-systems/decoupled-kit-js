{
  "version": 3,
  "sources": ["../../src/iframe-protocol.ts"],
  "sourcesContent": ["import type {\n  ListenerFunction,\n  SandpackMessage,\n  UnsubscribeFunction,\n} from \"./types\";\n\nexport class IFrameProtocol {\n  private frameWindow: Window | null;\n  private origin: string;\n\n  // React to messages from any iframe\n  private globalListeners: Record<number, ListenerFunction> = {};\n  private globalListenersCount = 0;\n\n  // React to messages from the iframe owned by this instance\n  private channelListeners: Record<number, ListenerFunction> = {};\n  private channelListenersCount = 0;\n\n  // Random number to identify this instance of the client when messages are coming from multiple iframes\n  readonly channelId: number = Math.floor(Math.random() * 1000000);\n\n  constructor(iframe: HTMLIFrameElement, origin: string) {\n    this.frameWindow = iframe.contentWindow;\n    this.origin = origin;\n    this.globalListeners = [];\n    this.channelListeners = [];\n\n    this.eventListener = this.eventListener.bind(this);\n\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"message\", this.eventListener);\n    }\n  }\n\n  cleanup(): void {\n    window.removeEventListener(\"message\", this.eventListener);\n    this.globalListeners = {};\n    this.channelListeners = {};\n    this.globalListenersCount = 0;\n    this.channelListenersCount = 0;\n  }\n\n  // Sends the channelId and triggers an iframeHandshake promise to resolve,\n  // so the iframe can start listening for messages (based on the id)\n  register(): void {\n    if (!this.frameWindow) {\n      return;\n    }\n\n    this.frameWindow.postMessage(\n      {\n        type: \"register-frame\",\n        origin: document.location.origin,\n        id: this.channelId, // TODO: Rename in codesandbox-api to channelId\n      },\n      this.origin\n    );\n  }\n\n  // Messages are dispatched from the client directly to the instance iframe\n  dispatch(message: SandpackMessage): void {\n    if (!this.frameWindow) {\n      return;\n    }\n\n    this.frameWindow.postMessage(\n      {\n        $id: this.channelId,\n        codesandbox: true,\n        ...message,\n      },\n      this.origin\n    );\n  }\n\n  // Add a listener that is called on any message coming from an iframe in the page\n  // This is needed for the `initialize` message which comes without a channelId\n  globalListen(listener: ListenerFunction): UnsubscribeFunction {\n    if (typeof listener !== \"function\") {\n      return (): void => {\n        return;\n      };\n    }\n\n    const listenerId = this.globalListenersCount;\n    this.globalListeners[listenerId] = listener;\n    this.globalListenersCount++;\n    return (): void => {\n      delete this.globalListeners[listenerId];\n    };\n  }\n\n  // Add a listener that is called on any message coming from an iframe with the instance channelId\n  // All other messages (eg: from other iframes) are ignored\n  channelListen(listener: ListenerFunction): UnsubscribeFunction {\n    if (typeof listener !== \"function\") {\n      return (): void => {\n        return;\n      };\n    }\n\n    const listenerId = this.channelListenersCount;\n    this.channelListeners[listenerId] = listener;\n    this.channelListenersCount++;\n    return (): void => {\n      delete this.channelListeners[listenerId];\n    };\n  }\n\n  // Handles message windows coming from iframes\n  private eventListener(evt: MessageEvent): void {\n    // skip events originating from different iframes\n    if (evt.source !== this.frameWindow) {\n      return;\n    }\n\n    const message = evt.data;\n    if (!message.codesandbox) {\n      return;\n    }\n\n    Object.values(this.globalListeners).forEach((listener) =>\n      listener(message)\n    );\n\n    if (message.$id !== this.channelId) {\n      return;\n    }\n\n    Object.values(this.channelListeners).forEach((listener) =>\n      listener(message)\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAMO,2BAAqB;AAAA,EAe1B,YAAY,QAA2B,QAAgB;AAV/C,2BAAoD;AACpD,gCAAuB;AAGvB,4BAAqD;AACrD,iCAAwB;AAGvB,qBAAoB,KAAK,MAAM,KAAK,WAAW;AAGtD,SAAK,cAAc,OAAO;AAC1B,SAAK,SAAS;AACd,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AAExB,SAAK,gBAAgB,KAAK,cAAc,KAAK;AAE7C,QAAI,OAAO,WAAW,aAAa;AACjC,aAAO,iBAAiB,WAAW,KAAK;AAAA;AAAA;AAAA,EAI5C,UAAgB;AACd,WAAO,oBAAoB,WAAW,KAAK;AAC3C,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AACxB,SAAK,uBAAuB;AAC5B,SAAK,wBAAwB;AAAA;AAAA,EAK/B,WAAiB;AACf,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAGF,SAAK,YAAY,YACf;AAAA,MACE,MAAM;AAAA,MACN,QAAQ,SAAS,SAAS;AAAA,MAC1B,IAAI,KAAK;AAAA,OAEX,KAAK;AAAA;AAAA,EAKT,SAAS,SAAgC;AACvC,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAGF,SAAK,YAAY,YACf;AAAA,MACE,KAAK,KAAK;AAAA,MACV,aAAa;AAAA,OACV,UAEL,KAAK;AAAA;AAAA,EAMT,aAAa,UAAiD;AAC5D,QAAI,OAAO,aAAa,YAAY;AAClC,aAAO,MAAY;AACjB;AAAA;AAAA;AAIJ,UAAM,aAAa,KAAK;AACxB,SAAK,gBAAgB,cAAc;AACnC,SAAK;AACL,WAAO,MAAY;AACjB,aAAO,KAAK,gBAAgB;AAAA;AAAA;AAAA,EAMhC,cAAc,UAAiD;AAC7D,QAAI,OAAO,aAAa,YAAY;AAClC,aAAO,MAAY;AACjB;AAAA;AAAA;AAIJ,UAAM,aAAa,KAAK;AACxB,SAAK,iBAAiB,cAAc;AACpC,SAAK;AACL,WAAO,MAAY;AACjB,aAAO,KAAK,iBAAiB;AAAA;AAAA;AAAA,EAKzB,cAAc,KAAyB;AAE7C,QAAI,IAAI,WAAW,KAAK,aAAa;AACnC;AAAA;AAGF,UAAM,UAAU,IAAI;AACpB,QAAI,CAAC,QAAQ,aAAa;AACxB;AAAA;AAGF,WAAO,OAAO,KAAK,iBAAiB,QAAQ,CAAC,aAC3C,SAAS;AAGX,QAAI,QAAQ,QAAQ,KAAK,WAAW;AAClC;AAAA;AAGF,WAAO,OAAO,KAAK,kBAAkB,QAAQ,CAAC,aAC5C,SAAS;AAAA;AAAA;",
  "names": []
}
