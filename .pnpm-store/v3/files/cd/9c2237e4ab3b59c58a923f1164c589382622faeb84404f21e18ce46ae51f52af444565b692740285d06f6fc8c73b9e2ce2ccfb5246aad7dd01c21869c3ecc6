{"version":3,"sources":["../../../src/state-machines/query-running/actions.ts"],"names":["flushPageData","context","parentSpan","assignDirtyQueries","_context","data","queryIds","markSourceFilesDirty","filesDirty","markSourceFilesClean","trackRequestedQueryRun","pendingQueryRuns","payload","Set","pagePath","add","clearCurrentlyHandledPendingQueryRuns","currentlyHandledPendingQueryRuns","undefined","queryActions"],"mappings":";;;;;AACA;;AAMA;;AAEO,MAAMA,aAAa,GAAIC,OAAD,IAAyC;AACpE,8BAAaA,OAAO,CAACC,UAArB;AACD,CAFM;;;AAIA,MAAMC,kBAAkB,GAAG,oBAGhC,CAACC,QAAD,EAAW;AAAEC,EAAAA;AAAF,CAAX,KAAwB;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAeD,IAArB;AACA,SAAO;AACLC,IAAAA;AADK,GAAP;AAGD,CARiC,CAA3B;;AAUA,MAAMC,oBAAoB,GAAG,oBAA6B;AAC/DC,EAAAA,UAAU,EAAE;AADmD,CAA7B,CAA7B;;AAIA,MAAMC,oBAAoB,GAAG,oBAA6B;AAC/DD,EAAAA,UAAU,EAAE;AADmD,CAA7B,CAA7B;;AAIA,MAAME,sBAAsB,GAAG,oBAGpC;AACAC,EAAAA,gBAAgB,EAAE,CAACV,OAAD,EAAU;AAAEW,IAAAA;AAAF,GAAV,KAA0B;AAC1C,UAAMD,gBAAgB,GAAGV,OAAO,CAACU,gBAAR,IAA4B,IAAIE,GAAJ,EAArD;;AACA,QAAID,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEE,QAAb,EAAuB;AACrBH,MAAAA,gBAAgB,CAACI,GAAjB,CAAqBH,OAAO,CAACE,QAA7B;AACD;;AACD,WAAOH,gBAAP;AACD;AAPD,CAHoC,CAA/B;;AAaA,MAAMK,qCAAqC,GAChD,oBAA6B;AAC3BC,EAAAA,gCAAgC,EAAEC;AADP,CAA7B,CADK;;AAKA,MAAMC,YAA0D,GAAG;AACxEhB,EAAAA,kBADwE;AAExEH,EAAAA,aAFwE;AAGxEO,EAAAA,oBAHwE;AAIxEE,EAAAA,oBAJwE;AAKxEC,EAAAA,sBALwE;AAMxEM,EAAAA;AANwE,CAAnE","sourcesContent":["import { IQueryRunningContext } from \"./types\"\nimport {\n  DoneInvokeEvent,\n  assign,\n  ActionFunctionMap,\n  AnyEventObject,\n} from \"xstate\"\nimport { enqueueFlush } from \"../../utils/page-data\"\n\nexport const flushPageData = (context: IQueryRunningContext): void => {\n  enqueueFlush(context.parentSpan)\n}\n\nexport const assignDirtyQueries = assign<\n  IQueryRunningContext,\n  DoneInvokeEvent<any>\n>((_context, { data }) => {\n  const { queryIds } = data\n  return {\n    queryIds,\n  }\n})\n\nexport const markSourceFilesDirty = assign<IQueryRunningContext>({\n  filesDirty: true,\n})\n\nexport const markSourceFilesClean = assign<IQueryRunningContext>({\n  filesDirty: false,\n})\n\nexport const trackRequestedQueryRun = assign<\n  IQueryRunningContext,\n  AnyEventObject\n>({\n  pendingQueryRuns: (context, { payload }) => {\n    const pendingQueryRuns = context.pendingQueryRuns || new Set<string>()\n    if (payload?.pagePath) {\n      pendingQueryRuns.add(payload.pagePath)\n    }\n    return pendingQueryRuns\n  },\n})\n\nexport const clearCurrentlyHandledPendingQueryRuns =\n  assign<IQueryRunningContext>({\n    currentlyHandledPendingQueryRuns: undefined,\n  })\n\nexport const queryActions: ActionFunctionMap<IQueryRunningContext, any> = {\n  assignDirtyQueries,\n  flushPageData,\n  markSourceFilesDirty,\n  markSourceFilesClean,\n  trackRequestedQueryRun,\n  clearCurrentlyHandledPendingQueryRuns,\n}\n"],"file":"actions.js"}