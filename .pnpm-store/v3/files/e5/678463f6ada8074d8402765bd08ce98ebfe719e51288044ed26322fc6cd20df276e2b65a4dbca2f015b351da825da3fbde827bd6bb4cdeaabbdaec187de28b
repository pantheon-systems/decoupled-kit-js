{"version":3,"sources":["../../../src/steps/ingest-remote-schema/diff-schemas.js"],"names":["checkIfSchemaHasChanged","traceId","state","store","getState","helpers","pluginOptions","gatsbyApi","lastCompletedSourceTime","cache","get","LAST_COMPLETED_SOURCE_TIME","activity","reporter","activityTimer","verbose","start","data","query","schemaMd5","generalSettings","url","wpUrl","parse","protocol","log","warn","cachedSchemaMd5","MD5_CACHE_KEY","foundUsableHardCachedData","key","value","schemaWasChanged","pluginOptionsMD5Key","lastPluginOptionsMD5","pluginOptionsMD5","type","shouldClearHardCache","process","env","NODE_ENV","info","dispatch","remoteSchema","setState","end"],"mappings":"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","sourcesContent":["import url from \"url\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport store from \"~/store\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { LAST_COMPLETED_SOURCE_TIME, MD5_CACHE_KEY } from \"~/constants\"\n\nimport { ensurePluginRequirementsAreMet } from \"../check-plugin-requirements\"\n\nimport { createContentDigest } from \"gatsby-core-utils\"\n\nimport {\n  clearHardCache,\n  getHardCachedData,\n  getHardCachedNodes,\n  setPersistentCache,\n  getPersistentCache,\n} from \"~/utils/cache\"\n\nconst checkIfSchemaHasChanged = async ({ traceId }) => {\n  const state = store.getState()\n\n  const { helpers, pluginOptions } = state.gatsbyApi\n\n  const lastCompletedSourceTime = await helpers.cache.get(\n    LAST_COMPLETED_SOURCE_TIME\n  )\n\n  const activity = helpers.reporter.activityTimer(\n    formatLogMessage(`diff schemas`)\n  )\n\n  if (pluginOptions.verbose && lastCompletedSourceTime) {\n    activity.start()\n  }\n\n  const { data } = await fetchGraphql({\n    query: /* GraphQL */ `\n      {\n        schemaMd5\n        # also get the wpUrl to save on # of requests\n        # @todo maybe there's a better place for this\n        generalSettings {\n          url\n        }\n      }\n    `,\n  })\n\n  const {\n    schemaMd5,\n    generalSettings: { url: wpUrl },\n  } = data\n\n  if (url.parse(wpUrl).protocol !== url.parse(pluginOptions.url).protocol) {\n    helpers.reporter.log(``)\n    helpers.reporter.warn(\n      formatLogMessage(`\n\nThe Url set in plugin options has a different protocol than the Url saved in WordPress general settings.\n\noptions.url: ${pluginOptions.url}\nWordPress settings: ${wpUrl}\n\nThis may cause subtle bugs, or it may be fine.\nPlease consider addressing this issue by changing your WordPress settings or plugin options accordingly.\n\n`)\n    )\n  }\n\n  let cachedSchemaMd5 = await helpers.cache.get(MD5_CACHE_KEY)\n\n  let foundUsableHardCachedData\n\n  if (!cachedSchemaMd5) {\n    cachedSchemaMd5 = await getHardCachedData({\n      key: MD5_CACHE_KEY,\n    })\n\n    foundUsableHardCachedData =\n      cachedSchemaMd5 && !!(await getHardCachedNodes())\n  }\n\n  await setPersistentCache({ key: MD5_CACHE_KEY, value: schemaMd5 })\n\n  const schemaWasChanged = schemaMd5 !== cachedSchemaMd5\n\n  // if the schema was changed and we had a cached schema\n  // we need to re-check to see if all plugin requirements are met\n  // this is also run as a step in gatsby-node.js but is skipped\n  // during refreshes. If the schema changes and this is a refresh\n  // we do want to re-check to make sure everything's good.\n  if (\n    schemaWasChanged &&\n    cachedSchemaMd5 &&\n    traceId !== `initial-createSchemaCustomization`\n  ) {\n    await ensurePluginRequirementsAreMet({\n      ...helpers,\n      traceId: `schemaWasChanged`,\n    })\n  }\n\n  const pluginOptionsMD5Key = `plugin-options-md5`\n  const lastPluginOptionsMD5 = await getPersistentCache({\n    key: pluginOptionsMD5Key,\n  })\n\n  const pluginOptionsMD5 = createContentDigest({\n    url: pluginOptions.url,\n    type: pluginOptions.type,\n  })\n\n  const shouldClearHardCache =\n    schemaWasChanged || lastPluginOptionsMD5 !== pluginOptionsMD5\n\n  if (shouldClearHardCache && foundUsableHardCachedData) {\n    await clearHardCache()\n\n    foundUsableHardCachedData = false\n  }\n\n  await setPersistentCache({\n    key: pluginOptionsMD5Key,\n    value: pluginOptionsMD5,\n  })\n\n  if (\n    lastCompletedSourceTime &&\n    schemaWasChanged &&\n    pluginOptions &&\n    pluginOptions.verbose\n  ) {\n    helpers.reporter.log(``)\n    helpers.reporter.warn(\n      formatLogMessage(`The remote schema has changed, updating local schema.`)\n    )\n    if (process.env.NODE_ENV === `development`) {\n      helpers.reporter.warn(\n        formatLogMessage(\n          `If the schema change includes a data change\\nyou'll need to run \\`gatsby clean && gatsby develop\\` to see the data update.`\n        )\n      )\n    }\n    helpers.reporter.info(\n      formatLogMessage(`Cached schema md5: ${cachedSchemaMd5}`)\n    )\n    helpers.reporter.info(formatLogMessage(`Remote schema md5: ${schemaMd5}`))\n    helpers.reporter.log(``)\n  } else if (!lastCompletedSourceTime && pluginOptions.verbose) {\n    helpers.reporter.log(``)\n    helpers.reporter.info(\n      formatLogMessage(\n        `\\n\\n\\tThis is either your first build or the cache was cleared.\\n\\tPlease wait while your WordPress data is synced to your Gatsby cache.\\n\\n\\tMaybe now's a good time to get up and stretch? :D\\n`\n      )\n    )\n  }\n\n  // record wether the schema changed so other logic can beware\n  // as well as the wpUrl because we need this sometimes :p\n  store.dispatch.remoteSchema.setState({\n    schemaWasChanged,\n    wpUrl,\n    foundUsableHardCachedData,\n  })\n\n  if (pluginOptions.verbose && lastCompletedSourceTime) {\n    activity.end()\n  }\n\n  return schemaWasChanged\n}\n\nexport { checkIfSchemaHasChanged }\n"],"file":"diff-schemas.js"}