{"version":3,"sources":["../../src/utils/handle-flags.ts"],"names":["handleFlags","flags","configFlags","executingCommand","process","env","gatsby_executing_command","availableFlags","Map","forEach","flag","set","name","unknownConfigFlags","unfitConfigFlags","flagName","has","flagWithMinDistance","minDistance","availableFlag","distanceToFlag","push","didYouMean","unknownFlagMessage","length","enabledConfigFlags","Object","keys","filter","map","get","optedInFlags","applicableFlags","lockedInFlags","lockedInFlagsThatAreInConfig","command","noCI","fitness","testFitness","flagIsSetInConfig","includes","requires","unfitFlagMessage","join","addIncluded","includedFlags","includedName","incExp","find","e","flagIsDisabledByUser","_","uniq","generateFlagLine","message","experimental","chalk","black","bgYellow","bold","umbrellaIssue","description","size","otherFlagSuggestionLines","enabledFlagsSet","Set","f","add"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\nimport { isCI } from \"gatsby-core-utils\"\nimport { IFlag } from \"./flags\"\nimport chalk from \"chalk\"\nimport { commaListsAnd } from \"common-tags\"\nimport { distance } from \"fastest-levenshtein\"\n\nconst handleFlags = (\n  flags: Array<IFlag>,\n  configFlags: Record<string, boolean> = {},\n  executingCommand = process.env.gatsby_executing_command\n): {\n  enabledConfigFlags: Array<IFlag>\n  unknownFlagMessage: string\n  unfitFlagMessage: string\n  message: string\n} => {\n  // Prepare config flags.\n  // Filter out any flags that are set to false.\n  const availableFlags = new Map<string, IFlag>()\n  flags.forEach(flag => {\n    availableFlags.set(flag.name, flag)\n  })\n\n  // Find unknown flags someone has in their config to warn them about.\n  const unknownConfigFlags: Array<{ flag: string; didYouMean: string }> = []\n  const unfitConfigFlags: Array<{ flag: string; requires: string }> = []\n  for (const flagName in configFlags) {\n    if (availableFlags.has(flagName)) {\n      continue\n    }\n    let flagWithMinDistance\n    let minDistance\n    for (const availableFlag of flags) {\n      if (availableFlag.name !== flagName) {\n        const distanceToFlag = distance(flagName, availableFlag.name)\n        if (!flagWithMinDistance || distanceToFlag < minDistance) {\n          flagWithMinDistance = availableFlag.name\n          minDistance = distanceToFlag\n        }\n      }\n    }\n\n    if (flagName) {\n      unknownConfigFlags.push({\n        flag: flagName,\n        didYouMean:\n          flagWithMinDistance && minDistance < 4 ? flagWithMinDistance : ``,\n      })\n    }\n  }\n\n  let unknownFlagMessage = ``\n  if (unknownConfigFlags.length > 0) {\n    unknownFlagMessage = commaListsAnd`The following flag(s) found in your gatsby-config.js are not known:`\n    unknownConfigFlags.forEach(\n      flag =>\n        (unknownFlagMessage += `\\n- ${flag.flag}${\n          flag.didYouMean ? ` (did you mean: ${flag.didYouMean})` : ``\n        }`)\n    )\n  }\n\n  let enabledConfigFlags: Array<IFlag> = Object.keys(configFlags)\n    .filter(name => configFlags[name] && availableFlags.has(name))\n    .map(flagName => availableFlags.get(flagName)!)\n\n  // Test flags to see if it wants opted in.\n  const optedInFlags = new Map<string, IFlag>()\n  const applicableFlags = new Map<string, IFlag>()\n  const lockedInFlags = new Map<string, IFlag>()\n  const lockedInFlagsThatAreInConfig = new Map<string, IFlag>()\n  availableFlags.forEach(flag => {\n    if (flag.command !== `all` && flag.command !== executingCommand) {\n      // if flag is not for all commands and current command doesn't match command flag is for - skip\n      return\n    }\n\n    if (flag.noCI && isCI()) {\n      // If we're in CI and flag is not available for CI - skip\n      return\n    }\n\n    const fitness = flag.testFitness(flag)\n\n    const flagIsSetInConfig = typeof configFlags[flag.name] !== `undefined`\n\n    if (fitness === `LOCKED_IN`) {\n      enabledConfigFlags.push(flag)\n      lockedInFlags.set(flag.name, flag)\n      if (flagIsSetInConfig) {\n        lockedInFlagsThatAreInConfig.set(flag.name, flag)\n      }\n    } else if (!flagIsSetInConfig && fitness === `OPT_IN`) {\n      // if user didn't explicitly set a flag (either true or false)\n      // and it qualifies for auto opt-in - add it to optedInFlags\n      enabledConfigFlags.push(flag)\n      optedInFlags.set(flag.name, flag)\n    }\n\n    if (fitness === true || fitness === `OPT_IN`) {\n      applicableFlags.set(flag.name, flag)\n    }\n\n    if (fitness === false && enabledConfigFlags.includes(flag)) {\n      unfitConfigFlags.push({ flag: flag.name, requires: flag.requires ?? `` })\n    }\n  })\n\n  let unfitFlagMessage = ``\n  if (unfitConfigFlags.length > 0) {\n    unfitFlagMessage =\n      `The following flag(s) found in your gatsby-config.js are not supported in your environment and will have no effect:\\n` +\n      unfitConfigFlags\n        .map(\n          flag => `- ${flag.flag}${flag.requires ? `: ${flag.requires}` : ``}`\n        )\n        .join(`\\n`)\n  }\n\n  // Filter enabledConfigFlags against various tests\n  enabledConfigFlags = enabledConfigFlags.filter(flag => {\n    if (flag.command !== `all` && flag.command !== executingCommand) {\n      // if flag is not for all commands and current command doesn't match command flag is for - skip\n      return false\n    }\n\n    if (flag.noCI && isCI()) {\n      // If we're in CI and flag is not available for CI - skip\n      return false\n    }\n\n    // finally check if flag passes fitness check\n    return flag.testFitness(flag)\n  })\n\n  const addIncluded = (flag): void => {\n    if (flag.includedFlags) {\n      flag.includedFlags.forEach(includedName => {\n        const incExp = flags.find(e => e.name == includedName)\n        if (incExp) {\n          const flagIsDisabledByUser =\n            typeof configFlags[includedName] !== `undefined` &&\n            !configFlags[includedName]\n\n          if (!flagIsDisabledByUser) {\n            enabledConfigFlags.push(incExp)\n            addIncluded(incExp)\n          }\n        }\n      })\n    }\n  }\n  // Add to enabledConfigFlags any includedFlags\n  enabledConfigFlags.forEach(flag => {\n    addIncluded(flag)\n  })\n\n  enabledConfigFlags = _.uniq(enabledConfigFlags)\n\n  // TODO remove flags that longer exist.\n  //  w/ message of thanks\n\n  const generateFlagLine = (flag): string => {\n    let message = ``\n    message += `\\n- ${flag.name}`\n    if (flag.experimental) {\n      message += ` · ${chalk.black.bgYellow.bold(`EXPERIMENTAL`)}`\n    }\n    if (flag.umbrellaIssue) {\n      message += ` · (Umbrella Issue (${flag.umbrellaIssue}))`\n    }\n    message += ` · ${flag.description}`\n\n    return message\n  }\n\n  let message = ``\n  //  Create message about what flags are active.\n  if (enabledConfigFlags.length > 0) {\n    if (\n      enabledConfigFlags.length - optedInFlags.size - lockedInFlags.size >\n      0\n    ) {\n      message = `The following flags are active:`\n      enabledConfigFlags.forEach(flag => {\n        if (!optedInFlags.has(flag.name) && !lockedInFlags.has(flag.name)) {\n          message += generateFlagLine(flag)\n        }\n      })\n    }\n\n    if (lockedInFlagsThatAreInConfig.size > 0) {\n      if (message.length > 0) {\n        message += `\\n\\n`\n      }\n      message += `Some features you configured with flags are used natively now.\nThose flags no longer have any effect and you can remove them from config:`\n      lockedInFlagsThatAreInConfig.forEach(flag => {\n        message += generateFlagLine(flag)\n      })\n    }\n\n    if (optedInFlags.size > 0) {\n      if (message.length > 0) {\n        message += `\\n\\n`\n      }\n      message += `We're shipping new features! For final testing, we're rolling them out first to a small % of Gatsby users\nand your site was automatically chosen as one of them. With your help, we'll then release them to everyone in the next minor release.\n\nWe greatly appreciate your help testing the change. Please report any feedback good or bad in the umbrella issue. If you do encounter problems, please disable the flag by setting it to false in your gatsby-config.js like:\n\nflags: {\n  THE_FLAG: false\n}\n\nThe following flags were automatically enabled on your site:`\n      optedInFlags.forEach(flag => {\n        message += generateFlagLine(flag)\n      })\n    }\n\n    if (message.length > 0) {\n      // if we will print anything about flags, let's try to suggest other available ones\n      const otherFlagSuggestionLines: Array<string> = []\n      const enabledFlagsSet = new Set()\n      enabledConfigFlags.forEach(f => enabledFlagsSet.add(f.name))\n      applicableFlags.forEach(flag => {\n        if (\n          !enabledFlagsSet.has(flag.name) &&\n          typeof configFlags[flag.name] === `undefined`\n        ) {\n          // we want to suggest flag when it's not enabled and user specifically didn't use it in config\n          // we don't want to suggest flag user specifically wanted to disable\n          otherFlagSuggestionLines.push(generateFlagLine(flag))\n        }\n      })\n\n      if (otherFlagSuggestionLines.length > 0) {\n        message += `\\n\\nThere ${\n          otherFlagSuggestionLines.length === 1\n            ? `is one other flag`\n            : `are ${otherFlagSuggestionLines.length} other flags`\n        } available that you might be interested in:${otherFlagSuggestionLines.join(\n          ``\n        )}`\n      }\n    }\n\n    if (message.length > 0) {\n      message += `\\n`\n    }\n  }\n\n  return {\n    enabledConfigFlags,\n    message,\n    unknownFlagMessage,\n    unfitFlagMessage,\n  }\n}\n\nexport default handleFlags\n"],"file":"handle-flags.js"}