{"version":3,"sources":["../../src/services/initialize.ts"],"names":["process","env","gatsby_executing_command","GATSBY_EXPERIMENTAL_FAST_DEV","GATSBY_WORKER_POOL_WORKER","GATSBY_EXPERIMENTAL_DEV_SSR","PRESERVE_FILE_DOWNLOAD_CACHE","PRESERVE_WEBPACK_CACHE","reporter","info","telemetry","trackFeatureIsUsed","on","reason","panic","initialize","program","args","parentSpan","GATSBY_DISABLE_CACHE_PERSISTENCE","setStore","store","_registerAdditionalDiagnosticOutputHandler","logPendingJobs","outputs","job","getState","jobsV2","incomplete","push","length","size","JSON","stringify","directory","extensions","browserslist","dispatch","type","payload","activityForJobs","emitter","phantomActivity","start","onEndJob","jobs","active","end","siteDirectory","activity","activityTimer","config","processFlags","flattenedPlugins","GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND","GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR","lmdbStoreIsUsed","GATSBY_DETECT_NODE_MUTATIONS","polyfill","warn","CYPRESS_SUPPORT","verbose","pluginsStr","_","uniq","map","p","name","version","decorateEvent","plugins","span","lmdbCacheDirectoryName","cacheDirectory","publicDirectory","workerCacheDirectory","lmdbCacheDirectory","cacheJsonDirExists","fs","existsSync","publicDirExists","workerCacheDirExists","lmdbCacheDirExists","cacheDirExists","NODE_ENV","files","cwd","Promise","all","file","remove","GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING","catch","emptyDir","pluginVersions","optionalFiles","state","hashes","trailingSlash","concat","f","pluginsHash","crypto","createHash","update","digest","oldPluginsHash","status","PLUGINS_HASH","stripIndent","cacheIsCorrupt","deleteGlobs","GATSBY_EXPERIMENTAL_PRESERVE_FILE_DOWNLOAD_CACHE","GATSBY_EXPERIMENTAL_PRESERVE_WEBPACK_CACHE","e","error","pluginCachesPurged","ensureDir","srcDir","__dirname","siteDir","tryRequire","copy","err","hasAPIFile","plugin","skipSSR","undefined","envAPIs","modulePath","path","join","resolve","Array","isArray","isResolved","isResolvedSSR","ssrPlugins","options","pluginOptions","filter","browserPlugins","browserPluginsRequires","relativePluginPath","relative","browserAPIRunner","sSRAPIRunner","readFileSync","ssrPluginsRequires","writeFileSync","apiResults","traceId","flattenDeep","workerPool","WorkerPool","create"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\nimport { slash, isCI } from \"gatsby-core-utils\"\nimport * as fs from \"fs-extra\"\nimport { releaseAllMutexes } from \"gatsby-core-utils/mutex\"\nimport md5File from \"md5-file\"\nimport crypto from \"crypto\"\nimport path from \"path\"\nimport telemetry from \"gatsby-telemetry\"\nimport glob from \"globby\"\n\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { getBrowsersList } from \"../utils/browserslist\"\nimport { Store, AnyAction } from \"redux\"\nimport * as WorkerPool from \"../utils/worker/pool\"\nimport { startPluginRunner } from \"../redux/plugin-runner\"\nimport { store, emitter } from \"../redux\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { removeStaleJobs } from \"../bootstrap/remove-stale-jobs\"\nimport { IPluginInfoOptions } from \"../bootstrap/load-plugins/types\"\nimport { IGatsbyState, IStateProgram } from \"../redux/types\"\nimport { IBuildContext } from \"./types\"\nimport { detectLmdbStore } from \"../datastore\"\nimport { loadConfig } from \"../bootstrap/load-config\"\nimport { loadPlugins } from \"../bootstrap/load-plugins\"\nimport type { InternalJob } from \"../utils/jobs/types\"\nimport { enableNodeMutationsDetection } from \"../utils/detect-node-mutations\"\nimport { compileGatsbyFiles } from \"../utils/parcel/compile-gatsby-files\"\nimport { resolveModule } from \"../utils/module-resolver\"\n\ninterface IPluginResolution {\n  resolve: string\n  options: IPluginInfoOptions\n}\n\ninterface IPluginResolutionSSR extends IPluginResolution {\n  name: string\n}\n\n// If the env variable GATSBY_EXPERIMENTAL_FAST_DEV is set, enable\n// all DEV experimental changes (but only during development & not on CI).\nif (\n  process.env.gatsby_executing_command === `develop` &&\n  process.env.GATSBY_EXPERIMENTAL_FAST_DEV &&\n  !isCI() &&\n  // skip FAST_DEV handling in workers, all env vars will be handle\n  // by main process already and passed to worker\n  !process.env.GATSBY_WORKER_POOL_WORKER\n) {\n  process.env.GATSBY_EXPERIMENTAL_DEV_SSR = `true`\n  process.env.PRESERVE_FILE_DOWNLOAD_CACHE = `true`\n  process.env.PRESERVE_WEBPACK_CACHE = `true`\n\n  reporter.info(`\nThree fast dev experiments are enabled: Development SSR, preserving file download cache and preserving webpack cache.\n\nPlease give feedback on their respective umbrella issues!\n\n- https://gatsby.dev/dev-ssr-feedback\n- https://gatsby.dev/cache-clearing-feedback\n  `)\n\n  telemetry.trackFeatureIsUsed(`FastDev`)\n}\n\n// Show stack trace on unhandled promises.\nprocess.on(`unhandledRejection`, (reason: unknown) => {\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/33636\n  reporter.panic((reason as Error) || `Unhandled rejection`)\n})\n\n// Override console.log to add the source file + line number.\n// Useful for debugging if you lose a console.log somewhere.\n// Otherwise leave commented out.\n// require(`../bootstrap/log-line-function`)\n\nexport async function initialize({\n  program: args,\n  parentSpan,\n}: IBuildContext): Promise<{\n  store: Store<IGatsbyState, AnyAction>\n  workerPool: WorkerPool.GatsbyWorkerPool\n}> {\n  if (process.env.GATSBY_DISABLE_CACHE_PERSISTENCE) {\n    reporter.info(\n      `GATSBY_DISABLE_CACHE_PERSISTENCE is enabled. Cache won't be persisted. Next builds will not be able to reuse any work done by current session.`\n    )\n    telemetry.trackFeatureIsUsed(`DisableCachePersistence`)\n  }\n  if (!args) {\n    reporter.panic(`Missing program args`)\n  }\n\n  /* Time for a little story...\n   * When running `gatsby develop`, the globally installed gatsby-cli starts\n   * and sets up a Redux store (which is where logs are now stored). When gatsby\n   * finds your project's locally installed gatsby-cli package in node_modules,\n   * it switches over. This instance will have a separate redux store. We need to\n   * ensure that the correct store is used which is why we call setStore\n   * (/packages/gatsby-cli/src/reporter/redux/index.js)\n   *\n   * This function\n   * - copies over the logs from the global gatsby-cli to the local one\n   * - sets the store to the local one (so that further actions dispatched by\n   * the global gatsby-cli are handled by the local one)\n   */\n  if (args.setStore) {\n    args.setStore(store)\n  }\n\n  if (reporter._registerAdditionalDiagnosticOutputHandler) {\n    reporter._registerAdditionalDiagnosticOutputHandler(\n      function logPendingJobs(): string {\n        const outputs: Array<InternalJob> = []\n\n        for (const [, { job }] of store.getState().jobsV2.incomplete) {\n          outputs.push(job)\n          if (outputs.length >= 5) {\n            // 5 not finished jobs should be enough to track down issues\n            // this is just limiting output \"spam\"\n            break\n          }\n        }\n\n        return outputs.length\n          ? `Unfinished jobs (showing ${outputs.length} of ${\n              store.getState().jobsV2.incomplete.size\n            } jobs total):\\n\\n` + JSON.stringify(outputs, null, 2)\n          : ``\n      }\n    )\n  }\n\n  const directory = slash(args.directory)\n\n  const program: IStateProgram = {\n    ...args,\n    extensions: [],\n    browserslist: getBrowsersList(directory),\n    // Fix program directory path for windows env.\n    directory,\n  }\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: program,\n  })\n\n  let activityForJobs\n\n  emitter.on(`CREATE_JOB`, () => {\n    if (!activityForJobs) {\n      activityForJobs = reporter.phantomActivity(`Running jobs`)\n      activityForJobs.start()\n    }\n  })\n\n  const onEndJob = (): void => {\n    if (activityForJobs && store.getState().jobs.active.length === 0) {\n      activityForJobs.end()\n      activityForJobs = null\n    }\n  }\n\n  emitter.on(`END_JOB`, onEndJob)\n\n  const siteDirectory = program.directory\n\n  // Compile root gatsby files\n  let activity = reporter.activityTimer(`compile gatsby files`)\n  activity.start()\n  await compileGatsbyFiles(siteDirectory)\n  activity.end()\n\n  // Load gatsby config\n  activity = reporter.activityTimer(`load gatsby config`, {\n    parentSpan,\n  })\n  activity.start()\n  const config = await loadConfig({\n    siteDirectory,\n    processFlags: true,\n  })\n  activity.end()\n\n  // Load plugins\n  activity = reporter.activityTimer(`load plugins`, {\n    parentSpan,\n  })\n  activity.start()\n  const flattenedPlugins = await loadPlugins(config, siteDirectory)\n  activity.end()\n\n  // TODO: figure out proper way of disabling loading indicator\n  // for now GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR=false gatsby develop\n  // will work, but we don't want to force users into using env vars\n  if (\n    process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND &&\n    !process.env.GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR\n  ) {\n    // if query on demand is enabled and GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR was not set at all\n    // enable loading indicator\n    process.env.GATSBY_QUERY_ON_DEMAND_LOADING_INDICATOR = `true`\n  }\n  const lmdbStoreIsUsed = detectLmdbStore()\n\n  if (process.env.GATSBY_DETECT_NODE_MUTATIONS) {\n    enableNodeMutationsDetection()\n  }\n\n  if (config && config.polyfill) {\n    reporter.warn(\n      `Support for custom Promise polyfills has been removed in Gatsby v2. We only support Babel 7's new automatic polyfilling behavior.`\n    )\n  }\n\n  if (process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND) {\n    if (process.env.gatsby_executing_command !== `develop`) {\n      // we don't want to ever have this flag enabled for anything than develop\n      // in case someone have this env var globally set\n      delete process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND\n    } else if (isCI() && !process.env.CYPRESS_SUPPORT) {\n      delete process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND\n      reporter.verbose(\n        `Experimental Query on Demand feature is not available in CI environment. Continuing with eager query running.`\n      )\n    }\n  }\n\n  // run stale jobs\n  // @ts-ignore we'll need to fix redux typings https://redux.js.org/usage/usage-with-typescript\n  store.dispatch(removeStaleJobs(store.getState().jobsV2))\n\n  // Multiple occurrences of the same name-version-pair can occur,\n  // so we report an array of unique pairs\n  const pluginsStr = _.uniq(flattenedPlugins.map(p => `${p.name}@${p.version}`))\n  telemetry.decorateEvent(`BUILD_END`, {\n    plugins: pluginsStr,\n  })\n\n  telemetry.decorateEvent(`DEVELOP_STOP`, {\n    plugins: pluginsStr,\n  })\n\n  // Start plugin runner which listens to the store\n  // and invokes Gatsby API based on actions.\n  startPluginRunner()\n\n  // onPreInit\n  activity = reporter.activityTimer(`onPreInit`, {\n    parentSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPreInit`, { parentSpan: activity.span })\n  activity.end()\n\n  const lmdbCacheDirectoryName = `caches-lmdb`\n\n  const cacheDirectory = `${program.directory}/.cache`\n  const publicDirectory = `${program.directory}/public`\n  const workerCacheDirectory = `${program.directory}/.cache/worker`\n  const lmdbCacheDirectory = `${program.directory}/.cache/${lmdbCacheDirectoryName}`\n\n  const cacheJsonDirExists = fs.existsSync(`${cacheDirectory}/json`)\n  const publicDirExists = fs.existsSync(publicDirectory)\n  const workerCacheDirExists = fs.existsSync(workerCacheDirectory)\n  const lmdbCacheDirExists = fs.existsSync(lmdbCacheDirectory)\n\n  // check the cache file that is used by the current configuration\n  const cacheDirExists = lmdbStoreIsUsed\n    ? lmdbCacheDirExists\n    : cacheJsonDirExists\n\n  // For builds in case public dir exists, but cache doesn't, we need to clean up potentially stale\n  // artifacts from previous builds (due to cache not being available, we can't rely on tracking of artifacts)\n  if (\n    process.env.NODE_ENV === `production` &&\n    publicDirExists &&\n    !cacheDirExists\n  ) {\n    activity = reporter.activityTimer(\n      `delete html and css files from previous builds`,\n      {\n        parentSpan,\n      }\n    )\n    activity.start()\n    const files = await glob(\n      [\n        `public/**/*.{html,css}`,\n        `!public/page-data/**/*`,\n        `!public/static`,\n        `!public/static/**/*.{html,css}`,\n      ],\n      {\n        cwd: program.directory,\n      }\n    )\n    await Promise.all(files.map(file => fs.remove(file)))\n    activity.end()\n  }\n\n  // When the main process and workers communicate they save parts of their redux state to .cache/worker\n  // We should clean this directory to remove stale files that a worker might accidentally reuse then\n  if (\n    workerCacheDirExists &&\n    process.env.GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING\n  ) {\n    activity = reporter.activityTimer(\n      `delete worker cache from previous builds`,\n      {\n        parentSpan,\n      }\n    )\n    activity.start()\n    await fs\n      .remove(workerCacheDirectory)\n      .catch(() => fs.emptyDir(workerCacheDirectory))\n    activity.end()\n  }\n\n  activity = reporter.activityTimer(`initialize cache`, {\n    parentSpan,\n  })\n  activity.start()\n  // Check if any plugins have been updated since our last run. If so\n  // we delete the cache is there's likely been changes\n  // since the previous run.\n  //\n  // We do this by creating a hash of all the version numbers of installed\n  // plugins, the site's package.json, gatsby-config.js, and gatsby-node.js.\n  // The last, gatsby-node.js, is important as many gatsby sites put important\n  // logic in there e.g. generating slugs for custom pages.\n  const pluginVersions = flattenedPlugins.map(p => p.version)\n  const optionalFiles = [\n    `${program.directory}/gatsby-config.js`,\n    `${program.directory}/gatsby-node.js`,\n    `${program.directory}/gatsby-config.ts`,\n    `${program.directory}/gatsby-node.ts`,\n  ] as Array<string>\n\n  const state = store.getState()\n\n  const hashes = await Promise.all(\n    // Ignore optional files with .catch() as these are not required\n    [md5File(`package.json`), state.config.trailingSlash as string].concat(\n      optionalFiles.map(f => md5File(f).catch(() => ``))\n    )\n  )\n\n  const pluginsHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(pluginVersions.concat(hashes)))\n    .digest(`hex`)\n\n  const oldPluginsHash = state && state.status ? state.status.PLUGINS_HASH : ``\n\n  // Check if anything has changed. If it has, delete the site's .cache\n  // directory and tell reducers to empty themselves.\n  //\n  // Also if the hash isn't there, then delete things just in case something\n  // is weird.\n  if (oldPluginsHash && pluginsHash !== oldPluginsHash) {\n    reporter.info(reporter.stripIndent`\n      One or more of your plugins have changed since the last time you ran Gatsby. As\n      a precaution, we're deleting your site's cache to ensure there's no stale data.\n    `)\n  }\n\n  // .cache directory exists in develop at this point\n  // so checking for .cache/json or .cache/caches-lmdb as a heuristic (could be any expected file)\n  const cacheIsCorrupt = cacheDirExists && !publicDirExists\n  if (cacheIsCorrupt) {\n    reporter.info(reporter.stripIndent`\n      We've detected that the Gatsby cache is incomplete (the .cache directory exists\n      but the public directory does not). As a precaution, we're deleting your site's\n      cache to ensure there's no stale data.\n    `)\n  }\n\n  if (!oldPluginsHash || pluginsHash !== oldPluginsHash || cacheIsCorrupt) {\n    try {\n      // Comment out inviet until we can test perf impact\n      //\n      // let sourceFileSystemVersion = flattenedPlugins.find(\n      // plugin => plugin.name === `gatsby-source-filesystem`\n      // )?.version\n\n      // // The site might be using a plugin which uses \"createRemoteFileNode\" but\n      // // doesn't have gatsby-source-filesystem in their gatsby-config.js. So lets\n      // // also try requiring it.\n      // if (!sourceFileSystemVersion) {\n      // try {\n      // sourceFileSystemVersion = require(`gatsby-source-filesystem/package.json`)\n      // ?.version\n      // } catch {\n      // // ignore require errors\n      // }\n      // }\n      // } else if (\n      // sourceFileSystemVersion &&\n      // semver.lt(sourceFileSystemVersion, `2.9.0`)\n      // ) {\n      // // If the site has more than 50 downloaded files in it, tell them\n      // // how to save time.\n      // try {\n      // // Divide by two as the directory as both cache files + the actual downloaded files so\n      // // two results / downloaded file.\n      // const filesCount =\n      // (await fs.readdir(`.cache/caches/gatsby-source-filesystem`))\n      // .length / 2\n      // if (filesCount > 50) {\n      // reporter.info(stripIndent`\\n\\n\n\n      // Your local development experience is about to get better, faster, and stronger!\n\n      // Your friendly Gatsby maintainers detected your site downloads quite a few files and that we're about to delete all ${Math.round(\n      // filesCount\n      // )} of them 😅. We're working right now to make our caching smarter which means we won't delete your downloaded files any more.\n\n      // If you're interested in trialing the new caching behavior *today* — which should make your local development environment faster, go ahead and enable the PRESERVE_FILE_DOWNLOAD_CACHE flag and run your develop server again.\n\n      // To do so, add to your gatsby-config.js:\n\n      // flags: {\n      // preserve_file_download_cache: true,\n      // }\n\n      // visit the umbrella issue to learn more: https://github.com/gatsbyjs/gatsby/discussions/28331\n      // `)\n      // }\n      // } catch {\n      // // ignore errors (mostly will just be directory not found).\n      // }\n      // }\n\n      const deleteGlobs = [\n        // By default delete all files & subdirectories\n        `.cache/**`,\n        `.cache/data/**`,\n        `!.cache/data/gatsby-core-utils/**`,\n        `!.cache/compiled`,\n      ]\n\n      if (process.env.GATSBY_EXPERIMENTAL_PRESERVE_FILE_DOWNLOAD_CACHE) {\n        // Stop the caches directory from being deleted, add all sub directories,\n        // but remove gatsby-source-filesystem\n        deleteGlobs.push(`!.cache/caches`)\n        deleteGlobs.push(`.cache/caches/*`)\n        deleteGlobs.push(`!.cache/caches/gatsby-source-filesystem`)\n      }\n\n      if (process.env.GATSBY_EXPERIMENTAL_PRESERVE_WEBPACK_CACHE) {\n        // Add webpack\n        deleteGlobs.push(`!.cache/webpack`)\n      }\n\n      const files = await glob(deleteGlobs, {\n        cwd: program.directory,\n      })\n\n      await Promise.all(files.map(file => fs.remove(file)))\n    } catch (e) {\n      reporter.error(`Failed to remove .cache files.`, e)\n    }\n    // Tell reducers to delete their data (the store will already have\n    // been loaded from the file system cache).\n    store.dispatch({\n      type: `DELETE_CACHE`,\n      cacheIsCorrupt,\n    })\n\n    // make sure all previous mutexes are released\n    await releaseAllMutexes()\n\n    // in future this should show which plugin's caches are purged\n    // possibly should also have which plugins had caches\n    telemetry.decorateEvent(`BUILD_END`, {\n      pluginCachesPurged: [`*`],\n    })\n    telemetry.decorateEvent(`DEVELOP_STOP`, {\n      pluginCachesPurged: [`*`],\n    })\n  }\n\n  // Update the store with the new plugins hash.\n  store.dispatch({\n    type: `UPDATE_PLUGINS_HASH`,\n    payload: pluginsHash,\n  })\n\n  // Now that we know the .cache directory is safe, initialize the cache\n  // directory.\n  await fs.ensureDir(cacheDirectory)\n\n  // Ensure the public/static directory\n  await fs.ensureDir(`${publicDirectory}/static`)\n\n  // Init plugins once cache is initialized\n  if (_CFLAGS_.GATSBY_MAJOR === `4`) {\n    await apiRunnerNode(`onPluginInit`, {\n      parentSpan: activity.span,\n    })\n  } else {\n    await apiRunnerNode(`unstable_onPluginInit`, {\n      parentSpan: activity.span,\n    })\n  }\n\n  activity.end()\n\n  activity = reporter.activityTimer(`copy gatsby files`, {\n    parentSpan,\n  })\n  activity.start()\n  const srcDir = `${__dirname}/../../cache-dir`\n  const siteDir = cacheDirectory\n  const tryRequire = `${__dirname}/../utils/test-require-error.js`\n  try {\n    await fs.copy(srcDir, siteDir)\n    await fs.copy(tryRequire, `${siteDir}/test-require-error.js`)\n    if (lmdbStoreIsUsed) {\n      await fs.ensureDir(`${cacheDirectory}/${lmdbCacheDirectoryName}`)\n    } else {\n      await fs.ensureDir(`${cacheDirectory}/json`)\n    }\n\n    // Ensure .cache/fragments exists and is empty. We want fragments to be\n    // added on every run in response to data as fragments can only be added if\n    // the data used to create the schema they're dependent on is available.\n    await fs.emptyDir(`${cacheDirectory}/fragments`)\n  } catch (err) {\n    reporter.panic(`Unable to copy site files to .cache`, err)\n  }\n\n  // Find plugins which implement gatsby-browser and gatsby-ssr and write\n  // out api-runners for them.\n  const hasAPIFile = (env, plugin): string | undefined => {\n    // The plugin loader has disabled SSR APIs for this plugin. Usually due to\n    // multiple implementations of an API that can only be implemented once\n    if (env === `ssr` && plugin.skipSSR === true) return undefined\n\n    const envAPIs = plugin[`${env}APIs`]\n\n    // Always include gatsby-browser.js files if they exist as they're\n    // a handy place to include global styles and other global imports.\n    try {\n      if (env === `browser`) {\n        const modulePath = path.join(plugin.resolve, `gatsby-${env}`)\n        return slash(resolveModule(modulePath) as string)\n      }\n    } catch (e) {\n      // ignore\n    }\n\n    if (envAPIs && Array.isArray(envAPIs) && envAPIs.length > 0) {\n      const modulePath = path.join(plugin.resolve, `gatsby-${env}`)\n      return slash(resolveModule(modulePath) as string)\n    }\n    return undefined\n  }\n\n  const isResolved = (plugin): plugin is IPluginResolution => !!plugin.resolve\n  const isResolvedSSR = (plugin): plugin is IPluginResolutionSSR =>\n    !!plugin.resolve\n\n  const ssrPlugins: Array<IPluginResolutionSSR> = flattenedPlugins\n    .map(plugin => {\n      return {\n        name: plugin.name,\n        resolve: hasAPIFile(`ssr`, plugin),\n        options: plugin.pluginOptions,\n      }\n    })\n    .filter(isResolvedSSR)\n\n  const browserPlugins: Array<IPluginResolution> = flattenedPlugins\n    .map(plugin => {\n      return {\n        resolve: hasAPIFile(`browser`, plugin),\n        options: plugin.pluginOptions,\n      }\n    })\n    .filter(isResolved)\n\n  const browserPluginsRequires = browserPlugins\n    .map(plugin => {\n      // we need a relative import path to keep contenthash the same if directory changes\n      const relativePluginPath = path.relative(siteDir, plugin.resolve)\n      return `{\n      plugin: require('${slash(relativePluginPath)}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    })\n    .join(`,`)\n\n  const browserAPIRunner = `module.exports = [${browserPluginsRequires}]\\n`\n\n  let sSRAPIRunner = ``\n\n  try {\n    sSRAPIRunner = fs.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`)\n  } catch (err) {\n    reporter.panic(`Failed to read ${siteDir}/api-runner-ssr.js`, err)\n  }\n\n  const ssrPluginsRequires = ssrPlugins\n    .map(\n      plugin =>\n        `{\n      name: '${plugin.name}',\n      plugin: require('${plugin.resolve}'),\n      options: ${JSON.stringify(plugin.options)},\n    }`\n    )\n    .join(`,`)\n  sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\\n${sSRAPIRunner}`\n\n  fs.writeFileSync(\n    `${siteDir}/api-runner-browser-plugins.js`,\n    browserAPIRunner,\n    `utf-8`\n  )\n  fs.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`)\n\n  activity.end()\n  /**\n   * Start the main bootstrap processes.\n   */\n\n  // onPreBootstrap\n  activity = reporter.activityTimer(`onPreBootstrap`, {\n    parentSpan,\n  })\n  activity.start()\n  await apiRunnerNode(`onPreBootstrap`, {\n    parentSpan: activity.span,\n  })\n  activity.end()\n\n  // Track trailing slash option used in config\n  telemetry.trackFeatureIsUsed(`trailingSlash:${state.config.trailingSlash}`)\n\n  // Collect resolvable extensions and attach to program.\n  const extensions = [`.mjs`, `.js`, `.jsx`, `.wasm`, `.json`]\n  // Change to this being an action and plugins implement `onPreBootstrap`\n  // for adding extensions.\n  const apiResults = await apiRunnerNode(`resolvableExtensions`, {\n    traceId: `initial-resolvableExtensions`,\n    parentSpan,\n  })\n\n  store.dispatch({\n    type: `SET_PROGRAM_EXTENSIONS`,\n    payload: _.flattenDeep([extensions, apiResults]),\n  })\n\n  const workerPool = WorkerPool.create()\n\n  return {\n    store,\n    workerPool,\n  }\n}\n"],"file":"initialize.js"}