{"version":3,"file":"use-intersection-observer.js","sources":["../../node_modules/intersection-observer/intersection-observer.js","../../src/index.tsx","../../node_modules/@react-hook/passive-layout-effect/src/index.tsx"],"sourcesContent":["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n(function() {\n'use strict';\n\n// Exit early if we're not running in a browser.\nif (typeof window !== 'object') {\n  return;\n}\n\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * A local reference to the document.\n */\nvar document = window.document;\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n/**\n * The signal updater for cross-origin intersection. When not null, it means\n * that the polyfill is configured to work in a cross-origin mode.\n * @type {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n */\nvar crossOriginUpdater = null;\n\n/**\n * The current cross-origin intersection. Only used in the cross-origin mode.\n * @type {DOMRect|ClientRect}\n */\nvar crossOriginRect = null;\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = ensureDOMRect(entry.rootBounds);\n  this.boundingClientRect = ensureDOMRect(entry.boundingClientRect);\n  this.intersectionRect = ensureDOMRect(entry.intersectionRect || getEmptyRect());\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n\n  /** @private @const {!Array<!Document>} */\n  this._monitoringDocuments = [];\n  /** @private @const {!Array<function()>} */\n  this._monitoringUnsubscribes = [];\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Sets up the polyfill in the cross-origin mode. The result is the\n * updater function that accepts two arguments: `boundingClientRect` and\n * `intersectionRect` - just as these fields would be available to the\n * parent via `IntersectionObserverEntry`. This function should be called\n * each time the iframe receives intersection information from the parent\n * window, e.g. via messaging.\n * @return {function(DOMRect|ClientRect, DOMRect|ClientRect)}\n */\nIntersectionObserver._setupCrossOriginUpdater = function() {\n  if (!crossOriginUpdater) {\n    /**\n     * @param {DOMRect|ClientRect} boundingClientRect\n     * @param {DOMRect|ClientRect} intersectionRect\n     */\n    crossOriginUpdater = function(boundingClientRect, intersectionRect) {\n      if (!boundingClientRect || !intersectionRect) {\n        crossOriginRect = getEmptyRect();\n      } else {\n        crossOriginRect = convertFromParentRect(boundingClientRect, intersectionRect);\n      }\n      registry.forEach(function(observer) {\n        observer._checkForIntersections();\n      });\n    };\n  }\n  return crossOriginUpdater;\n};\n\n\n/**\n * Resets the cross-origin mode.\n */\nIntersectionObserver._resetCrossOriginUpdater = function() {\n  crossOriginUpdater = null;\n  crossOriginRect = null;\n};\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections(target.ownerDocument);\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n        return item.element != target;\n      });\n  this._unmonitorIntersections(target.ownerDocument);\n  if (this._observationTargets.length == 0) {\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorAllIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function(doc) {\n  var win = doc.defaultView;\n  if (!win) {\n    // Already destroyed.\n    return;\n  }\n  if (this._monitoringDocuments.indexOf(doc) != -1) {\n    // Already monitoring.\n    return;\n  }\n\n  // Private state for monitoring.\n  var callback = this._checkForIntersections;\n  var monitoringInterval = null;\n  var domObserver = null;\n\n  // If a poll interval is set, use polling instead of listening to\n  // resize and scroll events or DOM mutations.\n  if (this.POLL_INTERVAL) {\n    monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);\n  } else {\n    addEvent(win, 'resize', callback, true);\n    addEvent(doc, 'scroll', callback, true);\n    if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {\n      domObserver = new win.MutationObserver(callback);\n      domObserver.observe(doc, {\n        attributes: true,\n        childList: true,\n        characterData: true,\n        subtree: true\n      });\n    }\n  }\n\n  this._monitoringDocuments.push(doc);\n  this._monitoringUnsubscribes.push(function() {\n    // Get the window object again. When a friendly iframe is destroyed, it\n    // will be null.\n    var win = doc.defaultView;\n\n    if (win) {\n      if (monitoringInterval) {\n        win.clearInterval(monitoringInterval);\n      }\n      removeEvent(win, 'resize', callback, true);\n    }\n\n    removeEvent(doc, 'scroll', callback, true);\n    if (domObserver) {\n      domObserver.disconnect();\n    }\n  });\n\n  // Also monitor the parent.\n  if (doc != (this.root && this.root.ownerDocument || document)) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._monitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function(doc) {\n  var index = this._monitoringDocuments.indexOf(doc);\n  if (index == -1) {\n    return;\n  }\n\n  var rootDoc = (this.root && this.root.ownerDocument || document);\n\n  // Check if any dependent targets are still remaining.\n  var hasDependentTargets =\n      this._observationTargets.some(function(item) {\n        var itemDoc = item.element.ownerDocument;\n        // Target is in this context.\n        if (itemDoc == doc) {\n          return true;\n        }\n        // Target is nested in this context.\n        while (itemDoc && itemDoc != rootDoc) {\n          var frame = getFrameElement(itemDoc);\n          itemDoc = frame && frame.ownerDocument;\n          if (itemDoc == doc) {\n            return true;\n          }\n        }\n        return false;\n      });\n  if (hasDependentTargets) {\n    return;\n  }\n\n  // Unsubscribe.\n  var unsubscribe = this._monitoringUnsubscribes[index];\n  this._monitoringDocuments.splice(index, 1);\n  this._monitoringUnsubscribes.splice(index, 1);\n  unsubscribe();\n\n  // Also unmonitor the parent.\n  if (doc != rootDoc) {\n    var frame = getFrameElement(doc);\n    if (frame) {\n      this._unmonitorIntersections(frame.ownerDocument);\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @param {!Document} doc\n * @private\n */\nIntersectionObserver.prototype._unmonitorAllIntersections = function() {\n  var unsubscribes = this._monitoringUnsubscribes.slice(0);\n  this._monitoringDocuments.length = 0;\n  this._monitoringUnsubscribes.length = 0;\n  for (var i = 0; i < unsubscribes.length; i++) {\n    unsubscribes[i]();\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  if (!this.root && crossOriginUpdater && !crossOriginRect) {\n    // Cross origin monitoring, but no initial data available yet.\n    return;\n  }\n\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, targetRect, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: crossOriginUpdater && !this.root ? null : rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} targetRect The bounding rect of the target.\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, targetRect, rootRect) {\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot && parent) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return null;\n\n    if (parent == this.root || parent.nodeType == /* DOCUMENT */ 9) {\n      atRoot = true;\n      if (parent == this.root || parent == document) {\n        if (crossOriginUpdater && !this.root) {\n          if (!crossOriginRect ||\n              crossOriginRect.width == 0 && crossOriginRect.height == 0) {\n            // A 0-size cross-origin intersection means no-intersection.\n            parent = null;\n            parentRect = null;\n            intersectionRect = null;\n          } else {\n            parentRect = crossOriginRect;\n          }\n        } else {\n          parentRect = rootRect;\n        }\n      } else {\n        // Check if there's a frame that can be navigated to.\n        var frame = getParentNode(parent);\n        var frameRect = frame && getBoundingClientRect(frame);\n        var frameIntersect =\n            frame &&\n            this._computeTargetAndRootIntersection(frame, frameRect, rootRect);\n        if (frameRect && frameIntersect) {\n          parent = frame;\n          parentRect = convertFromParentRect(frameRect, frameIntersect);\n        } else {\n          parent = null;\n          intersectionRect = null;\n        }\n      }\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      var doc = parent.ownerDocument;\n      if (parent != doc.body &&\n          parent != doc.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n    }\n    if (!intersectionRect) break;\n    parent = parent && getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {ClientRect} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {DOMRect|ClientRect} rect The rect object to expand.\n * @return {ClientRect} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target) &&\n    (!this.root || this.root.ownerDocument == target.ownerDocument);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object|?ClientRect} The intersection rect or undefined if no\n *     intersection is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  } || null;\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {DOMRect|ClientRect} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {ClientRect} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n\n/**\n * Ensure that the result has all of the necessary fields of the DOMRect.\n * Specifically this ensures that `x` and `y` fields are set.\n *\n * @param {?DOMRect|?ClientRect} rect\n * @return {?DOMRect}\n */\nfunction ensureDOMRect(rect) {\n  // A `DOMRect` object has `x` and `y` fields.\n  if (!rect || 'x' in rect) {\n    return rect;\n  }\n  // A IE's `ClientRect` type does not have `x` and `y`. The same is the case\n  // for internally calculated Rect objects. For the purposes of\n  // `IntersectionObserver`, it's sufficient to simply mirror `left` and `top`\n  // for these fields.\n  return {\n    top: rect.top,\n    y: rect.top,\n    bottom: rect.bottom,\n    left: rect.left,\n    x: rect.left,\n    right: rect.right,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\n\n/**\n * Inverts the intersection and bounding rect from the parent (frame) BCR to\n * the local BCR space.\n * @param {DOMRect|ClientRect} parentBoundingRect The parent's bound client rect.\n * @param {DOMRect|ClientRect} parentIntersectionRect The parent's own intersection rect.\n * @return {ClientRect} The local root bounding rect for the parent's children.\n */\nfunction convertFromParentRect(parentBoundingRect, parentIntersectionRect) {\n  var top = parentIntersectionRect.top - parentBoundingRect.top;\n  var left = parentIntersectionRect.left - parentBoundingRect.left;\n  return {\n    top: top,\n    left: left,\n    height: parentIntersectionRect.height,\n    width: parentIntersectionRect.width,\n    bottom: top + parentIntersectionRect.height,\n    right: left + parentIntersectionRect.width\n  };\n}\n\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (node.nodeType == /* DOCUMENT */ 9 && node != document) {\n    // If this node is a document node, look for the embedding frame.\n    return getFrameElement(node);\n  }\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n\n  if (parent && parent.assignedSlot) {\n    // If the parent is distributed in a <slot>, return the parent of a slot.\n    return parent.assignedSlot.parentNode;\n  }\n\n  return parent;\n}\n\n\n/**\n * Returns the embedding frame element, if any.\n * @param {!Document} doc\n * @return {!Element}\n */\nfunction getFrameElement(doc) {\n  try {\n    return doc.defaultView && doc.defaultView.frameElement || null;\n  } catch (e) {\n    // Ignore the error.\n    return null;\n  }\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}());\n","import 'intersection-observer'\nimport * as React from 'react'\nimport useLayoutEffect from '@react-hook/passive-layout-effect'\n\nfunction useIntersectionObserver<T extends HTMLElement = HTMLElement>(\n  target: React.RefObject<T> | T | null,\n  options: IntersectionObserverOptions = {}\n): MockIntersectionObserverEntry | IntersectionObserverEntry {\n  const {\n    root = null,\n    pollInterval = null,\n    useMutationObserver = false,\n    rootMargin = '0px 0px 0px 0px',\n    threshold = 0,\n    initialIsIntersecting = false,\n  } = options\n  const [entry, setEntry] = React.useState<\n    IntersectionObserverEntry | MockIntersectionObserverEntry\n  >(() => ({\n    boundingClientRect: null,\n    intersectionRatio: 0,\n    intersectionRect: null,\n    isIntersecting: initialIsIntersecting,\n    rootBounds: null,\n    target: null,\n    time: 0,\n  }))\n  const [observer, setObserver] = React.useState(() =>\n    getIntersectionObserver({\n      root,\n      pollInterval,\n      useMutationObserver,\n      rootMargin,\n      threshold,\n    })\n  )\n\n  React.useEffect(() => {\n    const observer = getIntersectionObserver({\n      root,\n      pollInterval,\n      useMutationObserver,\n      rootMargin,\n      threshold,\n    })\n    setObserver(observer)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    root,\n    rootMargin,\n    pollInterval,\n    useMutationObserver,\n    JSON.stringify(threshold),\n  ])\n\n  useLayoutEffect(() => {\n    const targetEl = target && 'current' in target ? target.current : target\n    if (!observer || !targetEl) return\n    let didUnsubscribe = false\n    observer.observer.observe(targetEl)\n\n    const callback = (entries: IntersectionObserverEntry[]) => {\n      if (didUnsubscribe) return\n\n      for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i]\n        if (entry.target === targetEl) {\n          setEntry(entry)\n        }\n      }\n    }\n\n    observer.subscribe(callback)\n\n    return () => {\n      didUnsubscribe = true\n      observer.observer.unobserve(targetEl)\n      observer.unsubscribe(callback)\n    }\n  }, [target, observer])\n\n  return entry\n}\n\nfunction createIntersectionObserver({\n  root = null,\n  pollInterval = null,\n  useMutationObserver = false,\n  rootMargin = '0px 0px 0px 0px',\n  threshold = 0,\n}: IntersectionObserverOptions) {\n  const callbacks: Set<IntersectionObserverCallback> = new Set()\n  if (typeof IntersectionObserver === 'undefined') return null\n  const observer = new IntersectionObserver(\n    (entries) => {\n      for (const callback of callbacks) callback(entries, observer)\n    },\n    {root, rootMargin, threshold}\n  )\n  // @ts-ignore\n  observer.POLL_INTERVAL = pollInterval\n  // @ts-ignore\n  observer.USE_MUTATION_OBSERVER = useMutationObserver\n\n  return {\n    observer,\n    getListeners() {\n      return callbacks\n    },\n    subscribe: (callback: IntersectionObserverCallback) =>\n      callbacks.add(callback),\n    unsubscribe: (callback: IntersectionObserverCallback) =>\n      callbacks.delete(callback),\n  }\n}\n\nconst _intersectionObserver: Map<\n  HTMLElement | null | undefined,\n  Record<string, ReturnType<typeof createIntersectionObserver>>\n> = new Map()\n\nfunction getIntersectionObserver(options: IntersectionObserverOptions) {\n  const {root, ...keys} = options\n  const key = JSON.stringify(keys)\n  let base = _intersectionObserver.get(root)\n  if (!base) {\n    base = {}\n    _intersectionObserver.set(root, base)\n  }\n  return !base[key]\n    ? (base[key] = createIntersectionObserver(options))\n    : base[key]\n}\n\nexport type UseIntersectionObserverCallback = (\n  entry: IntersectionObserverEntry,\n  observer: IntersectionObserver\n) => any\n\nexport interface IntersectionObserverOptions {\n  root?: HTMLElement | null\n  pollInterval?: number | null\n  useMutationObserver?: boolean\n  rootMargin?: string\n  threshold?: number | number[]\n  initialIsIntersecting?: boolean\n}\n\nexport interface IntersectionObserverBounds {\n  readonly height: number\n  readonly width: number\n  readonly top: number\n  readonly left: number\n  readonly right: number\n  readonly bottom: number\n}\n\nexport interface MockIntersectionObserverEntry {\n  readonly time: number | null\n  readonly rootBounds: IntersectionObserverBounds | null\n  readonly boundingClientRect: IntersectionObserverBounds | null\n  readonly intersectionRect: IntersectionObserverBounds | null\n  readonly intersectionRatio: number | null\n  readonly target: HTMLElement | null\n  readonly isIntersecting: boolean\n}\n\nexport default useIntersectionObserver\n","import * as React from 'react'\n\nconst usePassiveLayoutEffect =\n  React[\n    typeof document !== 'undefined' && document.createElement !== void 0\n      ? 'useLayoutEffect'\n      : 'useEffect'\n  ]\n\nexport default usePassiveLayoutEffect\n"],"names":["this","intersectionRatio","margin","value","unit","observer","_checkForIntersections","target","_observationTargets","some","item","element","nodeType","Error","_registerInstance","push","entry","_monitorIntersections","ownerDocument","filter","_unmonitorIntersections","length","_unregisterInstance","_unmonitorAllIntersections","records","_queuedEntries","slice","t","i","a","isNaN","opt_threshold","threshold","Array","isArray","sort","parts","exec","parseFloat","opt_rootMargin","margins","split","map","unsubscribes","_monitoringUnsubscribes","_monitoringDocuments","rect","_rootMarginValues","width","height","newRect","top","right","bottom","left","oldEntry","newEntry","oldRatio","isIntersecting","newRatio","thresholds","addEvent","node","event","fn","opt_useCapture","addEventListener","attachEvent","removeEvent","removeEventListener","detatchEvent","ensureDOMRect","y","x","convertFromParentRect","parentBoundingRect","parentIntersectionRect","getFrameElement","doc","defaultView","frameElement","e","getIntersectionObserver","options","root","keys","key","JSON","stringify","base","_intersectionObserver","get","set","pollInterval","useMutationObserver","rootMargin","callbacks","Set","IntersectionObserver","entries","callback","POLL_INTERVAL","USE_MUTATION_OBSERVER","getListeners","subscribe","add","unsubscribe","delete","createIntersectionObserver","IntersectionObserverEntry","time","rootBounds","boundingClientRect","intersectionRect","targetRect","targetArea","intersectionArea","Number","toFixed","opt_options","timeout","timer","setTimeout","throttle","bind","THROTTLE_TIMEOUT","_callback","_parseRootMargin","_initThresholds","join","crossOriginRect","registry","forEach","getBoundingClientRect","el","err","containsDeep","parent","child","getParentNode","parentNode","document","host","assignedSlot","window","prototype","Object","defineProperty","crossOriginUpdater","_setupCrossOriginUpdater","_resetCrossOriginUpdater","observe","unobserve","disconnect","takeRecords","win","indexOf","monitoringInterval","domObserver","setInterval","MutationObserver","attributes","childList","characterData","subtree","clearInterval","frame","index","rootDoc","itemDoc","splice","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","rootContainsTarget","_rootContainsTarget","_computeTargetAndRootIntersection","performance","now","_hasCrossedThreshold","getComputedStyle","display","rect1","rect2","atRoot","parentRect","parentComputedStyle","frameRect","frameIntersect","body","documentElement","overflow","Math","max","min","html","clientWidth","clientHeight","_expandRectByRootMargin","usePassiveLayoutEffect","React","createElement","Map","initialIsIntersecting","setEntry","setObserver","useLayoutEffect","targetEl","current","didUnsubscribe"],"mappings":"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"}