{"version":3,"sources":["../../../src/redux/reducers/jobsv2.ts"],"names":["initialState","incomplete","Map","complete","jobsByRequest","jobsV2Reducer","state","action","type","cleanState","cleanStateKeys","Object","keys","isOutdatedJobsState","length","some","key","prototype","hasOwnProperty","call","cacheIsCorrupt","job","payload","set","contentDigest","jobContentDigest","result","get","Error","delete","inputPaths","requestId","jobs","Set","add"],"mappings":"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","sourcesContent":["import {\n  ICreateJobV2Action,\n  IRemoveStaleJobV2Action,\n  IEndJobV2Action,\n  IGatsbyState,\n  IGatsbyIncompleteJobV2,\n  IGatsbyCompleteJobV2,\n  IDeleteCacheAction,\n  ISetJobV2Context,\n  IClearJobV2Context,\n} from \"../types\"\n\nconst initialState = (): IGatsbyState[\"jobsV2\"] => {\n  return {\n    incomplete: new Map(),\n    complete: new Map(),\n    jobsByRequest: new Map(),\n  }\n}\n\nexport const jobsV2Reducer = (\n  state = initialState(),\n  action:\n    | ICreateJobV2Action\n    | IRemoveStaleJobV2Action\n    | IEndJobV2Action\n    | ISetJobV2Context\n    | IClearJobV2Context\n    | IDeleteCacheAction\n): IGatsbyState[\"jobsV2\"] => {\n  switch (action.type) {\n    case `DELETE_CACHE`: {\n      // Wipe the cache if state shape doesn't match the initial shape\n      // It is possible when the old cache is loaded for the new version of this reducer\n      const cleanState = initialState()\n      const cleanStateKeys = Object.keys(cleanState)\n\n      const isOutdatedJobsState =\n        cleanStateKeys.length !== Object.keys(state).length ||\n        cleanStateKeys.some(\n          key => !Object.prototype.hasOwnProperty.call(state, key)\n        )\n\n      return action.cacheIsCorrupt || isOutdatedJobsState ? cleanState : state\n    }\n\n    case `CREATE_JOB_V2`: {\n      const { job } = action.payload\n\n      state.incomplete.set(job.contentDigest, {\n        job,\n      } as IGatsbyIncompleteJobV2)\n\n      return state\n    }\n\n    case `END_JOB_V2`: {\n      const { jobContentDigest, result } = action.payload\n      const { job } = state.incomplete.get(\n        jobContentDigest\n      ) as IGatsbyIncompleteJobV2\n\n      if (!job) {\n        throw new Error(\n          `If you encounter this error, it's probably a Gatsby internal bug. Please open an issue reporting us this.`\n        )\n      }\n\n      state.incomplete.delete(job.contentDigest)\n\n      // inputPaths is used to make sure the job is not stale\n      state.complete.set(job.contentDigest, {\n        result,\n        inputPaths: job.inputPaths,\n      } as IGatsbyCompleteJobV2)\n\n      return state\n    }\n\n    case `REMOVE_STALE_JOB_V2`: {\n      const { contentDigest } = action.payload\n      state.incomplete.delete(contentDigest)\n      state.complete.delete(contentDigest)\n\n      return state\n    }\n\n    case `SET_JOB_V2_CONTEXT`: {\n      const { requestId, job } = action.payload\n\n      let jobs = state.jobsByRequest.get(requestId)\n      if (!jobs) {\n        jobs = new Set<string>()\n        state.jobsByRequest.set(requestId, jobs)\n      }\n      jobs.add(job.contentDigest)\n\n      return state\n    }\n\n    case `CLEAR_JOB_V2_CONTEXT`: {\n      const { requestId } = action.payload\n      state.jobsByRequest.delete(requestId)\n    }\n  }\n\n  return state\n}\n"],"file":"jobsv2.js"}