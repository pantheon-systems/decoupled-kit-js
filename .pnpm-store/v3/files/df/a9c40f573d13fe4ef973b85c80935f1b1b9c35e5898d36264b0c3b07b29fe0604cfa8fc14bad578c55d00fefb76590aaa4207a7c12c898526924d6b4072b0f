{"version":3,"sources":["../../src/steps/check-plugin-requirements.ts"],"names":["parseRange","range","set","versions","Range","isARange","length","minVersion","semver","version","maxVersion","message","areRemotePluginVersionsSatisfied","helpers","disableCompatibilityCheck","url","wpGraphQLEndpoint","wpgqlIsSatisfied","wpGatsbyIsSatisfied","data","query","variables","wpgqlVersion","supportedWpPluginVersions","WPGraphQL","wpgatsbyVersion","WPGatsby","panicOnError","throwGqlErrors","isFirstRequest","wpGatsbyCompatibility","satisfies","wpGQL","wpGatsby","e","includes","reporter","panic","genericDownloadMessage","shouldDisplayWPGraphQLReason","reason","shouldDisplayWPGatsbyReason","shouldDisplayAtleastOneReason","shouldDisplayBothReasons","reasons","hostname","protocol","parse","blankGetRequest","then","response","json","errors","firstError","debugMessage","catch","isWpGatsby","errorMap","from","to","prettyPermalinksAreEnabled","arePrettyPermalinksEnabled","log","warn","generalSettings","ensurePluginRequirementsAreMet","traceId","activity","activityTimer","start","gatsbyApi","pluginOptions","debug","remoteSchema","schemaWasChanged","store","getState","isFirstBuild","key","MD5_CACHE_KEY","end","Promise","all"],"mappings":"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","sourcesContent":["import url from \"url\"\nimport Range from \"semver/classes/range\"\n\nimport type { NodePluginArgs } from \"gatsby\"\nimport fetch from \"node-fetch\"\n\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { getPersistentCache } from \"~/utils/cache\"\n\nimport store from \"~/store\"\nimport { MD5_CACHE_KEY } from \"~/constants\"\n\nimport {\n  supportedWpPluginVersions,\n  genericDownloadMessage,\n} from \"~/supported-remote-plugin-versions\"\n\nconst parseRange = (\n  range: string\n): {\n  message: string\n  minVersion: string\n  maxVersion: string\n  isARange: boolean\n} => {\n  const {\n    set: [versions],\n  } = new Range(range)\n\n  const isARange = versions.length >= 2\n  const minVersion = versions[0].semver.version\n  const maxVersion = versions[1]?.semver?.version\n\n  let message: string\n  if (isARange) {\n    message = `Install a version between ${minVersion} and ${maxVersion}.`\n  } else {\n    message = `Install version ${minVersion}.`\n  }\n\n  return {\n    message,\n    minVersion,\n    maxVersion,\n    isARange,\n  }\n}\n\nconst areRemotePluginVersionsSatisfied = async ({\n  helpers,\n  disableCompatibilityCheck,\n  url: wpGraphQLEndpoint,\n}: {\n  helpers: NodePluginArgs\n  url: string\n  disableCompatibilityCheck: boolean\n}): Promise<void> => {\n  if (disableCompatibilityCheck) {\n    return\n  }\n\n  let wpgqlIsSatisfied\n  let wpGatsbyIsSatisfied\n\n  try {\n    const { data } = await fetchGraphql({\n      query: /* GraphQL */ `\n        query WPGatsbyCompatibility(\n          $wpgqlVersion: String!\n          $wpgatsbyVersion: String!\n        ) {\n          wpGatsbyCompatibility(\n            wpGatsbyVersionRange: $wpgatsbyVersion\n            wpGQLVersionRange: $wpgqlVersion\n          ) {\n            satisfies {\n              wpGQL\n              wpGatsby\n            }\n          }\n        }\n      `,\n      variables: {\n        wpgqlVersion: supportedWpPluginVersions.WPGraphQL.version,\n        wpgatsbyVersion: supportedWpPluginVersions.WPGatsby.version,\n      },\n      panicOnError: false,\n      throwGqlErrors: true,\n      isFirstRequest: true,\n    })\n\n    wpgqlIsSatisfied = data.wpGatsbyCompatibility.satisfies.wpGQL\n    wpGatsbyIsSatisfied = data.wpGatsbyCompatibility.satisfies.wpGatsby\n  } catch (e) {\n    if (\n      e.message.includes(\n        `Cannot query field \"wpGatsbyCompatibility\" on type \"RootQuery\".`\n      )\n    ) {\n      helpers.reporter.panic(\n        formatLogMessage(\n          `Your version of WPGatsby is too old to determine if we're compatible.${genericDownloadMessage}`\n        )\n      )\n    } else {\n      helpers.reporter.panic(e.message)\n    }\n  }\n\n  const shouldDisplayWPGraphQLReason =\n    !wpgqlIsSatisfied && supportedWpPluginVersions.WPGraphQL.reason\n\n  const shouldDisplayWPGatsbyReason =\n    !wpGatsbyIsSatisfied && supportedWpPluginVersions.WPGatsby.reason\n\n  const shouldDisplayAtleastOneReason =\n    shouldDisplayWPGraphQLReason || shouldDisplayWPGatsbyReason\n\n  const shouldDisplayBothReasons =\n    shouldDisplayWPGraphQLReason && shouldDisplayWPGatsbyReason\n\n  // a message explaining why these are the minimum versions\n  const reasons = `${shouldDisplayAtleastOneReason ? `\\n\\nReasons:\\n\\n` : ``}${\n    shouldDisplayWPGraphQLReason\n      ? `- ${supportedWpPluginVersions.WPGraphQL.reason}`\n      : ``\n  }${shouldDisplayBothReasons ? `\\n\\n` : ``}${\n    shouldDisplayWPGatsbyReason\n      ? `- ${supportedWpPluginVersions.WPGatsby.reason}`\n      : ``\n  }`\n\n  let message = ``\n\n  if (!wpgqlIsSatisfied) {\n    const { minVersion, maxVersion } = parseRange(\n      supportedWpPluginVersions.WPGraphQL.version\n    )\n\n    message += `Your remote version of WPGraphQL is not within the accepted range\\n(${\n      supportedWpPluginVersions.WPGraphQL.version\n    }).\\n\\nThis is not a bug and it means one of two things:\\n you either need to upgrade WPGraphQL or gatsby-source-wordpress.\n\n1. If the version of WPGraphQL in your WordPress instance is higher than ${\n      maxVersion || minVersion\n    }\nit means you need to upgrade your version of gatsby-source-wordpress.\n\n2. If the version of WPGraphQL in your WordPress instance is lower than ${minVersion}\nit means you need to upgrade your version of WPGraphQL.\n\nYou can find a matching WPGraphQL version at https://github.com/wp-graphql/wp-graphql/releases`\n  }\n\n  if (!wpGatsbyIsSatisfied && !wpgqlIsSatisfied) {\n    message += `\\n\\n---------------\\n\\n`\n  }\n\n  if (!wpGatsbyIsSatisfied) {\n    const { minVersion, maxVersion } = parseRange(\n      supportedWpPluginVersions.WPGatsby.version\n    )\n\n    const { hostname, protocol } = url.parse(wpGraphQLEndpoint)\n\n    message += `Your remote version of WPGatsby is not within the accepted range\\n(${\n      supportedWpPluginVersions.WPGatsby.version\n    })\\n\\nThis is not a bug and it means one of two things:\\n you either need to upgrade WPGatsby or gatsby-source-wordpress.\n\n1. If the version of WPGatsby in your WordPress instance is higher than ${\n      maxVersion || minVersion\n    }\nit means you need to upgrade your version of gatsby-source-wordpress.\n\n2. If the version of WPGatsby in your WordPress instance is lower than ${minVersion}\nit means you need to upgrade your version of WPGatsby.\n\nDownload a matching version at https://github.com/gatsbyjs/wp-gatsby/releases\nor update via ${protocol}//${hostname}/wp-admin/plugins.php`\n  }\n\n  if (!wpGatsbyIsSatisfied || !wpgqlIsSatisfied) {\n    message += `\n${reasons}`\n  }\n\n  if (message) {\n    helpers.reporter.panic(formatLogMessage(message))\n  }\n}\n\n// This blank request is used to find debug messages\n// when a graphql request is made with no query\n// for example if 2 root fields are registered with the fieldname \"products\"\n// this will throw a helpful error message explaining that one should be removed\nconst blankGetRequest = async ({\n  url,\n  helpers,\n}: {\n  url: string\n  helpers: NodePluginArgs\n}): Promise<void> =>\n  fetch(url)\n    .then(response => response.json())\n    .then(json => {\n      if (json?.errors?.length) {\n        const firstError = json.errors[0]\n\n        if (\n          firstError.debugMessage ||\n          (firstError.message &&\n            !firstError.message?.includes(\n              `GraphQL Request must include at least one of those two parameters: \"query\" or \"queryId\"`\n            ))\n        ) {\n          helpers.reporter.panic(\n            formatLogMessage(`WPGraphQL returned a debug message on startup:\n\n${firstError.debugMessage || firstError.message}\n          `)\n          )\n        }\n      }\n    })\n    .catch(() => {\n      // this is ignored because a /graphql request will always return a 200 at this point\n      // we've already checked prior to this point that /graphql is up and returns a response.\n    })\n\nconst isWpGatsby = async (): Promise<void> => {\n  fetchGraphql({\n    query: /* GraphQL */ `\n      {\n        isWpGatsby\n      }\n    `,\n    errorMap: {\n      from: `Cannot query field \"isWpGatsby\" on type \"RootQuery\".`,\n      // @todo replace this link with another once we're out of alpha\n      to: `WPGatsby is not active in your WordPress installation.\\nTo download the latest version of WPGatsby visit https://wordpress.org/plugins/wp-gatsby/`,\n    },\n    panicOnError: true,\n    isFirstRequest: true,\n  })\n}\n\nconst prettyPermalinksAreEnabled = async ({\n  helpers,\n}: {\n  helpers: NodePluginArgs\n}): Promise<void> => {\n  try {\n    const { data } = await fetchGraphql({\n      query: /* GraphQL */ `\n        {\n          generalSettings {\n            url\n          }\n          wpGatsby {\n            arePrettyPermalinksEnabled\n          }\n        }\n      `,\n      throwGqlErrors: true,\n      isFirstRequest: true,\n    })\n\n    if (!data.wpGatsby.arePrettyPermalinksEnabled) {\n      helpers.reporter.log(``)\n      helpers.reporter.warn(\n        formatLogMessage(`\nPretty permalinks are not enabled in your WordPress instance.\nGatsby routing requires this setting to function properly.\nPlease enable pretty permalinks by changing your settings at\n${data.generalSettings.url}/wp-admin/options-permalink.php.\n`)\n      )\n    }\n  } catch (e) {\n    // the WPGatsby version is too old to query for wpGatsby.arePrettyPermalinksEnabled\n  }\n}\n\nconst ensurePluginRequirementsAreMet = async (\n  helpers: NodePluginArgs\n): Promise<void> => {\n  if (\n    helpers.traceId === `refresh-createSchemaCustomization` ||\n    // PQR doesn't have a trace id.\n    // By the time this runs in PQR we don't need it to run again.\n    !helpers.traceId\n  ) {\n    return\n  }\n\n  const activity = helpers.reporter.activityTimer(\n    formatLogMessage(`ensuring plugin requirements are met`)\n  )\n\n  activity.start()\n\n  const {\n    gatsbyApi: {\n      pluginOptions: {\n        url,\n        debug: { disableCompatibilityCheck },\n      },\n    },\n    remoteSchema: { schemaWasChanged },\n  } = store.getState()\n\n  // if we don't have a cached remote schema MD5, this is a cold build\n  const isFirstBuild = !(await getPersistentCache({ key: MD5_CACHE_KEY }))\n\n  if (\n    !schemaWasChanged &&\n    !isFirstBuild &&\n    helpers.traceId !== `schemaWasChanged`\n  ) {\n    activity.end()\n    return\n  }\n\n  await blankGetRequest({ url, helpers })\n  await isWpGatsby()\n\n  await Promise.all([\n    prettyPermalinksAreEnabled({ helpers }),\n    areRemotePluginVersionsSatisfied({\n      helpers,\n      url,\n      disableCompatibilityCheck,\n    }),\n  ])\n\n  activity.end()\n}\n\nexport { ensurePluginRequirementsAreMet }\n"],"file":"check-plugin-requirements.js"}