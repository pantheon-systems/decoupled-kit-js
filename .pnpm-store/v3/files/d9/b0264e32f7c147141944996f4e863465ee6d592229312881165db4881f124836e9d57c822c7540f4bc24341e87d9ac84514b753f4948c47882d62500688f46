var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { mapObjectValues, identity } from './utils';
var flattenResource = function (_a) {
    var attributes = _a.attributes, relationships = _a.relationships, links = _a.links, restResource = __rest(_a, ["attributes", "relationships", "links"]);
    if (!relationships) {
        return __assign(__assign({}, restResource), attributes);
    }
    var flattenedRelationships = mapObjectValues(relationships, function (related) {
        return related && related.data && applyToData(flattenResource)(related).data;
    });
    return __assign(__assign(__assign({}, restResource), attributes), flattenedRelationships);
};
var findResource = function (_a, resources) {
    var id = _a.id, type = _a.type;
    return resources.find(function (_a) {
        var resourceId = _a.id, resourceType = _a.type;
        return id === resourceId && type === resourceType;
    });
};
var _denormalizeRelationships = function (data, allResources) {
    if (!data || !data.relationships || data.__relationships_denormalizing) {
        return data;
    }
    data.__relationships_denormalizing = true;
    var relationships = mapObjectValues(data.relationships, function (related) {
        return related &&
            related.data &&
            applyToData(function (item) {
                return _denormalizeRelationships(findResource(item, allResources) || item, allResources);
            })(related);
    });
    return __assign(__assign({}, data), { relationships: relationships });
};
var denormalizeRelationships = function (data, _a) {
    var _b = _a.included, included = _b === void 0 ? [] : _b;
    return _denormalizeRelationships(data, __spreadArrays([data], included));
};
var applyToData = function (fn) { return function (_a) {
    var data = _a.data, rest = __rest(_a, ["data"]);
    if (Array.isArray(data)) {
        return __assign({ data: data.map(function (obj) { return fn(obj, rest); }) }, rest);
    }
    return __assign({ data: fn(data, rest) }, rest);
}; };
var applyToIncluded = function (fn) { return function (_a) {
    var included = _a.included, rest = __rest(_a, ["included"]);
    if (!included) {
        return rest;
    }
    return __assign({ included: included.map(function (obj) { return fn(obj, rest); }) }, rest);
}; };
var applyToJsonapiFullResponse = function (fn) { return function (_a) {
    var __jsonapi_full_response = _a.__jsonapi_full_response, rest = __rest(_a, ["__jsonapi_full_response"]);
    return __jsonapi_full_response
        ? __assign({ __jsonapi_full_response: fn(__jsonapi_full_response) }, rest) : rest;
}; };
var applyNormalizer = function (normalizer) { return function (resource) { return (__assign({ __typename: normalizer(resource.type) }, resource)); }; };
var typeFor = function (data) {
    return Array.isArray(data) ? data[0] && data[0].type : data.type;
};
var typenameNamespacer = function (prefix, normalizer) {
    var resourceTypenameNamespacer = function (_a) {
        var attributes = _a.attributes, relationships = _a.relationships, meta = _a.meta, links = _a.links, resource = __rest(_a, ["attributes", "relationships", "meta", "links"]);
        var __typename = normalizer("" + prefix + resource.type);
        return __assign(__assign({}, resource), { __typename: __typename, attributes: attributes && __assign(__assign({}, attributes), { __typename: normalizer(__typename + "_attributes") }), relationships: relationships && __assign(__assign({}, mapObjectValues(relationships, function (related) {
                return related &&
                    related.data &&
                    applyToData(resourceTypenameNamespacer)(related);
            })), { __typename: normalizer(__typename + "_relationships") }), meta: meta && __assign(__assign({}, meta), { __typename: normalizer(__typename + "_meta") }), links: links && __assign(__assign({}, links), { __typename: normalizer(__typename + "_links") }) });
    };
    var bodyTypenameNamespacer = function (body) {
        var type = typeFor(body.data) || 'unknown';
        return {
            data: body.data &&
                (Array.isArray(body.data)
                    ? body.data.map(resourceTypenameNamespacer)
                    : resourceTypenameNamespacer(body.data)),
            meta: body.meta && __assign(__assign({}, body.meta), { __typename: normalizer("" + prefix + type + "_body_meta") }),
            links: body.links && __assign(__assign({}, body.links), { __typename: normalizer("" + prefix + type + "_body_links") }),
            included: body.included
                ? body.included.map(resourceTypenameNamespacer)
                : body.included,
            __typename: normalizer("" + prefix + type + "_body"),
        };
    };
    return bodyTypenameNamespacer;
};
var preserveBody = function (normalizer) { return function (body) { return __awaiter(void 0, void 0, void 0, function () {
    var __jsonapi_full_response;
    return __generator(this, function (_a) {
        __jsonapi_full_response = typenameNamespacer('jsonapi_full_response_', normalizer)(body);
        return [2 /*return*/, __assign(__assign({}, body), { __typename: normalizer(__jsonapi_full_response.__typename + "_wrapper"), __jsonapi_full_response: __jsonapi_full_response })];
    });
}); }; };
var jsonapiResponseTransformer = function (response, typeNameNormalizer, includeJsonapi) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, response
                .json()
                .then(applyToIncluded(applyNormalizer(typeNameNormalizer)))
                .then(applyToData(applyNormalizer(typeNameNormalizer)))
                .then(includeJsonapi ? preserveBody(typeNameNormalizer) : identity)
                .then(applyToData(denormalizeRelationships))
                .then(applyToData(flattenResource))
                .then(applyToJsonapiFullResponse(applyToIncluded(denormalizeRelationships)))
                .then(applyToJsonapiFullResponse(applyToData(denormalizeRelationships)))
                .then(function (_a) {
                var data = _a.data, __jsonapi_full_response = _a.__jsonapi_full_response, __typename = _a.__typename;
                return includeJsonapi
                    ? { graphql: data, jsonapi: __jsonapi_full_response, __typename: __typename }
                    : data;
            })];
    });
}); };
export default jsonapiResponseTransformer;
//# sourceMappingURL=jsonApiTransformer.js.map