{"version":3,"sources":["../../src/bootstrap/create-graphql-runner.ts"],"names":["createGraphQLRunner","store","reporter","parentSpan","graphqlTracing","undefined","runner","GraphQLRunner","eventTypes","forEach","type","emitter","on","query","context","queryName","then","result","errors","structuredErrors","map","e","file","stackTrace","parse","find","test","getFunctionName","structuredError","message","location","start","line","getLineNumber","column","getColumnNumber","filePath","getFileName","error","fromGraphQLFunction","filter","Boolean","length","panicOnBuild"],"mappings":";;;;;;;AAAA;;AAKA;;AACA;;AACA;;AAUO,MAAMA,mBAAmB,GAAG,CACjCC,KADiC,EAEjCC,QAFiC,EAGjC;AACEC,EAAAA,UADF;AAEEC,EAAAA;AAFF,IAGgE;AAC9DD,EAAAA,UAAU,EAAEE,SADkD;AAE9DD,EAAAA,cAAc,EAAE;AAF8C,CAN/B,KAUtB;AACX;AACA,MAAIE,MAAiC,GAAG,IAAIC,4BAAJ,CAAkBN,KAAlB,EAAyB;AAC/DG,IAAAA;AAD+D,GAAzB,CAAxC;AAIA,QAAMI,UAAyB,GAAG,CAC/B,cAD+B,EAE/B,aAF+B,EAG/B,aAH+B,EAI/B,qBAJ+B,EAK/B,YAL+B,EAM/B,mBAN+B,EAO/B,+BAP+B,CAAlC;AAUAA,EAAAA,UAAU,CAACC,OAAX,CAAmBC,IAAI,IAAI;AACzBC,mBAAQC,EAAR,CAAWF,IAAX,EAAiB,MAAM;AACrBJ,MAAAA,MAAM,GAAGD,SAAT;AACD,KAFD;AAGD,GAJD;AAMA,SAAO,CAACQ,KAAD,EAAQC,OAAR,KAAwC;AAC7C,QAAI,CAACR,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAG,IAAIC,4BAAJ,CAAkBN,KAAlB,EAAyB;AAChCG,QAAAA;AADgC,OAAzB,CAAT;AAGD;;AACD,WAAOE,MAAM,CACVO,KADI,CACEA,KADF,EACSC,OADT,EACkB;AACrBC,MAAAA,SAAS,EAAG,mBADS;AAErBZ,MAAAA;AAFqB,KADlB,EAKJa,IALI,CAKCC,MAAM,IAAI;AACd,UAAIA,MAAM,CAACC,MAAX,EAAmB;AACjB,cAAMC,gBAAgB,GAAGF,MAAM,CAACC,MAAP,CACtBE,GADsB,CAClBC,CAAC,IAAI;AACR;AACA,gBAAMC,IAAI,GAAGC,oBACVC,KADU,CACJH,CADI,EAEVI,IAFU,CAELH,IAAI,IAAI,cAAcI,IAAd,CAAmBJ,IAAI,CAACK,eAAL,EAAnB,CAFH,CAAb;;AAIA,cAAIL,IAAJ,EAAU;AACR,kBAAMM,eAAe,GAAG,0BAAY;AAClCC,cAAAA,OAAO,EAAER,CAAC,CAACQ,OADuB;AAElCC,cAAAA,QAAQ,EAAE;AACRC,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,IAAI,EAAEV,IAAI,CAACW,aAAL,EADD;AAELC,kBAAAA,MAAM,EAAEZ,IAAI,CAACa,eAAL;AAFH;AADC,eAFwB;AAQlCC,cAAAA,QAAQ,EAAEd,IAAI,CAACe,WAAL,EARwB;AASlCC,cAAAA,KAAK,EAAEjB;AAT2B,aAAZ,CAAxB;AAWAO,YAAAA,eAAe,CAACd,OAAhB,GAA0B,EACxB,GAAGc,eAAe,CAACd,OADK;AAExByB,cAAAA,mBAAmB,EAAE;AAFG,aAA1B;AAIA,mBAAOX,eAAP;AACD;;AAED,iBAAO,IAAP;AACD,SA3BsB,EA4BtBY,MA5BsB,CA4BfC,OA5Be,CAAzB;;AA8BA,YAAItB,gBAAgB,CAACuB,MAArB,EAA6B;AAC3B;AACAxC,UAAAA,QAAQ,CAACyC,YAAT,CAAsBxB,gBAAtB;AACD;AACF;;AAED,aAAOF,MAAP;AACD,KA5CI,CAAP;AA6CD,GAnDD;AAoDD,CApFM","sourcesContent":["import stackTrace from \"stack-trace\"\nimport { Span } from \"opentracing\"\nimport { ExecutionResult, Source } from \"graphql\"\nimport { Store } from \"redux\"\n\nimport { GraphQLRunner } from \"../query/graphql-runner\"\nimport errorParser from \"../query/error-parser\"\nimport { emitter } from \"../redux\"\nimport { Reporter } from \"../..\"\nimport { IGatsbyState } from \"../redux/types\"\nimport { IMatch } from \"../types\"\n\nexport type Runner = (\n  query: string | Source,\n  context: Record<string, any>\n) => Promise<ExecutionResult>\n\nexport const createGraphQLRunner = (\n  store: Store<IGatsbyState>,\n  reporter: Reporter,\n  {\n    parentSpan,\n    graphqlTracing,\n  }: { parentSpan: Span | undefined; graphqlTracing?: boolean } = {\n    parentSpan: undefined,\n    graphqlTracing: false,\n  }\n): Runner => {\n  // TODO: Move tracking of changed state inside GraphQLRunner itself. https://github.com/gatsbyjs/gatsby/issues/20941\n  let runner: GraphQLRunner | undefined = new GraphQLRunner(store, {\n    graphqlTracing,\n  })\n\n  const eventTypes: Array<string> = [\n    `DELETE_CACHE`,\n    `CREATE_NODE`,\n    `DELETE_NODE`,\n    `SET_SCHEMA_COMPOSER`,\n    `SET_SCHEMA`,\n    `ADD_FIELD_TO_NODE`,\n    `ADD_CHILD_NODE_TO_PARENT_NODE`,\n  ]\n\n  eventTypes.forEach(type => {\n    emitter.on(type, () => {\n      runner = undefined\n    })\n  })\n\n  return (query, context): ReturnType<Runner> => {\n    if (!runner) {\n      runner = new GraphQLRunner(store, {\n        graphqlTracing,\n      })\n    }\n    return runner\n      .query(query, context, {\n        queryName: `gatsby-node query`,\n        parentSpan,\n      })\n      .then(result => {\n        if (result.errors) {\n          const structuredErrors = result.errors\n            .map(e => {\n              // Find the file where graphql was called.\n              const file = stackTrace\n                .parse(e)\n                .find(file => /createPages/.test(file.getFunctionName()))\n\n              if (file) {\n                const structuredError = errorParser({\n                  message: e.message,\n                  location: {\n                    start: {\n                      line: file.getLineNumber(),\n                      column: file.getColumnNumber(),\n                    },\n                  },\n                  filePath: file.getFileName(),\n                  error: e,\n                })\n                structuredError.context = {\n                  ...structuredError.context,\n                  fromGraphQLFunction: true,\n                }\n                return structuredError\n              }\n\n              return null\n            })\n            .filter(Boolean as unknown as (match) => match is IMatch)\n\n          if (structuredErrors.length) {\n            // panic on build exits the process\n            reporter.panicOnBuild(structuredErrors)\n          }\n        }\n\n        return result\n      })\n  }\n}\n"],"file":"create-graphql-runner.js"}