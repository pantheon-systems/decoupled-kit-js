{
  "version": 3,
  "sources": ["../../src/client.ts", "../../src/file-resolver-protocol.ts", "../../src/iframe-protocol.ts", "../../src/utils.ts", "../../src/types.ts"],
  "sourcesContent": ["import { getTemplate } from \"codesandbox-import-utils/lib/create-sandbox/templates\";\nimport isEqual from \"lodash.isequal\";\n\nimport Protocol from \"./file-resolver-protocol\";\nimport { IFrameProtocol } from \"./iframe-protocol\";\nimport type {\n  Dependencies,\n  SandpackBundlerFiles,\n  BundlerState,\n  Modules,\n  ClientStatus,\n  UnsubscribeFunction,\n  SandpackMessage,\n  ListenerFunction,\n  SandpackError,\n  ReactDevToolsMode,\n} from \"./types\";\nimport {\n  createPackageJSON,\n  addPackageJSONIfNeeded,\n  extractErrorDetails,\n} from \"./utils\";\n\nimport type { SandpackLogLevel } from \".\";\n\nexport interface ClientOptions {\n  /**\n   * Paths to external resources\n   */\n  externalResources?: string[];\n  /**\n   * Location of the bundler.\n   */\n  bundlerURL?: string;\n  /**\n   * Level of logging to do in the bundler\n   */\n  logLevel?: SandpackLogLevel;\n  /**\n   * Relative path that the iframe loads (eg: /about)\n   */\n  startRoute?: string;\n  /**\n   * Width of iframe.\n   */\n  width?: string;\n  /**\n   * Height of iframe.\n   */\n  height?: string;\n  /**\n   * If we should skip the third step: evaluation.\n   */\n  skipEval?: boolean;\n\n  /**\n   * Boolean flags to trigger certain UI elements in the bundler\n   */\n  showOpenInCodeSandbox?: boolean;\n  showErrorScreen?: boolean;\n  showLoadingScreen?: boolean;\n\n  /**\n   * The bundler will clear the console if you set this to true, everytime the iframe refreshes / starts the first compile\n   */\n  clearConsoleOnFirstCompile?: boolean;\n\n  /**\n   * You can pass a custom file resolver that is responsible for resolving files.\n   * We will use this to get all files from the file system.\n   */\n  fileResolver?: {\n    isFile: (path: string) => Promise<boolean>;\n    readFile: (path: string) => Promise<string>;\n  };\n\n  reactDevTools?: ReactDevToolsMode;\n}\n\nexport interface SandboxInfo {\n  files: SandpackBundlerFiles;\n  dependencies?: Dependencies;\n  devDependencies?: Dependencies;\n  entry?: string;\n  /**\n   * What template we use, if not defined we infer the template from the dependencies or files.\n   *\n   * @type {string}\n   */\n  template?: string;\n\n  /**\n   * Only use unpkg for fetching the dependencies, no preprocessing. It's slower, but doesn't talk\n   * to AWS.\n   */\n  disableDependencyPreprocessing?: boolean;\n}\n\nconst BUNDLER_URL =\n  process.env.CODESANDBOX_ENV === \"development\"\n    ? \"http://localhost:3000/\"\n    : `https://${process.env.PACKAGE_VERSION?.replace(\n        /\\./g,\n        \"-\"\n      )}-sandpack.codesandbox.io/`;\n\nexport class SandpackClient {\n  selector: string | undefined;\n  element: Element;\n  iframe: HTMLIFrameElement;\n  iframeProtocol: IFrameProtocol;\n  options: ClientOptions;\n\n  fileResolverProtocol?: Protocol;\n  bundlerURL: string;\n  bundlerState?: BundlerState;\n  errors: SandpackError[];\n  status: ClientStatus;\n\n  sandboxInfo: SandboxInfo;\n\n  unsubscribeGlobalListener: UnsubscribeFunction;\n  unsubscribeChannelListener: UnsubscribeFunction;\n\n  constructor(\n    selector: string | HTMLIFrameElement,\n    sandboxInfo: SandboxInfo,\n    options: ClientOptions = {}\n  ) {\n    this.options = options;\n    this.sandboxInfo = sandboxInfo;\n    this.bundlerURL = options.bundlerURL || BUNDLER_URL;\n\n    this.bundlerState = undefined;\n    this.errors = [];\n    this.status = \"initializing\";\n\n    if (typeof selector === \"string\") {\n      this.selector = selector;\n      const element = document.querySelector(selector);\n\n      if (!element) {\n        throw new Error(`No element found for selector '${selector}'`);\n      }\n\n      this.element = element;\n      this.iframe = document.createElement(\"iframe\");\n      this.initializeElement();\n    } else {\n      this.element = selector;\n      this.iframe = selector;\n    }\n    if (!this.iframe.getAttribute(\"sandbox\")) {\n      this.iframe.setAttribute(\n        \"sandbox\",\n        \"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n      );\n    }\n\n    const urlSource = options.startRoute\n      ? new URL(options.startRoute, this.bundlerURL).toString()\n      : this.bundlerURL;\n\n    this.iframe.contentWindow?.location.replace(urlSource);\n\n    this.iframeProtocol = new IFrameProtocol(this.iframe, this.bundlerURL);\n\n    this.unsubscribeGlobalListener = this.iframeProtocol.globalListen(\n      (mes: SandpackMessage) => {\n        if (mes.type !== \"initialized\" || !this.iframe.contentWindow) {\n          return;\n        }\n\n        this.iframeProtocol.register();\n\n        if (this.options.fileResolver) {\n          // TODO: Find a common place for the Protocol to be implemented for both sandpack-core and sandpack-client\n          this.fileResolverProtocol = new Protocol(\n            \"file-resolver\",\n            async (data: { m: \"isFile\" | \"readFile\"; p: string }) => {\n              if (data.m === \"isFile\") {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                return this.options.fileResolver!.isFile(data.p);\n              }\n\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              return this.options.fileResolver!.readFile(data.p);\n            },\n            this.iframe.contentWindow\n          );\n        }\n\n        this.updatePreview(this.sandboxInfo, true);\n      }\n    );\n\n    this.unsubscribeChannelListener = this.iframeProtocol.channelListen(\n      (mes: SandpackMessage) => {\n        switch (mes.type) {\n          case \"start\": {\n            this.errors = [];\n            break;\n          }\n          case \"status\": {\n            this.status = mes.status;\n            break;\n          }\n          case \"action\": {\n            if (mes.action === \"show-error\") {\n              this.errors = [...this.errors, extractErrorDetails(mes)];\n            }\n            break;\n          }\n          case \"state\": {\n            this.bundlerState = mes.state;\n            break;\n          }\n        }\n      }\n    );\n  }\n\n  cleanup(): void {\n    this.unsubscribeChannelListener();\n    this.unsubscribeGlobalListener();\n    this.iframeProtocol.cleanup();\n  }\n\n  updateOptions(options: ClientOptions): void {\n    if (!isEqual(this.options, options)) {\n      this.options = options;\n      this.updatePreview();\n    }\n  }\n\n  updatePreview(\n    sandboxInfo = this.sandboxInfo,\n    isInitializationCompile?: boolean\n  ): void {\n    this.sandboxInfo = sandboxInfo;\n\n    const files = this.getFiles();\n\n    const modules: Modules = Object.keys(files).reduce(\n      (prev, next) => ({\n        ...prev,\n        [next]: {\n          code: files[next].code,\n          path: next,\n        },\n      }),\n      {}\n    );\n\n    let packageJSON = JSON.parse(\n      createPackageJSON(\n        this.sandboxInfo.dependencies,\n        this.sandboxInfo.devDependencies,\n        this.sandboxInfo.entry\n      )\n    );\n    try {\n      packageJSON = JSON.parse(files[\"/package.json\"].code);\n    } catch (e) {\n      console.error(\n        \"Could not parse package.json file: \" + (e as Error).message\n      );\n    }\n\n    // TODO move this to a common format\n    const normalizedModules = Object.keys(files).reduce(\n      (prev, next) => ({\n        ...prev,\n        [next]: {\n          content: files[next].code,\n          path: next,\n        },\n      }),\n      {}\n    );\n\n    this.dispatch({\n      type: \"compile\",\n      codesandbox: true,\n      version: 3,\n      isInitializationCompile,\n      modules,\n      reactDevTools: this.options.reactDevTools,\n      externalResources: this.options.externalResources || [],\n      hasFileResolver: Boolean(this.options.fileResolver),\n      disableDependencyPreprocessing:\n        this.sandboxInfo.disableDependencyPreprocessing,\n      template:\n        this.sandboxInfo.template ||\n        getTemplate(packageJSON, normalizedModules),\n      showOpenInCodeSandbox: this.options.showOpenInCodeSandbox ?? true,\n      showErrorScreen: this.options.showErrorScreen ?? true,\n      showLoadingScreen: this.options.showLoadingScreen ?? true,\n      skipEval: this.options.skipEval || false,\n      clearConsoleDisabled: !this.options.clearConsoleOnFirstCompile,\n      logLevel: this.options.logLevel,\n    });\n  }\n\n  public dispatch(message: SandpackMessage): void {\n    this.iframeProtocol.dispatch(message);\n  }\n\n  public listen(listener: ListenerFunction): UnsubscribeFunction {\n    return this.iframeProtocol.channelListen(listener);\n  }\n\n  /**\n   * Get the URL of the contents of the current sandbox\n   */\n  public getCodeSandboxURL(): Promise<{\n    sandboxId: string;\n    editorUrl: string;\n    embedUrl: string;\n  }> {\n    const files = this.getFiles();\n\n    const paramFiles = Object.keys(files).reduce(\n      (prev, next) => ({\n        ...prev,\n        [next.replace(\"/\", \"\")]: {\n          content: files[next].code,\n          isBinary: false,\n        },\n      }),\n      {}\n    );\n\n    return fetch(\"https://codesandbox.io/api/v1/sandboxes/define?json=1\", {\n      method: \"POST\",\n      body: JSON.stringify({ files: paramFiles }),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((x) => x.json())\n      .then((res: { sandbox_id: string }) => ({\n        sandboxId: res.sandbox_id,\n        editorUrl: `https://codesandbox.io/s/${res.sandbox_id}`,\n        embedUrl: `https://codesandbox.io/embed/${res.sandbox_id}`,\n      }));\n  }\n\n  public getTranspilerContext = (): Promise<\n    Record<string, Record<string, unknown>>\n  > =>\n    new Promise((resolve) => {\n      const unsubscribe = this.listen((message) => {\n        if (message.type === \"transpiler-context\") {\n          resolve(message.data);\n\n          unsubscribe();\n        }\n      });\n\n      this.dispatch({ type: \"get-transpiler-context\" });\n    });\n\n  private getFiles(): SandpackBundlerFiles {\n    const { sandboxInfo } = this;\n\n    if (sandboxInfo.files[\"/package.json\"] === undefined) {\n      return addPackageJSONIfNeeded(\n        sandboxInfo.files,\n        sandboxInfo.dependencies,\n        sandboxInfo.devDependencies,\n        sandboxInfo.entry\n      );\n    }\n\n    return this.sandboxInfo.files;\n  }\n\n  private initializeElement(): void {\n    this.iframe.style.border = \"0\";\n    this.iframe.style.width = this.options.width || \"100%\";\n    this.iframe.style.height = this.options.height || \"100%\";\n    this.iframe.style.overflow = \"hidden\";\n\n    if (!this.element.parentNode) {\n      // This should never happen\n      throw new Error(\"Given element does not have a parent.\");\n    }\n\n    this.element.parentNode.replaceChild(this.iframe, this.element);\n  }\n}\n", "/**\n * This file is a copy of the resolver from the `codesandbox-api` package.\n * We wanted to avoid to reference codesandbox-api because of the code that runs on load in the package.\n * The plan is to take some time and refactor codesandbox-api into what it was supposed to be in the first place,\n * an abstraction over the actions that can be dispatched between the bundler and the iframe.\n */\n\nconst generateId = () =>\n  // Such a random ID\n  Math.floor(Math.random() * 1000000 + Math.random() * 1000000);\n\nconst getConstructorName = (x: any) => {\n  try {\n    return x.constructor.name;\n  } catch (e) {\n    return \"\";\n  }\n};\n\nexport default class Protocol {\n  private outgoingMessages: Set<number> = new Set();\n  private internalId: number;\n  private isWorker: boolean;\n\n  constructor(\n    private type: string,\n    private handleMessage: (message: any) => any,\n    private target: Worker | Window\n  ) {\n    this.createConnection();\n    this.internalId = generateId();\n    this.isWorker = getConstructorName(target) === \"Worker\";\n  }\n\n  getTypeId() {\n    return `p-${this.type}`;\n  }\n\n  createConnection() {\n    self.addEventListener(\"message\", this._messageListener);\n  }\n\n  public dispose() {\n    self.removeEventListener(\"message\", this._messageListener);\n  }\n\n  sendMessage<PromiseType>(data: any): Promise<PromiseType> {\n    return new Promise((resolve) => {\n      const messageId = generateId();\n\n      const message = {\n        $originId: this.internalId,\n        $type: this.getTypeId(),\n        $data: data,\n        $id: messageId,\n      };\n\n      this.outgoingMessages.add(messageId);\n\n      const listenFunction = (e: MessageEvent) => {\n        const { data } = e;\n\n        if (\n          data.$type === this.getTypeId() &&\n          data.$id === messageId &&\n          data.$originId !== this.internalId\n        ) {\n          resolve(data.$data);\n\n          self.removeEventListener(\"message\", listenFunction);\n        }\n      };\n\n      self.addEventListener(\"message\", listenFunction);\n\n      this._postMessage(message);\n    });\n  }\n\n  private _messageListener = async (e: MessageEvent) => {\n    const { data } = e;\n\n    if (data.$type !== this.getTypeId()) {\n      return;\n    }\n\n    // We are getting a response to the message\n    if (this.outgoingMessages.has(data.$id)) {\n      return;\n    }\n\n    const result = await this.handleMessage(data.$data);\n\n    const returnMessage = {\n      $originId: this.internalId,\n      $type: this.getTypeId(),\n      $data: result,\n      $id: data.$id,\n    };\n\n    if (e.source) {\n      // @ts-ignore\n      e.source.postMessage(returnMessage, \"*\");\n    } else {\n      this._postMessage(returnMessage);\n    }\n  };\n\n  private _postMessage(m: any) {\n    if (\n      this.isWorker ||\n      // @ts-ignore Unknown to TS\n      (typeof DedicatedWorkerGlobalScope !== \"undefined\" &&\n        // @ts-ignore Unknown to TS\n        this.target instanceof DedicatedWorkerGlobalScope)\n    ) {\n      // @ts-ignore\n      this.target.postMessage(m);\n    } else {\n      (this.target as Window).postMessage(m, \"*\");\n    }\n  }\n}\n", "import type {\n  ListenerFunction,\n  SandpackMessage,\n  UnsubscribeFunction,\n} from \"./types\";\n\nexport class IFrameProtocol {\n  private frameWindow: Window | null;\n  private origin: string;\n\n  // React to messages from any iframe\n  private globalListeners: Record<number, ListenerFunction> = {};\n  private globalListenersCount = 0;\n\n  // React to messages from the iframe owned by this instance\n  private channelListeners: Record<number, ListenerFunction> = {};\n  private channelListenersCount = 0;\n\n  // Random number to identify this instance of the client when messages are coming from multiple iframes\n  readonly channelId: number = Math.floor(Math.random() * 1000000);\n\n  constructor(iframe: HTMLIFrameElement, origin: string) {\n    this.frameWindow = iframe.contentWindow;\n    this.origin = origin;\n    this.globalListeners = [];\n    this.channelListeners = [];\n\n    this.eventListener = this.eventListener.bind(this);\n\n    if (typeof window !== \"undefined\") {\n      window.addEventListener(\"message\", this.eventListener);\n    }\n  }\n\n  cleanup(): void {\n    window.removeEventListener(\"message\", this.eventListener);\n    this.globalListeners = {};\n    this.channelListeners = {};\n    this.globalListenersCount = 0;\n    this.channelListenersCount = 0;\n  }\n\n  // Sends the channelId and triggers an iframeHandshake promise to resolve,\n  // so the iframe can start listening for messages (based on the id)\n  register(): void {\n    if (!this.frameWindow) {\n      return;\n    }\n\n    this.frameWindow.postMessage(\n      {\n        type: \"register-frame\",\n        origin: document.location.origin,\n        id: this.channelId, // TODO: Rename in codesandbox-api to channelId\n      },\n      this.origin\n    );\n  }\n\n  // Messages are dispatched from the client directly to the instance iframe\n  dispatch(message: SandpackMessage): void {\n    if (!this.frameWindow) {\n      return;\n    }\n\n    this.frameWindow.postMessage(\n      {\n        $id: this.channelId,\n        codesandbox: true,\n        ...message,\n      },\n      this.origin\n    );\n  }\n\n  // Add a listener that is called on any message coming from an iframe in the page\n  // This is needed for the `initialize` message which comes without a channelId\n  globalListen(listener: ListenerFunction): UnsubscribeFunction {\n    if (typeof listener !== \"function\") {\n      return (): void => {\n        return;\n      };\n    }\n\n    const listenerId = this.globalListenersCount;\n    this.globalListeners[listenerId] = listener;\n    this.globalListenersCount++;\n    return (): void => {\n      delete this.globalListeners[listenerId];\n    };\n  }\n\n  // Add a listener that is called on any message coming from an iframe with the instance channelId\n  // All other messages (eg: from other iframes) are ignored\n  channelListen(listener: ListenerFunction): UnsubscribeFunction {\n    if (typeof listener !== \"function\") {\n      return (): void => {\n        return;\n      };\n    }\n\n    const listenerId = this.channelListenersCount;\n    this.channelListeners[listenerId] = listener;\n    this.channelListenersCount++;\n    return (): void => {\n      delete this.channelListeners[listenerId];\n    };\n  }\n\n  // Handles message windows coming from iframes\n  private eventListener(evt: MessageEvent): void {\n    // skip events originating from different iframes\n    if (evt.source !== this.frameWindow) {\n      return;\n    }\n\n    const message = evt.data;\n    if (!message.codesandbox) {\n      return;\n    }\n\n    Object.values(this.globalListeners).forEach((listener) =>\n      listener(message)\n    );\n\n    if (message.$id !== this.channelId) {\n      return;\n    }\n\n    Object.values(this.channelListeners).forEach((listener) =>\n      listener(message)\n    );\n  }\n}\n", "import type {\n  SandpackBundlerFiles,\n  Dependencies,\n  SandpackErrorMessage,\n  SandpackError,\n  ErrorStackFrame,\n} from \"./types\";\n\nexport function createPackageJSON(\n  dependencies: Dependencies = {},\n  devDependencies: Dependencies = {},\n  entry = \"/index.js\"\n): string {\n  return JSON.stringify(\n    {\n      name: \"sandpack-project\",\n      main: entry,\n      dependencies,\n      devDependencies,\n    },\n    null,\n    2\n  );\n}\n\nexport function addPackageJSONIfNeeded(\n  files: SandpackBundlerFiles,\n  dependencies?: Dependencies,\n  devDependencies?: Dependencies,\n  entry?: string\n): SandpackBundlerFiles {\n  const newFiles = { ...files };\n\n  if (!newFiles[\"/package.json\"]) {\n    if (!dependencies) {\n      throw new Error(\n        \"No dependencies specified, please specify either a package.json or dependencies.\"\n      );\n    }\n\n    if (!entry) {\n      throw new Error(\n        \"Missing 'entry' parameter. Either specify an entry point, or pass in a package.json with the 'main' field set.\"\n      );\n    }\n\n    newFiles[\"/package.json\"] = {\n      code: createPackageJSON(dependencies, devDependencies, entry),\n    };\n  }\n\n  return newFiles;\n}\n\nexport function extractErrorDetails(msg: SandpackErrorMessage): SandpackError {\n  if (msg.title === \"SyntaxError\") {\n    const { title, path, message, line, column } = msg;\n    return { title, path, message, line, column };\n  }\n\n  const relevantStackFrame = getRelevantStackFrame(msg.payload.frames);\n  if (!relevantStackFrame) {\n    return { message: msg.message };\n  }\n\n  const errorInCode = getErrorInOriginalCode(relevantStackFrame);\n  const errorLocation = getErrorLocation(relevantStackFrame);\n  const errorMessage = formatErrorMessage(\n    relevantStackFrame._originalFileName,\n    msg.message,\n    errorLocation,\n    errorInCode\n  );\n\n  return {\n    message: errorMessage,\n    title: msg.title,\n    path: relevantStackFrame._originalFileName,\n    line: relevantStackFrame._originalLineNumber,\n    column: relevantStackFrame._originalColumnNumber,\n  };\n}\n\nfunction getRelevantStackFrame(\n  frames?: ErrorStackFrame[]\n): ErrorStackFrame | undefined {\n  if (!frames) {\n    return;\n  }\n\n  return frames.find((frame) => !!frame._originalFileName);\n}\n\nfunction getErrorLocation(errorFrame: ErrorStackFrame): string {\n  return errorFrame\n    ? ` (${errorFrame._originalLineNumber}:${errorFrame._originalColumnNumber})`\n    : ``;\n}\n\nfunction getErrorInOriginalCode(errorFrame: ErrorStackFrame): string {\n  const lastScriptLine =\n    errorFrame._originalScriptCode[errorFrame._originalScriptCode.length - 1];\n  const numberOfLineNumberCharacters =\n    lastScriptLine.lineNumber.toString().length;\n\n  const leadingCharacterOffset = 2;\n  const barSeparatorCharacterOffset = 3;\n  const extraLineLeadingSpaces =\n    leadingCharacterOffset +\n    numberOfLineNumberCharacters +\n    barSeparatorCharacterOffset +\n    errorFrame._originalColumnNumber;\n\n  return errorFrame._originalScriptCode.reduce((result, scriptLine) => {\n    const leadingChar = scriptLine.highlight ? \">\" : \" \";\n    const lineNumber =\n      scriptLine.lineNumber.toString().length === numberOfLineNumberCharacters\n        ? `${scriptLine.lineNumber}`\n        : ` ${scriptLine.lineNumber}`;\n\n    const extraLine = scriptLine.highlight\n      ? \"\\n\" + \" \".repeat(extraLineLeadingSpaces) + \"^\"\n      : \"\";\n\n    return (\n      result + // accumulator\n      \"\\n\" +\n      leadingChar + // > or \" \"\n      \" \" +\n      lineNumber + // line number on equal number of characters\n      \" | \" +\n      scriptLine.content + // code\n      extraLine // line under the highlighed line to show the column index\n    );\n  }, \"\");\n}\n\nfunction formatErrorMessage(\n  filePath: string,\n  message: string,\n  location: string,\n  errorInCode: string\n): string {\n  return `${filePath}: ${message}${location}\n${errorInCode}`;\n}\n", "import type { ITemplate } from \"codesandbox-import-util-types\";\n\nexport interface SandpackBundlerFile {\n  code: string;\n  readOnly?: boolean;\n}\n\nexport type SandpackBundlerFiles = Record<string, SandpackBundlerFile>;\n\nexport interface Module {\n  code: string;\n  path: string;\n}\n\nexport type Modules = Record<\n  string,\n  {\n    code: string;\n    path: string;\n  }\n>;\n\nexport type Dependencies = Record<string, string>;\n\nexport type ReactDevToolsMode = \"latest\" | \"legacy\";\n\nexport interface ModuleSource {\n  fileName: string;\n  compiledCode: string;\n  sourceMap: unknown | undefined;\n}\n\nexport enum SandpackLogLevel {\n  None = 0,\n  Error = 10,\n  Warning = 20,\n  Info = 30,\n  Debug = 40,\n}\n\nexport interface ErrorStackFrame {\n  columnNumber: number;\n  fileName: string;\n  functionName: string;\n  lineNumber: number;\n  _originalColumnNumber: number;\n  _originalFileName: string;\n  _originalFunctionName: string;\n  _originalLineNumber: number;\n  _originalScriptCode: Array<{\n    lineNumber: number;\n    content: string;\n    highlight: boolean;\n  }>;\n}\n\nexport interface TranspiledModule {\n  module: Module;\n  query: string;\n  source: ModuleSource | undefined;\n  assets: Record<string, ModuleSource>;\n  isEntry: boolean;\n  isTestFile: boolean;\n  childModules: string[];\n  /**\n   * All extra modules emitted by the loader\n   */\n  emittedAssets: ModuleSource[];\n  initiators: string[];\n  dependencies: string[];\n  asyncDependencies: string[];\n  transpilationDependencies: string[];\n  transpilationInitiators: string[];\n}\n\nexport interface BundlerState {\n  entry: string;\n  transpiledModules: Record<string, TranspiledModule>;\n}\n\nexport type ClientStatus =\n  | \"initializing\"\n  | \"installing-dependencies\"\n  | \"transpiling\"\n  | \"evaluating\"\n  | \"running-tests\"\n  | \"idle\";\n\nexport type ListenerFunction = (msg: SandpackMessage) => void;\nexport type UnsubscribeFunction = () => void;\n\nexport type Listen = (\n  listener: ListenerFunction,\n  clientId?: string\n) => UnsubscribeFunction;\nexport type Dispatch = (msg: SandpackMessage, clientId?: string) => void;\n\nexport interface SandpackError {\n  message: string;\n  line?: number;\n  column?: number;\n  path?: string;\n  title?: string;\n}\n\nexport interface SandpackErrorMessage {\n  title: string;\n  path: string;\n  message: string;\n  line: number;\n  column: number;\n  payload: {\n    frames?: ErrorStackFrame[];\n  };\n}\n\nexport interface BaseSandpackMessage {\n  type: string;\n  $id?: number;\n  codesandbox?: boolean;\n}\n\nexport type SandpackMessage = BaseSandpackMessage &\n  (\n    | {\n        type: \"initialized\";\n      }\n    | {\n        type: \"start\";\n        firstLoad?: boolean;\n      }\n    | {\n        type: \"status\";\n        status: ClientStatus;\n      }\n    | {\n        type: \"state\";\n        state: BundlerState;\n      }\n    | {\n        type: \"success\";\n      }\n    | ({\n        type: \"action\";\n        action: \"show-error\";\n      } & SandpackErrorMessage)\n    | {\n        type: \"action\";\n        action: \"notification\";\n        notificationType: \"error\";\n        title: string;\n      }\n    | {\n        type: \"done\";\n        compilatonError: boolean; // TODO: fix typo?\n      }\n    | {\n        type: \"urlchange\";\n        url: string;\n        back: boolean;\n        forward: boolean;\n      }\n    | {\n        type: \"resize\";\n        height: number;\n      }\n    | {\n        type: \"transpiler-context\";\n        data: Record<string, Record<string, unknown>>;\n      }\n    | {\n        type: \"compile\";\n        version: number;\n        isInitializationCompile?: boolean;\n        modules: Modules;\n        externalResources: string[];\n        hasFileResolver: boolean;\n        disableDependencyPreprocessing?: boolean;\n        template?: string | ITemplate;\n        showOpenInCodeSandbox: boolean;\n        showErrorScreen: boolean;\n        showLoadingScreen: boolean;\n        skipEval: boolean;\n        clearConsoleDisabled?: boolean;\n        reactDevTools?: ReactDevToolsMode;\n        logLevel?: SandpackLogLevel;\n      }\n    | {\n        type: \"refresh\";\n      }\n    | {\n        type: \"urlback\";\n      }\n    | {\n        type: \"urlforward\";\n      }\n    | {\n        type: \"get-transpiler-context\";\n      }\n    | {\n        type: \"activate-react-devtools\";\n      }\n  );\n"],
  "mappings": ";AAAA;AACA;;;ACMA,IAAM,aAAa,MAEjB,KAAK,MAAM,KAAK,WAAW,MAAU,KAAK,WAAW;AAEvD,IAAM,qBAAqB,CAAC,MAAW;AACrC,MAAI;AACF,WAAO,EAAE,YAAY;AAAA,WACd,GAAP;AACA,WAAO;AAAA;AAAA;AAIX,qBAA8B;AAAA,EAK5B,YACU,MACA,eACA,QACR;AAHQ;AACA;AACA;AAPF,4BAAgC,IAAI;AA2DpC,4BAAmB,OAAO,MAAoB;AACpD,YAAM,EAAE,SAAS;AAEjB,UAAI,KAAK,UAAU,KAAK,aAAa;AACnC;AAAA;AAIF,UAAI,KAAK,iBAAiB,IAAI,KAAK,MAAM;AACvC;AAAA;AAGF,YAAM,SAAS,MAAM,KAAK,cAAc,KAAK;AAE7C,YAAM,gBAAgB;AAAA,QACpB,WAAW,KAAK;AAAA,QAChB,OAAO,KAAK;AAAA,QACZ,OAAO;AAAA,QACP,KAAK,KAAK;AAAA;AAGZ,UAAI,EAAE,QAAQ;AAEZ,UAAE,OAAO,YAAY,eAAe;AAAA,aAC/B;AACL,aAAK,aAAa;AAAA;AAAA;AA3EpB,SAAK;AACL,SAAK,aAAa;AAClB,SAAK,WAAW,mBAAmB,YAAY;AAAA;AAAA,EAGjD,YAAY;AACV,WAAO,KAAK,KAAK;AAAA;AAAA,EAGnB,mBAAmB;AACjB,SAAK,iBAAiB,WAAW,KAAK;AAAA;AAAA,EAGjC,UAAU;AACf,SAAK,oBAAoB,WAAW,KAAK;AAAA;AAAA,EAG3C,YAAyB,MAAiC;AACxD,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,YAAM,YAAY;AAElB,YAAM,UAAU;AAAA,QACd,WAAW,KAAK;AAAA,QAChB,OAAO,KAAK;AAAA,QACZ,OAAO;AAAA,QACP,KAAK;AAAA;AAGP,WAAK,iBAAiB,IAAI;AAE1B,YAAM,iBAAiB,CAAC,MAAoB;AAC1C,cAAM,EAAE,gBAAS;AAEjB,YACE,MAAK,UAAU,KAAK,eACpB,MAAK,QAAQ,aACb,MAAK,cAAc,KAAK,YACxB;AACA,kBAAQ,MAAK;AAEb,eAAK,oBAAoB,WAAW;AAAA;AAAA;AAIxC,WAAK,iBAAiB,WAAW;AAEjC,WAAK,aAAa;AAAA;AAAA;AAAA,EAiCd,aAAa,GAAQ;AAC3B,QACE,KAAK,YAEJ,OAAO,+BAA+B,eAErC,KAAK,kBAAkB,4BACzB;AAEA,WAAK,OAAO,YAAY;AAAA,WACnB;AACL,MAAC,KAAK,OAAkB,YAAY,GAAG;AAAA;AAAA;AAAA;;;ACjHtC,2BAAqB;AAAA,EAe1B,YAAY,QAA2B,QAAgB;AAV/C,2BAAoD;AACpD,gCAAuB;AAGvB,4BAAqD;AACrD,iCAAwB;AAGvB,qBAAoB,KAAK,MAAM,KAAK,WAAW;AAGtD,SAAK,cAAc,OAAO;AAC1B,SAAK,SAAS;AACd,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AAExB,SAAK,gBAAgB,KAAK,cAAc,KAAK;AAE7C,QAAI,OAAO,WAAW,aAAa;AACjC,aAAO,iBAAiB,WAAW,KAAK;AAAA;AAAA;AAAA,EAI5C,UAAgB;AACd,WAAO,oBAAoB,WAAW,KAAK;AAC3C,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AACxB,SAAK,uBAAuB;AAC5B,SAAK,wBAAwB;AAAA;AAAA,EAK/B,WAAiB;AACf,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAGF,SAAK,YAAY,YACf;AAAA,MACE,MAAM;AAAA,MACN,QAAQ,SAAS,SAAS;AAAA,MAC1B,IAAI,KAAK;AAAA,OAEX,KAAK;AAAA;AAAA,EAKT,SAAS,SAAgC;AACvC,QAAI,CAAC,KAAK,aAAa;AACrB;AAAA;AAGF,SAAK,YAAY,YACf;AAAA,MACE,KAAK,KAAK;AAAA,MACV,aAAa;AAAA,SACV;AAAA,OAEL,KAAK;AAAA;AAAA,EAMT,aAAa,UAAiD;AAC5D,QAAI,OAAO,aAAa,YAAY;AAClC,aAAO,MAAY;AACjB;AAAA;AAAA;AAIJ,UAAM,aAAa,KAAK;AACxB,SAAK,gBAAgB,cAAc;AACnC,SAAK;AACL,WAAO,MAAY;AACjB,aAAO,KAAK,gBAAgB;AAAA;AAAA;AAAA,EAMhC,cAAc,UAAiD;AAC7D,QAAI,OAAO,aAAa,YAAY;AAClC,aAAO,MAAY;AACjB;AAAA;AAAA;AAIJ,UAAM,aAAa,KAAK;AACxB,SAAK,iBAAiB,cAAc;AACpC,SAAK;AACL,WAAO,MAAY;AACjB,aAAO,KAAK,iBAAiB;AAAA;AAAA;AAAA,EAKzB,cAAc,KAAyB;AAE7C,QAAI,IAAI,WAAW,KAAK,aAAa;AACnC;AAAA;AAGF,UAAM,UAAU,IAAI;AACpB,QAAI,CAAC,QAAQ,aAAa;AACxB;AAAA;AAGF,WAAO,OAAO,KAAK,iBAAiB,QAAQ,CAAC,aAC3C,SAAS;AAGX,QAAI,QAAQ,QAAQ,KAAK,WAAW;AAClC;AAAA;AAGF,WAAO,OAAO,KAAK,kBAAkB,QAAQ,CAAC,aAC5C,SAAS;AAAA;AAAA;;;AC1HR,2BACL,eAA6B,IAC7B,kBAAgC,IAChC,QAAQ,aACA;AACR,SAAO,KAAK,UACV;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN;AAAA,IACA;AAAA,KAEF,MACA;AAAA;AAIG,gCACL,OACA,cACA,iBACA,OACsB;AACtB,QAAM,WAAW,KAAK;AAEtB,MAAI,CAAC,SAAS,kBAAkB;AAC9B,QAAI,CAAC,cAAc;AACjB,YAAM,IAAI,MACR;AAAA;AAIJ,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MACR;AAAA;AAIJ,aAAS,mBAAmB;AAAA,MAC1B,MAAM,kBAAkB,cAAc,iBAAiB;AAAA;AAAA;AAI3D,SAAO;AAAA;AAGF,6BAA6B,KAA0C;AAC5E,MAAI,IAAI,UAAU,eAAe;AAC/B,UAAM,EAAE,OAAO,MAAM,SAAS,MAAM,WAAW;AAC/C,WAAO,EAAE,OAAO,MAAM,SAAS,MAAM;AAAA;AAGvC,QAAM,qBAAqB,sBAAsB,IAAI,QAAQ;AAC7D,MAAI,CAAC,oBAAoB;AACvB,WAAO,EAAE,SAAS,IAAI;AAAA;AAGxB,QAAM,cAAc,uBAAuB;AAC3C,QAAM,gBAAgB,iBAAiB;AACvC,QAAM,eAAe,mBACnB,mBAAmB,mBACnB,IAAI,SACJ,eACA;AAGF,SAAO;AAAA,IACL,SAAS;AAAA,IACT,OAAO,IAAI;AAAA,IACX,MAAM,mBAAmB;AAAA,IACzB,MAAM,mBAAmB;AAAA,IACzB,QAAQ,mBAAmB;AAAA;AAAA;AAI/B,+BACE,QAC6B;AAC7B,MAAI,CAAC,QAAQ;AACX;AAAA;AAGF,SAAO,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM;AAAA;AAGxC,0BAA0B,YAAqC;AAC7D,SAAO,aACH,KAAK,WAAW,uBAAuB,WAAW,2BAClD;AAAA;AAGN,gCAAgC,YAAqC;AACnE,QAAM,iBACJ,WAAW,oBAAoB,WAAW,oBAAoB,SAAS;AACzE,QAAM,+BACJ,eAAe,WAAW,WAAW;AAEvC,QAAM,yBAAyB;AAC/B,QAAM,8BAA8B;AACpC,QAAM,yBACJ,yBACA,+BACA,8BACA,WAAW;AAEb,SAAO,WAAW,oBAAoB,OAAO,CAAC,QAAQ,eAAe;AACnE,UAAM,cAAc,WAAW,YAAY,MAAM;AACjD,UAAM,aACJ,WAAW,WAAW,WAAW,WAAW,+BACxC,GAAG,WAAW,eACd,IAAI,WAAW;AAErB,UAAM,YAAY,WAAW,YACzB,OAAO,IAAI,OAAO,0BAA0B,MAC5C;AAEJ,WACE,SACA,OACA,cACA,MACA,aACA,QACA,WAAW,UACX;AAAA,KAED;AAAA;AAGL,4BACE,UACA,SACA,UACA,aACQ;AACR,SAAO,GAAG,aAAa,UAAU;AAAA,EACjC;AAAA;;;AH9CF,IAAM,cACJ,QACI,2BACA,WAAW,qCAA6B,QACtC,OACA;AAGD,2BAAqB;AAAA,EAkB1B,YACE,UACA,aACA,UAAyB,IACzB;AA6NK,gCAAuB,MAG5B,IAAI,QAAQ,CAAC,YAAY;AACvB,YAAM,cAAc,KAAK,OAAO,CAAC,YAAY;AAC3C,YAAI,QAAQ,SAAS,sBAAsB;AACzC,kBAAQ,QAAQ;AAEhB;AAAA;AAAA;AAIJ,WAAK,SAAS,EAAE,MAAM;AAAA;AAzW5B;AAiII,SAAK,UAAU;AACf,SAAK,cAAc;AACnB,SAAK,aAAa,QAAQ,cAAc;AAExC,SAAK,eAAe;AACpB,SAAK,SAAS;AACd,SAAK,SAAS;AAEd,QAAI,OAAO,aAAa,UAAU;AAChC,WAAK,WAAW;AAChB,YAAM,UAAU,SAAS,cAAc;AAEvC,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,kCAAkC;AAAA;AAGpD,WAAK,UAAU;AACf,WAAK,SAAS,SAAS,cAAc;AACrC,WAAK;AAAA,WACA;AACL,WAAK,UAAU;AACf,WAAK,SAAS;AAAA;AAEhB,QAAI,CAAC,KAAK,OAAO,aAAa,YAAY;AACxC,WAAK,OAAO,aACV,WACA;AAAA;AAIJ,UAAM,YAAY,QAAQ,aACtB,IAAI,IAAI,QAAQ,YAAY,KAAK,YAAY,aAC7C,KAAK;AAET,eAAK,OAAO,kBAAZ,mBAA2B,SAAS,QAAQ;AAE5C,SAAK,iBAAiB,IAAI,eAAe,KAAK,QAAQ,KAAK;AAE3D,SAAK,4BAA4B,KAAK,eAAe,aACnD,CAAC,QAAyB;AACxB,UAAI,IAAI,SAAS,iBAAiB,CAAC,KAAK,OAAO,eAAe;AAC5D;AAAA;AAGF,WAAK,eAAe;AAEpB,UAAI,KAAK,QAAQ,cAAc;AAE7B,aAAK,uBAAuB,IAAI,SAC9B,iBACA,OAAO,SAAkD;AACvD,cAAI,KAAK,MAAM,UAAU;AAEvB,mBAAO,KAAK,QAAQ,aAAc,OAAO,KAAK;AAAA;AAIhD,iBAAO,KAAK,QAAQ,aAAc,SAAS,KAAK;AAAA,WAElD,KAAK,OAAO;AAAA;AAIhB,WAAK,cAAc,KAAK,aAAa;AAAA;AAIzC,SAAK,6BAA6B,KAAK,eAAe,cACpD,CAAC,QAAyB;AACxB,cAAQ,IAAI;AAAA,aACL,SAAS;AACZ,eAAK,SAAS;AACd;AAAA;AAAA,aAEG,UAAU;AACb,eAAK,SAAS,IAAI;AAClB;AAAA;AAAA,aAEG,UAAU;AACb,cAAI,IAAI,WAAW,cAAc;AAC/B,iBAAK,SAAS,CAAC,GAAG,KAAK,QAAQ,oBAAoB;AAAA;AAErD;AAAA;AAAA,aAEG,SAAS;AACZ,eAAK,eAAe,IAAI;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAOV,UAAgB;AACd,SAAK;AACL,SAAK;AACL,SAAK,eAAe;AAAA;AAAA,EAGtB,cAAc,SAA8B;AAC1C,QAAI,CAAC,QAAQ,KAAK,SAAS,UAAU;AACnC,WAAK,UAAU;AACf,WAAK;AAAA;AAAA;AAAA,EAIT,cACE,cAAc,KAAK,aACnB,yBACM;AA9OV;AA+OI,SAAK,cAAc;AAEnB,UAAM,QAAQ,KAAK;AAEnB,UAAM,UAAmB,OAAO,KAAK,OAAO,OAC1C,CAAC,MAAM,SAAU;AAAA,SACZ;AAAA,OACF,OAAO;AAAA,QACN,MAAM,MAAM,MAAM;AAAA,QAClB,MAAM;AAAA;AAAA,QAGV;AAGF,QAAI,cAAc,KAAK,MACrB,kBACE,KAAK,YAAY,cACjB,KAAK,YAAY,iBACjB,KAAK,YAAY;AAGrB,QAAI;AACF,oBAAc,KAAK,MAAM,MAAM,iBAAiB;AAAA,aACzC,GAAP;AACA,cAAQ,MACN,wCAAyC,EAAY;AAAA;AAKzD,UAAM,oBAAoB,OAAO,KAAK,OAAO,OAC3C,CAAC,MAAM,SAAU;AAAA,SACZ;AAAA,OACF,OAAO;AAAA,QACN,SAAS,MAAM,MAAM;AAAA,QACrB,MAAM;AAAA;AAAA,QAGV;AAGF,SAAK,SAAS;AAAA,MACZ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA,eAAe,KAAK,QAAQ;AAAA,MAC5B,mBAAmB,KAAK,QAAQ,qBAAqB;AAAA,MACrD,iBAAiB,QAAQ,KAAK,QAAQ;AAAA,MACtC,gCACE,KAAK,YAAY;AAAA,MACnB,UACE,KAAK,YAAY,YACjB,YAAY,aAAa;AAAA,MAC3B,uBAAuB,WAAK,QAAQ,0BAAb,YAAsC;AAAA,MAC7D,iBAAiB,WAAK,QAAQ,oBAAb,YAAgC;AAAA,MACjD,mBAAmB,WAAK,QAAQ,sBAAb,YAAkC;AAAA,MACrD,UAAU,KAAK,QAAQ,YAAY;AAAA,MACnC,sBAAsB,CAAC,KAAK,QAAQ;AAAA,MACpC,UAAU,KAAK,QAAQ;AAAA;AAAA;AAAA,EAIpB,SAAS,SAAgC;AAC9C,SAAK,eAAe,SAAS;AAAA;AAAA,EAGxB,OAAO,UAAiD;AAC7D,WAAO,KAAK,eAAe,cAAc;AAAA;AAAA,EAMpC,oBAIJ;AACD,UAAM,QAAQ,KAAK;AAEnB,UAAM,aAAa,OAAO,KAAK,OAAO,OACpC,CAAC,MAAM,SAAU;AAAA,SACZ;AAAA,OACF,KAAK,QAAQ,KAAK,MAAM;AAAA,QACvB,SAAS,MAAM,MAAM;AAAA,QACrB,UAAU;AAAA;AAAA,QAGd;AAGF,WAAO,MAAM,yDAAyD;AAAA,MACpE,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU,EAAE,OAAO;AAAA,MAC9B,SAAS;AAAA,QACP,QAAQ;AAAA,QACR,gBAAgB;AAAA;AAAA,OAGjB,KAAK,CAAC,MAAM,EAAE,QACd,KAAK,CAAC,QAAiC;AAAA,MACtC,WAAW,IAAI;AAAA,MACf,WAAW,4BAA4B,IAAI;AAAA,MAC3C,UAAU,gCAAgC,IAAI;AAAA;AAAA;AAAA,EAmB5C,WAAiC;AACvC,UAAM,EAAE,gBAAgB;AAExB,QAAI,YAAY,MAAM,qBAAqB,QAAW;AACpD,aAAO,uBACL,YAAY,OACZ,YAAY,cACZ,YAAY,iBACZ,YAAY;AAAA;AAIhB,WAAO,KAAK,YAAY;AAAA;AAAA,EAGlB,oBAA0B;AAChC,SAAK,OAAO,MAAM,SAAS;AAC3B,SAAK,OAAO,MAAM,QAAQ,KAAK,QAAQ,SAAS;AAChD,SAAK,OAAO,MAAM,SAAS,KAAK,QAAQ,UAAU;AAClD,SAAK,OAAO,MAAM,WAAW;AAE7B,QAAI,CAAC,KAAK,QAAQ,YAAY;AAE5B,YAAM,IAAI,MAAM;AAAA;AAGlB,SAAK,QAAQ,WAAW,aAAa,KAAK,QAAQ,KAAK;AAAA;AAAA;;;AItWpD,IAAK;AAAL,UAAK,mBAAL;AACL,gDAAO,KAAP;AACA,iDAAQ,MAAR;AACA,mDAAU,MAAV;AACA,gDAAO,MAAP;AACA,iDAAQ,MAAR;AAAA,GALU;",
  "names": []
}
