{"version":3,"sources":["../../src/steps/set-image-node-id-cache.ts"],"names":["setImageNodeIdCache","state","store","getState","imageNodes","nodeMetaByUrl","key","value"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,mBAAmB,GAAG,YAA2B;AACrD,QAAMC,KAAK,GAAGC,eAAMC,QAAN,EAAd;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiBH,KAAvB;;AAEA,MAAIG,UAAU,CAACC,aAAf,EAA8B;AAC5B,UAAM,+BAAmB;AACvBC,MAAAA,GAAG,EAAG,wBADiB;AAEvBC,MAAAA,KAAK,EAAEH,UAAU,CAACC;AAFK,KAAnB,CAAN;AAID;AACF,CAVD","sourcesContent":["import store from \"~/store\"\nimport { setPersistentCache } from \"~/utils/cache\"\n\n// since we create image nodes in resolvers\n// we cache our image node id's on post build for production\n// and on create dev server for development\n// so we can touch our image nodes in both develop and build\n// so they don't get garbage collected by Gatsby\nconst setImageNodeIdCache = async (): Promise<void> => {\n  const state = store.getState()\n  const { imageNodes } = state\n\n  if (imageNodes.nodeMetaByUrl) {\n    await setPersistentCache({\n      key: `image-node-meta-by-url`,\n      value: imageNodes.nodeMetaByUrl,\n    })\n  }\n}\n\nexport { setImageNodeIdCache }\n"],"file":"set-image-node-id-cache.js"}