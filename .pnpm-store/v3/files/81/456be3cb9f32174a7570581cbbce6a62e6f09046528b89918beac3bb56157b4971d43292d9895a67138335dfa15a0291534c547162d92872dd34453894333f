{"version":3,"file":"rematch.js","sources":["../../src/utils/validate.ts","../../node_modules/symbol-observable/es/index.js","../../src/plugins/dispatch.ts","../../src/plugins/effects.ts","../../node_modules/redux/es/redux.js","../../node_modules/symbol-observable/es/ponyfill.js","../../src/redux.ts","../../src/utils/isListener.ts","../../src/rematch.ts","../../src/pluginFactory.ts","../../src/utils/deprecate.ts","../../src/utils/mergeConfig.ts","../../src/index.ts"],"sourcesContent":["import { Validation } from '../typings'\n\n/**\n * validate\n *\n * takes an array of arrays of validations and\n * throws if an error occurs\n */\nconst validate = (validations: Validation[]): void => {\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tfor (const validation of validations) {\n\t\t\tconst condition = validation[0]\n\t\t\tconst errorMessage = validation[1]\n\t\t\tif (condition) {\n\t\t\t\tthrow new Error(errorMessage)\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default validate\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","import * as R from '../typings'\n\n/**\n * Dispatch Plugin\n *\n * generates dispatch[modelName][actionName]\n */\nconst dispatchPlugin: R.Plugin = {\n\texposed: {\n\t\t// required as a placeholder for store.dispatch\n\t\tstoreDispatch(action: R.Action, state: any) {\n\t\t\tconsole.warn('Warning: store not yet loaded')\n\t\t},\n\n\t\tstoreGetState() {\n\t\t\tconsole.warn('Warning: store not yet loaded')\n\t\t},\n\n\t\t/**\n\t\t * dispatch\n\t\t *\n\t\t * both a function (dispatch) and an object (dispatch[modelName][actionName])\n\t\t * @param action R.Action\n\t\t */\n\t\tdispatch(action: R.Action) {\n\t\t\treturn this.storeDispatch(action)\n\t\t},\n\n\t\t/**\n\t\t * createDispatcher\n\t\t *\n\t\t * genereates an action creator for a given model & reducer\n\t\t * @param modelName string\n\t\t * @param reducerName string\n\t\t */\n\t\tcreateDispatcher(modelName: string, reducerName: string) {\n\t\t\treturn async (payload?: any, meta?: any): Promise<any> => {\n\t\t\t\tconst action: R.Action = { type: `${modelName}/${reducerName}` }\n\t\t\t\tif (typeof payload !== 'undefined') {\n\t\t\t\t\taction.payload = payload\n\t\t\t\t}\n\t\t\t\tif (typeof meta !== 'undefined') {\n\t\t\t\t\taction.meta = meta\n\t\t\t\t}\n\t\t\t\treturn this.dispatch(action)\n\t\t\t}\n\t\t},\n\t},\n\n\t// access store.dispatch after store is created\n\tonStoreCreated(store: any) {\n\t\tthis.storeDispatch = store.dispatch\n\t\tthis.storeGetState = store.getState\n\t\treturn { dispatch: this.dispatch }\n\t},\n\n\t// generate action creators for all model.reducers\n\tonModel(model: R.Model) {\n\t\tthis.dispatch[model.name] = {}\n\t\tif (!model.reducers) {\n\t\t\treturn\n\t\t}\n\t\tfor (const reducerName of Object.keys(model.reducers)) {\n\t\t\tthis.validate([\n\t\t\t\t[\n\t\t\t\t\t!!reducerName.match(/\\/.+\\//),\n\t\t\t\t\t`Invalid reducer name (${model.name}/${reducerName})`,\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\ttypeof model.reducers[reducerName] !== 'function',\n\t\t\t\t\t`Invalid reducer (${model.name}/${reducerName}). Must be a function`,\n\t\t\t\t],\n\t\t\t])\n\t\t\tthis.dispatch[model.name][reducerName] = this.createDispatcher.apply(\n\t\t\t\tthis,\n\t\t\t\t[model.name, reducerName]\n\t\t\t)\n\t\t}\n\t},\n}\n\nexport default dispatchPlugin\n","/* tslint-disable member-ordering */\nimport * as R from '../typings'\n\n/**\n * Effects Plugin\n *\n * Plugin for handling async actions\n */\nconst effectsPlugin: R.Plugin = {\n\texposed: {\n\t\t// expose effects for access from dispatch plugin\n\t\teffects: {},\n\t},\n\n\t// add effects to dispatch so that dispatch[modelName][effectName] calls an effect\n\tonModel(model: R.Model): void {\n\t\tif (!model.effects) {\n\t\t\treturn\n\t\t}\n\n\t\tconst effects =\n\t\t\ttypeof model.effects === 'function'\n\t\t\t\t? model.effects(this.dispatch)\n\t\t\t\t: model.effects\n\n\t\tfor (const effectName of Object.keys(effects)) {\n\t\t\tthis.validate([\n\t\t\t\t[\n\t\t\t\t\t!!effectName.match(/\\//),\n\t\t\t\t\t`Invalid effect name (${model.name}/${effectName})`,\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\ttypeof effects[effectName] !== 'function',\n\t\t\t\t\t`Invalid effect (${model.name}/${effectName}). Must be a function`,\n\t\t\t\t],\n\t\t\t])\n\t\t\tthis.effects[`${model.name}/${effectName}`] = effects[effectName].bind(\n\t\t\t\tthis.dispatch[model.name]\n\t\t\t)\n\t\t\t// add effect to dispatch\n\t\t\t// is assuming dispatch is available already... that the dispatch plugin is in there\n\t\t\tthis.dispatch[model.name][effectName] = this.createDispatcher.apply(\n\t\t\t\tthis,\n\t\t\t\t[model.name, effectName]\n\t\t\t)\n\t\t\t// tag effects so they can be differentiated from normal actions\n\t\t\tthis.dispatch[model.name][effectName].isEffect = true\n\t\t}\n\t},\n\n\t// process async/await actions\n\tmiddleware(store) {\n\t\treturn next => async (action: R.Action) => {\n\t\t\t// async/await acts as promise middleware\n\t\t\tif (action.type in this.effects) {\n\t\t\t\tawait next(action)\n\t\t\t\treturn this.effects[action.type](\n\t\t\t\t\taction.payload,\n\t\t\t\t\tstore.getState(),\n\t\t\t\t\taction.meta\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn next(action)\n\t\t}\n\t},\n}\n\nexport default effectsPlugin\n","import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore };\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","import * as Redux from 'redux'\nimport * as R from './typings'\nimport isListener from './utils/isListener'\n\nconst composeEnhancersWithDevtools = (\n\tdevtoolOptions: R.DevtoolOptions = {}\n): any => {\n\tconst { disabled, ...options } = devtoolOptions\n\t/* istanbul ignore next */\n\treturn !disabled &&\n\t\ttypeof window === 'object' &&\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n\t\t? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(options)\n\t\t: Redux.compose\n}\n\nexport default function({\n\tredux,\n\tmodels,\n}: {\n\tredux: R.ConfigRedux\n\tmodels: R.Model[]\n}) {\n\tconst combineReducers = redux.combineReducers || Redux.combineReducers\n\tconst createStore: Redux.StoreCreator = redux.createStore || Redux.createStore\n\tconst initialState: any =\n\t\ttypeof redux.initialState !== 'undefined' ? redux.initialState : {}\n\n\tthis.reducers = redux.reducers\n\n\t// combine models to generate reducers\n\tthis.mergeReducers = (nextReducers: R.ModelReducers = {}) => {\n\t\t// merge new reducers with existing reducers\n\t\tthis.reducers = { ...this.reducers, ...nextReducers }\n\t\tif (!Object.keys(this.reducers).length) {\n\t\t\t// no reducers, just return state\n\t\t\treturn (state: any) => state\n\t\t}\n\t\treturn combineReducers(this.reducers)\n\t}\n\n\tthis.createModelReducer = (model: R.Model) => {\n\t\tconst modelBaseReducer = model.baseReducer\n\t\tconst modelReducers = {}\n\t\tfor (const modelReducer of Object.keys(model.reducers || {})) {\n\t\t\tconst action = isListener(modelReducer)\n\t\t\t\t? modelReducer\n\t\t\t\t: `${model.name}/${modelReducer}`\n\t\t\tmodelReducers[action] = model.reducers[modelReducer]\n\t\t}\n\t\tconst combinedReducer = (state: any = model.state, action: R.Action) => {\n\t\t\t// handle effects\n\t\t\tif (typeof modelReducers[action.type] === 'function') {\n\t\t\t\treturn modelReducers[action.type](state, action.payload, action.meta)\n\t\t\t}\n\t\t\treturn state\n\t\t}\n\n\t\tthis.reducers[model.name] = !modelBaseReducer\n\t\t\t? combinedReducer\n\t\t\t: (state: any, action: R.Action) =>\n\t\t\t\t\tcombinedReducer(modelBaseReducer(state, action), action)\n\t}\n\t// initialize model reducers\n\tfor (const model of models) {\n\t\tthis.createModelReducer(model)\n\t}\n\n\tthis.createRootReducer = (\n\t\trootReducers: R.RootReducers = {}\n\t): Redux.Reducer<any, R.Action> => {\n\t\tconst mergedReducers: Redux.Reducer<any> = this.mergeReducers()\n\t\tif (Object.keys(rootReducers).length) {\n\t\t\treturn (state, action) => {\n\t\t\t\tconst rootReducerAction = rootReducers[action.type]\n\t\t\t\tif (rootReducers[action.type]) {\n\t\t\t\t\treturn mergedReducers(rootReducerAction(state, action), action)\n\t\t\t\t}\n\t\t\t\treturn mergedReducers(state, action)\n\t\t\t}\n\t\t}\n\t\treturn mergedReducers\n\t}\n\n\tconst rootReducer = this.createRootReducer(redux.rootReducers)\n\n\tconst middlewares = Redux.applyMiddleware(...redux.middlewares)\n\tconst enhancers = composeEnhancersWithDevtools(redux.devtoolOptions)(\n\t\t...redux.enhancers,\n\t\tmiddlewares\n\t)\n\n\tthis.store = createStore(rootReducer, initialState, enhancers)\n\n\treturn this\n}\n","/**\n * isListener\n *\n * determines if an action is a listener on another model\n */\nexport default (reducer: string): boolean => reducer.indexOf('/') > -1\n","import pluginFactory from './pluginFactory'\nimport dispatchPlugin from './plugins/dispatch'\nimport effectsPlugin from './plugins/effects'\nimport createRedux from './redux'\nimport * as R from './typings'\nimport validate from './utils/validate'\n\nconst corePlugins: R.Plugin[] = [dispatchPlugin, effectsPlugin]\n\n/**\n * Rematch class\n *\n * an instance of Rematch generated by \"init\"\n */\nexport default class Rematch {\n\tprotected config: R.Config\n\tprotected models: R.Model[]\n\tprivate plugins: R.Plugin[] = []\n\tprivate pluginFactory: R.PluginFactory\n\n\tconstructor(config: R.Config) {\n\t\tthis.config = config\n\t\tthis.pluginFactory = pluginFactory(config)\n\t\tfor (const plugin of corePlugins.concat(this.config.plugins)) {\n\t\t\tthis.plugins.push(this.pluginFactory.create(plugin))\n\t\t}\n\t\t// preStore: middleware, model hooks\n\t\tthis.forEachPlugin('middleware', middleware => {\n\t\t\tthis.config.redux.middlewares.push(middleware)\n\t\t})\n\t}\n\tpublic forEachPlugin(method: string, fn: (content: any) => void) {\n\t\tfor (const plugin of this.plugins) {\n\t\t\tif (plugin[method]) {\n\t\t\t\tfn(plugin[method])\n\t\t\t}\n\t\t}\n\t}\n\tpublic getModels(models: R.Models): R.Model[] {\n\t\treturn Object.keys(models).map((name: string) => ({\n\t\t\tname,\n\t\t\t...models[name],\n\t\t\treducers: models[name].reducers || {},\n\t\t}))\n\t}\n\tpublic addModel(model: R.Model) {\n\t\tvalidate([\n\t\t\t[!model, 'model config is required'],\n\t\t\t[typeof model.name !== 'string', 'model \"name\" [string] is required'],\n\t\t\t[\n\t\t\t\tmodel.state === undefined && model.baseReducer === undefined,\n\t\t\t\t'model \"state\" is required',\n\t\t\t],\n\t\t\t[\n\t\t\t\tmodel.baseReducer !== undefined &&\n\t\t\t\t\ttypeof model.baseReducer !== 'function',\n\t\t\t\t'model \"baseReducer\" must be a function',\n\t\t\t],\n\t\t])\n\t\t// run plugin model subscriptions\n\t\tthis.forEachPlugin('onModel', onModel => onModel(model))\n\t}\n\tpublic init() {\n\t\t// collect all models\n\t\tthis.models = this.getModels(this.config.models)\n\t\tfor (const model of this.models) {\n\t\t\tthis.addModel(model)\n\t\t}\n\t\t// create a redux store with initialState\n\t\t// merge in additional extra reducers\n\t\tconst redux = createRedux.call(this, {\n\t\t\tredux: this.config.redux,\n\t\t\tmodels: this.models,\n\t\t})\n\n\t\tconst rematchStore = {\n\t\t\tname: this.config.name,\n\t\t\t...redux.store,\n\t\t\t// dynamic loading of models with `replaceReducer`\n\t\t\tmodel: (model: R.Model) => {\n\t\t\t\tthis.addModel(model)\n\t\t\t\tredux.mergeReducers(redux.createModelReducer(model))\n\t\t\t\tredux.store.replaceReducer(\n\t\t\t\t\tredux.createRootReducer(this.config.redux.rootReducers)\n\t\t\t\t)\n\t\t\t\tredux.store.dispatch({ type: '@@redux/REPLACE ' })\n\t\t\t},\n\t\t}\n\n\t\tthis.forEachPlugin('onStoreCreated', onStoreCreated => {\n\t\t\tconst returned = onStoreCreated(rematchStore)\n\t\t\t// if onStoreCreated returns an object value\n\t\t\t// merge its returned value onto the store\n\t\t\tif (returned) {\n\t\t\t\tObject.keys(returned || {}).forEach(key => {\n\t\t\t\t\trematchStore[key] = returned[key]\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\n\t\treturn rematchStore\n\t}\n}\n","import * as R from './typings'\nimport validate from './utils/validate'\n\n/**\n * PluginFactory\n *\n * makes Plugin objects extend and inherit from a root PluginFactory\n */\nexport default (config: R.Config) => ({\n\tconfig,\n\t/**\n\t * validate\n\t *\n\t * bind validate to the store for easy access\n\t */\n\tvalidate,\n\n\t/**\n\t * create plugin\n\t *\n\t * binds plugin properties and functions to an instance of PluginFactorys\n\t * @param plugin\n\t */\n\tcreate(plugin: R.Plugin): R.Plugin {\n\t\tvalidate([\n\t\t\t[\n\t\t\t\tplugin.onStoreCreated && typeof plugin.onStoreCreated !== 'function',\n\t\t\t\t'Plugin onStoreCreated must be a function',\n\t\t\t],\n\t\t\t[\n\t\t\t\tplugin.onModel && typeof plugin.onModel !== 'function',\n\t\t\t\t'Plugin onModel must be a function',\n\t\t\t],\n\t\t\t[\n\t\t\t\tplugin.middleware && typeof plugin.middleware !== 'function',\n\t\t\t\t'Plugin middleware must be a function',\n\t\t\t],\n\t\t])\n\n\t\tif (plugin.onInit) {\n\t\t\tplugin.onInit.call(this)\n\t\t}\n\n\t\tconst result: R.Plugin | any = {}\n\n\t\tif (plugin.exposed) {\n\t\t\tfor (const key of Object.keys(plugin.exposed)) {\n\t\t\t\tthis[key] =\n\t\t\t\t\ttypeof plugin.exposed[key] === 'function'\n\t\t\t\t\t\t? plugin.exposed[key].bind(this) // bind functions to plugin class\n\t\t\t\t\t\t: Object.create(plugin.exposed[key]) // add exposed to plugin class\n\t\t\t}\n\t\t}\n\t\tfor (const method of ['onModel', 'middleware', 'onStoreCreated']) {\n\t\t\tif (plugin[method]) {\n\t\t\t\tresult[method] = plugin[method].bind(this)\n\t\t\t}\n\t\t}\n\t\treturn result\n\t},\n})\n","/**\n * deprecate\n *\n * handles deprecation warnings in development\n */\nexport default (warning: string): void => {\n\tconsole.warn(warning)\n}\n","import * as R from '../typings'\nimport validate from './validate'\n\nconst merge = (original: any, next: any): any => {\n\treturn next ? { ...next, ...(original || {}) } : original || {}\n}\n\nconst isObject = (obj: object): boolean =>\n\tArray.isArray(obj) || typeof obj !== 'object'\n\n/**\n * mergeConfig\n *\n * merge init configs together\n */\nexport default (initConfig: R.InitConfig & { name: string }): R.Config => {\n\tconst config: R.Config = {\n\t\tname: initConfig.name,\n\t\tmodels: {},\n\t\tplugins: [],\n\t\t...initConfig,\n\t\tredux: {\n\t\t\treducers: {},\n\t\t\trootReducers: {},\n\t\t\tenhancers: [],\n\t\t\tmiddlewares: [],\n\t\t\t...initConfig.redux,\n\t\t\tdevtoolOptions: {\n\t\t\t\tname: initConfig.name,\n\t\t\t\t...(initConfig.redux && initConfig.redux.devtoolOptions\n\t\t\t\t\t? initConfig.redux.devtoolOptions\n\t\t\t\t\t: {}),\n\t\t\t},\n\t\t},\n\t}\n\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tvalidate([\n\t\t\t[!Array.isArray(config.plugins), 'init config.plugins must be an array'],\n\t\t\t[isObject(config.models), 'init config.models must be an object'],\n\t\t\t[\n\t\t\t\tisObject(config.redux.reducers),\n\t\t\t\t'init config.redux.reducers must be an object',\n\t\t\t],\n\t\t\t[\n\t\t\t\t!Array.isArray(config.redux.middlewares),\n\t\t\t\t'init config.redux.middlewares must be an array',\n\t\t\t],\n\t\t\t[\n\t\t\t\t!Array.isArray(config.redux.enhancers),\n\t\t\t\t'init config.redux.enhancers must be an array of functions',\n\t\t\t],\n\t\t\t[\n\t\t\t\tconfig.redux.combineReducers &&\n\t\t\t\t\ttypeof config.redux.combineReducers !== 'function',\n\t\t\t\t'init config.redux.combineReducers must be a function',\n\t\t\t],\n\t\t\t[\n\t\t\t\tconfig.redux.createStore &&\n\t\t\t\t\ttypeof config.redux.createStore !== 'function',\n\t\t\t\t'init config.redux.createStore must be a function',\n\t\t\t],\n\t\t])\n\t}\n\n\t// defaults\n\tfor (const plugin of config.plugins) {\n\t\tif (plugin.config) {\n\t\t\t// models\n\t\t\tconst models: R.Models = merge(config.models, plugin.config.models)\n\t\t\tconfig.models = models\n\n\t\t\t// plugins\n\t\t\tconfig.plugins = [...config.plugins, ...(plugin.config.plugins || [])]\n\n\t\t\t// redux\n\t\t\tif (plugin.config.redux) {\n\t\t\t\tconfig.redux.initialState = merge(\n\t\t\t\t\tconfig.redux.initialState,\n\t\t\t\t\tplugin.config.redux.initialState\n\t\t\t\t)\n\t\t\t\tconfig.redux.reducers = merge(\n\t\t\t\t\tconfig.redux.reducers,\n\t\t\t\t\tplugin.config.redux.reducers\n\t\t\t\t)\n\t\t\t\tconfig.redux.rootReducers = merge(\n\t\t\t\t\tconfig.redux.rootReducers,\n\t\t\t\t\tplugin.config.redux.reducers\n\t\t\t\t)\n\t\t\t\tconfig.redux.enhancers = [\n\t\t\t\t\t...config.redux.enhancers,\n\t\t\t\t\t...(plugin.config.redux.enhancers || []),\n\t\t\t\t]\n\t\t\t\tconfig.redux.middlewares = [\n\t\t\t\t\t...config.redux.middlewares,\n\t\t\t\t\t...(plugin.config.redux.middlewares || []),\n\t\t\t\t]\n\t\t\t\tconfig.redux.combineReducers =\n\t\t\t\t\tconfig.redux.combineReducers || plugin.config.redux.combineReducers\n\t\t\t\tconfig.redux.createStore =\n\t\t\t\t\tconfig.redux.createStore || plugin.config.redux.createStore\n\t\t\t}\n\t\t}\n\t}\n\treturn config\n}\n","import Rematch from './rematch'\nimport * as R from './typings'\nimport deprecate from './utils/deprecate'\nimport mergeConfig from './utils/mergeConfig'\n\nexport const getState = () => {\n\tdeprecate(`global getState has been removed in @rematch/core 1.0.0-beta.3.\n\tSee https://github.com/rematch/rematch/blob/master/CHANGELOG.md#100-beta3---2018-06-23 for details.\n\tFor a quick fix, import and use store.getState.`)\n}\n\nexport const dispatch = () => {\n\tdeprecate(`global dispatch has been removed in @rematch/core 1.0.0-beta.3.\n\tSee https://github.com/rematch/rematch/blob/master/CHANGELOG.md#100-beta3---2018-06-23 for details.\n\tFor a quick fix, import and use store.dispatch.`)\n}\n\n/**\n * global createModel\n *\n * creates a model for the given object\n * this is for autocomplete purposes only\n * returns the same object that was received as argument\n */\nexport function createModel<S = any, M extends R.ModelConfig<S> = any>(\n\tmodel: M\n) {\n\treturn model\n}\n\n// incrementer used to provide a store name if none exists\nlet count = 0\n\n/**\n * init\n *\n * generates a Rematch store\n * with a set configuration\n * @param config\n */\nexport const init = (initConfig: R.InitConfig = {}): R.RematchStore => {\n\tconst name = initConfig.name || count.toString()\n\tcount += 1\n\tconst config: R.Config = mergeConfig({ ...initConfig, name })\n\treturn new Rematch(config).init()\n}\n\nexport default {\n\tinit,\n}\n"],"names":["validate","validations","root","dispatchPlugin","exposed","storeDispatch","action","state","console","warn","storeGetState","dispatch","this","createDispatcher","modelName","reducerName","payload","meta","Promise","type","onStoreCreated","store","getState","onModel","model","name","reducers","_a","Object","keys","_i","match","apply","effectsPlugin","effects","effectName","bind","isEffect","middleware","next","self","window","global","module","Function","randomString","Math","random","toString","substring","split","join","result","Symbol","observable","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","createStore","reducer","preloadedState","enhancer","_ref2","arguments","Error","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","subscribe","listener","isSubscribed","push","index","indexOf","splice","obj","proto","getPrototypeOf","isPlainObject","listeners","i","length","replaceReducer","nextReducer","$$observable","_ref","outerSubscribe","observer","TypeError","observeState","unsubscribe","combineReducers","reducerKeys","finalReducers","key","shapeAssertionError","finalReducerKeys","forEach","e","actionType","hasChanged","nextState","_key","previousStateForKey","nextStateForKey","errorMessage","String","bindActionCreator","actionCreator","ownKeys","object","enumerableOnly","getOwnPropertySymbols","filter","sym","getOwnPropertyDescriptor","enumerable","_objectSpread2","target","source","value","defineProperty","configurable","writable","getOwnPropertyDescriptors","defineProperties","compose","_len","funcs","Array","arg","reduce","a","b","applyMiddleware","middlewares","_dispatch","middlewareAPI","chain","map","composeEnhancersWithDevtools","devtoolOptions","disabled","options","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","Redux.compose","actionCreators","boundActionCreators","redux","models","Redux.combineReducers","Redux.createStore","initialState","mergeReducers","nextReducers","_this","createModelReducer","modelBaseReducer","baseReducer","modelReducers","modelReducer","combinedReducer","models_1","createRootReducer","rootReducers","mergedReducers","rootReducerAction","rootReducer","Redux.applyMiddleware","Redux","enhancers","corePlugins","Rematch","method","fn","plugins","plugin","forEachPlugin","getModels","config","addModel","createRedux","call","rematchStore","returned","pluginFactory","create","onInit","_c","_b","concat","warning","merge","original","init","initConfig","count","mergeConfig","deprecate"],"mappings":"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"}