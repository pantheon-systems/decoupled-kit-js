{"version":3,"sources":["../../../../src/steps/ingest-remote-schema/build-queries-from-introspection/build-node-queries.js"],"names":["buildNodeQueries","pluginOptions","QUERY_CACHE_KEY","url","nodeQueries","key","schemaWasChanged","store","getState","remoteSchema","value","dispatch","setState"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,gBAAgB,GAAG,YAAY;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAoB,iCAA1B;AAEA,QAAMC,eAAe,GAAI,GAAED,aAAa,CAACE,GAAI,8BAA7C;AAEA,MAAIC,WAAW,GAAG,MAAM,+BAAmB;AAAEC,IAAAA,GAAG,EAAEH;AAAP,GAAnB,CAAxB;;AAEA,QAAM;AAAEI,IAAAA;AAAF,MAAuBC,eAAMC,QAAN,GAAiBC,YAA9C;;AAEA,MAAIH,gBAAgB,IAAI,CAACF,WAAzB,EAAsC;AACpC;AACAA,IAAAA,WAAW,GAAG,MAAM,kDAApB,CAFoC,CAIpC;;AACA,UAAM,+BAAmB;AAAEC,MAAAA,GAAG,EAAEH,eAAP;AAAwBQ,MAAAA,KAAK,EAAEN;AAA/B,KAAnB,CAAN;AACD,GAfkC,CAgBnC;;;AACAG,iBAAMI,QAAN,CAAeF,YAAf,CAA4BG,QAA5B,CAAqC;AACnCR,IAAAA;AADmC,GAArC;;AAIA,SAAOA,WAAP;AACD,CAtBD","sourcesContent":["import store from \"~/store\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport generateNodeQueriesFromIngestibleFields from \"~/steps/ingest-remote-schema/build-queries-from-introspection/generate-queries-from-ingestable-types\"\nimport { getPersistentCache, setPersistentCache } from \"~/utils/cache\"\n\n/**\n * buildNodeQueries\n *\n * Uses plugin options to introspect the remote GraphQL\n * source, run cache logic, and generate GQL query strings/info\n *\n * @returns {Object} GraphQL query info including gql query strings\n */\nconst buildNodeQueries = async () => {\n  const { pluginOptions } = getGatsbyApi()\n\n  const QUERY_CACHE_KEY = `${pluginOptions.url}--introspection-node-queries`\n\n  let nodeQueries = await getPersistentCache({ key: QUERY_CACHE_KEY })\n\n  const { schemaWasChanged } = store.getState().remoteSchema\n\n  if (schemaWasChanged || !nodeQueries) {\n    // regenerate queries from introspection\n    nodeQueries = await generateNodeQueriesFromIngestibleFields()\n\n    // and cache them\n    await setPersistentCache({ key: QUERY_CACHE_KEY, value: nodeQueries })\n  }\n  // set the queries in our redux store to use later\n  store.dispatch.remoteSchema.setState({\n    nodeQueries,\n  })\n\n  return nodeQueries\n}\n\nexport { buildNodeQueries }\n"],"file":"build-node-queries.js"}