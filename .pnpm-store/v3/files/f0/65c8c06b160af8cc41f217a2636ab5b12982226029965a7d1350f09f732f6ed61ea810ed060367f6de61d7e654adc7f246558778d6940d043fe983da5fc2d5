{"version":3,"sources":["../../../src/utils/jobs/worker-messaging.ts"],"names":["initJobsMessagingInMainProcess","workerPool","onMessage","msg","workerId","type","MESSAGE_TYPES","JOB_CREATED","store","dispatch","internalActions","createJobV2FromInternalJob","payload","then","result","sendMessage","JOB_COMPLETED","id","catch","error","JOB_FAILED","message","deferredWorkerPromises","Map","gatsbyWorkerMessenger","initJobsMessagingInWorker","isWorker","deferredPromise","get","Error","resolve","delete","reject","WorkerError","maybeSendJobToMainProcess","job","deferredWorkerPromise","set","promise","undefined"],"mappings":"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","sourcesContent":["import pDefer from \"p-defer\"\n\nimport {\n  MESSAGE_TYPES,\n  InternalJob,\n  IJobCreatedMessage,\n  WorkerError,\n} from \"./types\"\nimport { store } from \"../../redux\"\nimport { internalActions } from \"../../redux/actions\"\nimport { GatsbyWorkerPool } from \"../worker/types\"\nimport { isWorker, getMessenger } from \"../worker/messaging\"\n\nexport function initJobsMessagingInMainProcess(\n  workerPool: GatsbyWorkerPool\n): void {\n  workerPool.onMessage((msg, workerId) => {\n    if (msg.type === MESSAGE_TYPES.JOB_CREATED) {\n      store\n        .dispatch(internalActions.createJobV2FromInternalJob(msg.payload))\n        .then(result => {\n          workerPool.sendMessage(\n            {\n              type: MESSAGE_TYPES.JOB_COMPLETED,\n              payload: {\n                id: msg.payload.id,\n                result,\n              },\n            },\n            workerId\n          )\n        })\n        .catch(error => {\n          workerPool.sendMessage(\n            {\n              type: MESSAGE_TYPES.JOB_FAILED,\n              payload: {\n                id: msg.payload.id,\n                error: error.message,\n              },\n            },\n            workerId\n          )\n        })\n    }\n  })\n}\n\n/**\n * This map is ONLY used in worker. It's purpose is to keep track of promises returned to plugins\n * when creating jobs (in worker context), so that we can resolve or reject those once main process\n * send back their status.\n */\nconst deferredWorkerPromises = new Map<\n  InternalJob[\"id\"],\n  pDefer.DeferredPromise<Record<string, unknown>>\n>()\nconst gatsbyWorkerMessenger = getMessenger()\nexport function initJobsMessagingInWorker(): void {\n  if (isWorker && gatsbyWorkerMessenger) {\n    gatsbyWorkerMessenger.onMessage(msg => {\n      if (msg.type === MESSAGE_TYPES.JOB_COMPLETED) {\n        const { id, result } = msg.payload\n        const deferredPromise = deferredWorkerPromises.get(id)\n\n        if (!deferredPromise) {\n          throw new Error(\n            `Received message about completed job that wasn't scheduled by this worker`\n          )\n        }\n\n        deferredPromise.resolve(result)\n        deferredWorkerPromises.delete(id)\n      } else if (msg.type === MESSAGE_TYPES.JOB_FAILED) {\n        const { id, error } = msg.payload\n        const deferredPromise = deferredWorkerPromises.get(id)\n\n        if (!deferredPromise) {\n          throw new Error(\n            `Received message about failed job that wasn't scheduled by this worker`\n          )\n        }\n\n        deferredPromise.reject(new WorkerError(error))\n        deferredWorkerPromises.delete(id)\n      }\n    })\n  }\n}\n\n/**\n * Forwards job to main process (if executed in worker context) and returns\n * a promise. Will return `undefined` if called not in worker context.\n */\nexport function maybeSendJobToMainProcess(\n  job: InternalJob\n): Promise<Record<string, unknown>> | undefined {\n  if (isWorker && gatsbyWorkerMessenger) {\n    const deferredWorkerPromise = pDefer<Record<string, unknown>>()\n\n    const msg: IJobCreatedMessage = {\n      type: MESSAGE_TYPES.JOB_CREATED,\n      payload: job,\n    }\n\n    gatsbyWorkerMessenger.sendMessage(msg)\n\n    // holds on to promise\n    deferredWorkerPromises.set(job.id, deferredWorkerPromise)\n\n    return deferredWorkerPromise.promise\n  }\n\n  return undefined\n}\n"],"file":"worker-messaging.js"}