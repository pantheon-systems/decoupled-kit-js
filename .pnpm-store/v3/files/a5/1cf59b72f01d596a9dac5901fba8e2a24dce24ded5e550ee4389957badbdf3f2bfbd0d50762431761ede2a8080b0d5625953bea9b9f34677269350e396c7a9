{"version":3,"sources":["../../../src/state-machines/develop/index.ts"],"names":["RECOMPILE_PANIC_LIMIT","developConfig","id","initial","on","ADD_NODE_MUTATION","actions","SOURCE_FILE_CHANGED","WEBHOOK_RECEIVED","target","QUERY_RUN_REQUESTED","states","initializing","undefined","invoke","src","onDone","onError","initializingData","data","parentSpan","store","webhookBody","shouldRunCreatePagesStatefully","deferNodeMutation","runningPostBootstrap","runningQueries","program","gatsbyNodeGraphQLFunction","graphqlRunner","websocketManager","pendingQueryRuns","cond","nodesMutatedDuringQueryRun","nodesMutatedDuringQueryRunRecompileCount","compiler","sourceFilesDirty","recompiling","entry","startingDevServers","waiting","always","size","EXTRACT_QUERIES_NOW","nodeMutationBatch","runningBatch","reloadingData","webhookSourcePluginName","refresh","recreatingPages","developMachine","services","developServices","buildActions"],"mappings":"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","sourcesContent":["import { MachineConfig, AnyEventObject, forwardTo, Machine } from \"xstate\"\nimport { IDataLayerContext } from \"../data-layer/types\"\nimport { IQueryRunningContext } from \"../query-running/types\"\nimport { IWaitingContext } from \"../waiting/types\"\nimport { buildActions } from \"./actions\"\nimport { developServices } from \"./services\"\nimport { IBuildContext } from \"../../services\"\n\nconst RECOMPILE_PANIC_LIMIT = 6\n\n/**\n * This is the top-level state machine for the `gatsby develop` command\n */\nconst developConfig: MachineConfig<IBuildContext, any, AnyEventObject> = {\n  id: `build`,\n  initial: `initializing`,\n  // These are mutation events, sent to this machine by the mutation listener\n  // in `services/listen-for-mutations.ts`\n  on: {\n    // These are deferred node mutations, mainly `createNode`\n    ADD_NODE_MUTATION: {\n      actions: `addNodeMutation`,\n    },\n    // Sent when webpack or chokidar sees a changed file\n    SOURCE_FILE_CHANGED: {\n      actions: `markSourceFilesDirty`,\n    },\n    // These are calls to the refresh endpoint. Also used by Gatsby Preview.\n    // Saves the webhook body from the event into context, then reloads data\n    WEBHOOK_RECEIVED: {\n      target: `reloadingData`,\n      actions: `assignWebhookBody`,\n    },\n    QUERY_RUN_REQUESTED: {\n      actions: `trackRequestedQueryRun`,\n    },\n  },\n  states: {\n    // Here we handle the initial bootstrap\n    initializing: {\n      on: {\n        // Ignore mutation events because we'll be running everything anyway\n        ADD_NODE_MUTATION: undefined,\n        SOURCE_FILE_CHANGED: undefined,\n        WEBHOOK_RECEIVED: undefined,\n      },\n      invoke: {\n        id: `initialize`,\n        src: `initialize`,\n        onDone: {\n          target: `initializingData`,\n          actions: [`assignStoreAndWorkerPool`, `spawnMutationListener`],\n        },\n        onError: {\n          actions: `panic`,\n        },\n      },\n    },\n    // Sourcing nodes, customising and inferring schema, then running createPages\n    initializingData: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        id: `initialize-data`,\n        src: `initializeData`,\n        data: ({\n          parentSpan,\n          store,\n          webhookBody,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            webhookBody,\n            shouldRunCreatePagesStatefully: true,\n            deferNodeMutation: true,\n          }\n        },\n        onDone: {\n          actions: [\n            `assignServiceResult`,\n            `clearWebhookBody`,\n            `finishParentSpan`,\n          ],\n          target: `runningPostBootstrap`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    runningPostBootstrap: {\n      invoke: {\n        id: `post-bootstrap`,\n        src: `postBootstrap`,\n        onDone: `runningQueries`,\n      },\n    },\n    // Running page and static queries and generating the SSRed HTML and page data\n    runningQueries: {\n      on: {\n        SOURCE_FILE_CHANGED: {\n          actions: [forwardTo(`run-queries`), `markSourceFilesDirty`],\n        },\n        ADD_NODE_MUTATION: {\n          actions: [`markNodesDirty`, `callApi`],\n        },\n        QUERY_RUN_REQUESTED: {\n          actions: forwardTo(`run-queries`),\n        },\n      },\n      invoke: {\n        id: `run-queries`,\n        src: `runQueries`,\n        // This is all the data that we're sending to the child machine\n        data: ({\n          program,\n          store,\n          parentSpan,\n          gatsbyNodeGraphQLFunction,\n          graphqlRunner,\n          websocketManager,\n          pendingQueryRuns,\n        }: IBuildContext): IQueryRunningContext => {\n          return {\n            program,\n            store,\n            parentSpan,\n            gatsbyNodeGraphQLFunction,\n            graphqlRunner,\n            websocketManager,\n            pendingQueryRuns,\n          }\n        },\n        onDone: [\n          {\n            // If we're at the recompile limit and nodes were mutated again then panic\n            target: `waiting`,\n            actions: `panicBecauseOfInfiniteLoop`,\n            cond: ({\n              nodesMutatedDuringQueryRun = false,\n              nodesMutatedDuringQueryRunRecompileCount = 0,\n            }: IBuildContext): boolean =>\n              nodesMutatedDuringQueryRun &&\n              nodesMutatedDuringQueryRunRecompileCount >= RECOMPILE_PANIC_LIMIT,\n          },\n          {\n            // Nodes were mutated while querying, so we need to re-run everything\n            target: `recreatingPages`,\n            cond: ({ nodesMutatedDuringQueryRun }: IBuildContext): boolean =>\n              !!nodesMutatedDuringQueryRun,\n            actions: [\n              `markNodesClean`,\n              `incrementRecompileCount`,\n              `clearPendingQueryRuns`,\n            ],\n          },\n          {\n            // If we have no compiler (i.e. it's first run), then spin up the\n            // webpack and socket.io servers\n            target: `startingDevServers`,\n            actions: [`setQueryRunningFinished`, `clearPendingQueryRuns`],\n            cond: ({ compiler }: IBuildContext): boolean => !compiler,\n          },\n          {\n            // If source files have changed, then recompile the JS bundle\n            target: `recompiling`,\n            cond: ({ sourceFilesDirty }: IBuildContext): boolean =>\n              !!sourceFilesDirty,\n            actions: [`clearPendingQueryRuns`],\n          },\n          {\n            // ...otherwise just wait.\n            target: `waiting`,\n            actions: [`clearPendingQueryRuns`],\n          },\n        ],\n        onError: {\n          actions: [`logError`, `clearPendingQueryRuns`],\n          target: `waiting`,\n        },\n      },\n    },\n    // Recompile the JS bundle\n    recompiling: {\n      // Important: mark source files as clean when recompiling starts\n      // Doing this `onDone` will wipe all file change events that occur **during** recompilation\n      // See https://github.com/gatsbyjs/gatsby/issues/27609\n      entry: [`setRecompiledFiles`, `markSourceFilesClean`],\n      invoke: {\n        src: `recompile`,\n        onDone: {\n          target: `waiting`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Spin up webpack and socket.io\n    startingDevServers: {\n      invoke: {\n        src: `startWebpackServer`,\n        onDone: {\n          target: `waiting`,\n          actions: [\n            `assignServers`,\n            `spawnWebpackListener`,\n            `markSourceFilesClean`,\n          ],\n        },\n        onError: {\n          actions: `panic`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Idle, waiting for events that make us rebuild\n    waiting: {\n      always: [\n        {\n          target: `runningQueries`,\n          cond: ({ pendingQueryRuns }: IBuildContext): boolean =>\n            !!pendingQueryRuns && pendingQueryRuns.size > 0,\n        },\n      ],\n      entry: [`saveDbState`, `resetRecompileCount`],\n      on: {\n        // Forward these events to the child machine, so it can handle batching\n        ADD_NODE_MUTATION: {\n          actions: forwardTo(`waiting`),\n        },\n        SOURCE_FILE_CHANGED: {\n          actions: [forwardTo(`waiting`), `markSourceFilesDirty`],\n        },\n        // This event is sent from the child\n        EXTRACT_QUERIES_NOW: {\n          target: `runningQueries`,\n        },\n      },\n      invoke: {\n        id: `waiting`,\n        src: `waitForMutations`,\n        // Send existing queued mutations to the child machine, which will execute them\n        data: ({\n          store,\n          nodeMutationBatch = [],\n          sourceFilesDirty,\n        }: IBuildContext): IWaitingContext => {\n          return {\n            store,\n            nodeMutationBatch,\n            sourceFilesDirty,\n            runningBatch: [],\n          }\n        },\n        // \"done\" means we need to rebuild\n        onDone: {\n          actions: `assignServiceResult`,\n          target: `recreatingPages`,\n        },\n        onError: {\n          actions: `panic`,\n        },\n      },\n    },\n    // Almost the same as initializing data, but skips various first-run stuff\n    reloadingData: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        src: `reloadData`,\n        data: ({\n          parentSpan,\n          store,\n          webhookBody,\n          webhookSourcePluginName,\n        }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            webhookBody,\n            webhookSourcePluginName,\n            refresh: true,\n            deferNodeMutation: true,\n            shouldRunCreatePagesStatefully: false,\n          }\n        },\n        onDone: {\n          actions: [\n            `assignServiceResult`,\n            `clearWebhookBody`,\n            `finishParentSpan`,\n          ],\n          target: `runningQueries`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n    // Rebuild pages if a node has been mutated outside of sourceNodes\n    recreatingPages: {\n      on: {\n        // We need to run mutations immediately when in this state\n        ADD_NODE_MUTATION: {\n          actions: `callApi`,\n        },\n      },\n      invoke: {\n        id: `recreate-pages`,\n        src: `recreatePages`,\n        data: ({ parentSpan, store }: IBuildContext): IDataLayerContext => {\n          return {\n            parentSpan,\n            store,\n            deferNodeMutation: true,\n            shouldRunCreatePagesStatefully: false,\n          }\n        },\n        onDone: {\n          actions: `assignServiceResult`,\n          target: `runningQueries`,\n        },\n        onError: {\n          actions: `logError`,\n          target: `waiting`,\n        },\n      },\n    },\n  },\n}\n\nexport const developMachine = Machine(developConfig, {\n  services: developServices,\n  actions: buildActions,\n})\n"],"file":"index.js"}