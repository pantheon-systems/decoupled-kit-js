{"version":3,"sources":["../../../../src/steps/source-nodes/create-nodes/create-local-file-node.js"],"names":["getFileNodeMetaBySourceUrl","sourceUrl","fileNodesMetaByUrls","store","getState","imageNodes","nodeMetaByUrl","getMediaItemEditLink","node","helpers","pluginOptions","gatsbyApi","protocol","hostname","url","parse","link","baseUrl","databaseId","parentNode","parentHtmlNode","getNode","id","errorPanicker","error","reporter","fetchState","parentName","editUrl","stepMessage","mediaItemLink","editLink","fileUrl","mediaItemUrl","sharedError","errorString","toString","allow404ImagesInProduction","production","allow404Images","allow401ImagesInProduction","allow401Images","errorCodeIs404","includes","errorCodeIs401","errorCode","process","env","NODE_ENV","shouldBail","log","warn","info","panic","join","console","getFileNodeByMediaItemNode","mediaItemNode","modifiedGmt","existingNodeMeta","internal","type","localFile","failedImageUrls","Set","createLocalFileNode","skipExistingNode","state","existingNode","gatsbyStore","cache","createNodeId","actions","createNode","mimeType","title","fileSize","has","wpUrl","remoteSchema","src","excludeByMimeTypes","maxFileSizeBytes","MediaItem","dispatch","postBuildWarningCounts","incrementMaxFileSizeBytesExceeded","incrementMimeTypeExceeded","hardCachedFileRelativePath","hardCachedMediaFilesDirectory","cwd","hardCachedFilePath","hardCacheMediaFiles","develop","createFileNodeRequirements","parentNodeId","remoteFileNode","buffer","fs","readFile","name","ext","path","extname","e","add","wpUrlHostname","mediaItemHostname","htaccessCredentials","auth","htaccess","shouldUseHtaccessCredentials","htaccess_pass","password","htaccess_user","username","retries","factor","minTimeout","onRetry","pushNodeMeta","ensureDir","dirname","copyFile","absolutePath"],"mappings":"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","sourcesContent":["import fs from \"fs-extra\"\nimport path from \"path\"\nimport url from \"url\"\nimport { bold } from \"chalk\"\n\nimport retry from \"async-retry\"\n\nimport { createFileNodeFromBuffer } from \"gatsby-source-filesystem\"\n\nimport createRemoteFileNode from \"./create-remote-file-node/index\"\n\nimport store from \"~/store\"\n\nimport urlToPath from \"~/utils/url-to-path\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { stripImageSizesFromUrl } from \"~/steps/source-nodes/fetch-nodes/fetch-referenced-media-items\"\nimport { ensureSrcHasHostname } from \"./process-node\"\n\nexport const getFileNodeMetaBySourceUrl = sourceUrl => {\n  const fileNodesMetaByUrls = store.getState().imageNodes.nodeMetaByUrl\n\n  return fileNodesMetaByUrls[stripImageSizesFromUrl(sourceUrl)]\n}\n\nexport const getMediaItemEditLink = node => {\n  const { helpers, pluginOptions } = store.getState().gatsbyApi\n\n  const { protocol, hostname } = url.parse(node?.link || pluginOptions.url)\n  const baseUrl = `${protocol}//${hostname}`\n\n  const databaseId = node.databaseId\n\n  if (!databaseId) {\n    const parentNode = node.parentHtmlNode || helpers.getNode(node.id)\n\n    if (!parentNode?.databaseId) {\n      return null\n    }\n\n    return `${baseUrl}/wp-admin/post.php?post=${parentNode.databaseId}&action=edit`\n  }\n\n  return `${baseUrl}/wp-admin/upload.php?item=${node.databaseId}`\n}\n\nexport const errorPanicker = ({\n  error,\n  reporter,\n  node,\n  fetchState,\n  parentName,\n}) => {\n  const editUrl = getMediaItemEditLink(node)\n\n  const stepMessage = parentName ? ` in step:\\n\\n\"${parentName}\"` : ``\n  const mediaItemLink = node.link ? `\\nMedia item link: ${node.link}` : ``\n  const editLink = `\\nEdit link: ${editUrl || `N/A`}`\n  const fileUrl = `\\nFile url: ${node.mediaItemUrl}`\n\n  const sharedError = `occurred while fetching media item${\n    node.databaseId ? ` #${node.databaseId}` : ``\n  }${stepMessage}\\n${mediaItemLink}${editLink}${fileUrl}`\n\n  const errorString =\n    typeof error === `string` ? error : error && error.toString()\n\n  const { pluginOptions } = store.getState().gatsbyApi\n  const allow404ImagesInProduction = pluginOptions.production.allow404Images\n  const allow401ImagesInProduction = pluginOptions.production.allow401Images\n  const errorCodeIs404 = errorString.includes(`Response code 404`)\n  const errorCodeIs401 = errorString.includes(`Response code 401`)\n  const errorCode = errorCodeIs404 ? `404` : errorCodeIs401 ? `401` : null\n\n  if (\n    (allow404ImagesInProduction ||\n      allow401ImagesInProduction ||\n      process.env.NODE_ENV !== `production`) &&\n    (errorCodeIs404 || errorCodeIs401)\n  ) {\n    fetchState.shouldBail = true\n\n    reporter.log(``)\n    reporter.warn(\n      formatLogMessage(\n        `Error ${sharedError}${\n          !allow404ImagesInProduction || !allow401ImagesInProduction\n            ? `\\n\\nThis error will fail production builds.`\n            : ``\n        }`\n      )\n    )\n    reporter.log(``)\n\n    return\n  }\n\n  if (errorString.includes(`Response code 4`)) {\n    reporter.log(``)\n\n    reporter.info(\n      formatLogMessage(\n        `Unrecoverable error ${sharedError}\\n\\nFailing the build to prevent deploying a broken site.${\n          errorCode\n            ? `\\n\\nIf you don't want ${errorCode}'s to fail your production builds, you can set the following option:\n\n{\n  options: {\n    production: {\n      allow${errorCode}Images: true\n    }\n  }\n}`\n            : ``\n        }`\n      )\n    )\n    reporter.panic(error)\n  } else if (errorString.includes(`Response code 5`)) {\n    reporter.log(``)\n    reporter.info(\n      formatLogMessage(\n        [\n          `Unrecoverable error ${sharedError}`,\n          `\\nYour wordpress host appears to be overloaded by our requests for images`,\n          `\\nIn ${bold(`gatsby-config.js`)}, try lowering the ${bold(\n            `requestConcurrency`\n          )} for MediaItems:`,\n          `\\nplugins: [\n  {\n    resolve: 'gatsby-source-wordpress',\n    options: {\n      url: 'https://mysite.com/graphql',\n      type: {\n        MediaItem: {\n          localFile: {\n            requestConcurrency: 50\n          }\n        }\n      }\n    },\n  }\n]`,\n          `\\nnote that GATSBY_CONCURRENT_REQUEST environment variable has been retired for these options`,\n        ].join(`\\n`)\n      )\n    )\n    reporter.panic(error)\n  } else {\n    console.error(error)\n    reporter.panic()\n  }\n}\n\nexport const getFileNodeByMediaItemNode = async ({\n  mediaItemNode,\n  helpers,\n}) => {\n  const { sourceUrl, modifiedGmt, mediaItemUrl, databaseId } = mediaItemNode\n\n  const fileUrl = sourceUrl || mediaItemUrl\n\n  if (!fileUrl) {\n    helpers.reporter.warn(\n      formatLogMessage(`Couldn't find source url for media item #${databaseId}`)\n    )\n    return null\n  }\n\n  const existingNodeMeta = getFileNodeMetaBySourceUrl(fileUrl)\n\n  if (\n    // if we already have this image\n    existingNodeMeta &&\n    existingNodeMeta.id &&\n    // and it hasn't been modified\n    existingNodeMeta.modifiedGmt === modifiedGmt\n  ) {\n    let node = await helpers.getNode(existingNodeMeta.id)\n\n    // some of the cached node metas don't necessarily need to be a File\n    // so make sure we return a File node if what we get isn't one\n    if (node && node.internal && node.internal.type !== `File`) {\n      if (node.localFile && node.localFile.id) {\n        // look up the corresponding file node\n        node = await helpers.getNode(node.localFile.id)\n      } else {\n        return null\n      }\n    }\n\n    return node\n  }\n\n  return null\n}\n\nconst failedImageUrls = new Set()\n\nexport const createLocalFileNode = async ({\n  mediaItemNode,\n  parentName,\n  skipExistingNode = false,\n}) => {\n  const state = store.getState()\n  const { helpers, pluginOptions } = state.gatsbyApi\n\n  const existingNode = !skipExistingNode\n    ? await getFileNodeByMediaItemNode({\n        mediaItemNode,\n        helpers,\n      })\n    : null\n\n  if (existingNode) {\n    return existingNode\n  }\n\n  const {\n    store: gatsbyStore,\n    cache,\n    createNodeId,\n    reporter,\n    actions: { createNode },\n  } = helpers\n\n  let { mediaItemUrl, modifiedGmt, mimeType, title, fileSize } = mediaItemNode\n\n  if (!mediaItemUrl || failedImageUrls.has(mediaItemUrl)) {\n    return null\n  }\n\n  const { wpUrl } = state.remoteSchema\n  mediaItemUrl = ensureSrcHasHostname({ wpUrl, src: mediaItemUrl })\n\n  const { excludeByMimeTypes, maxFileSizeBytes } =\n    pluginOptions.type?.MediaItem?.localFile\n\n  // if this file is larger than maxFileSizeBytes, don't fetch the remote file\n  if (fileSize > maxFileSizeBytes) {\n    store.dispatch.postBuildWarningCounts.incrementMaxFileSizeBytesExceeded()\n    return null\n  }\n\n  // if this type of file is excluded, don't fetch the remote file\n  if (excludeByMimeTypes.includes(mimeType)) {\n    store.dispatch.postBuildWarningCounts.incrementMimeTypeExceeded()\n    return null\n  }\n\n  const hardCachedFileRelativePath = urlToPath(mediaItemUrl)\n  const hardCachedMediaFilesDirectory = `${process.cwd()}/.wordpress-cache`\n\n  const hardCachedFilePath =\n    hardCachedMediaFilesDirectory + hardCachedFileRelativePath\n\n  const hardCacheMediaFiles =\n    (process.env.NODE_ENV === `development` &&\n      pluginOptions.develop.hardCacheMediaFiles) ||\n    (process.env.NODE_ENV === `production` &&\n      pluginOptions.production.hardCacheMediaFiles)\n\n  const fetchState = {\n    shouldBail: false,\n  }\n\n  const createFileNodeRequirements = {\n    parentNodeId: mediaItemNode.id,\n    store: gatsbyStore,\n    cache,\n    createNode,\n    createNodeId,\n    reporter,\n  }\n\n  let remoteFileNode\n\n  if (hardCacheMediaFiles) {\n    // check for file in .wordpress-cache/wp-content\n    // if it exists, use that to create a node from instead of\n    // fetching from wp\n    try {\n      const buffer = await fs.readFile(hardCachedFilePath)\n      remoteFileNode = await createFileNodeFromBuffer({\n        buffer,\n        name: title,\n        ext: path.extname(mediaItemUrl),\n        ...createFileNodeRequirements,\n      })\n    } catch (e) {\n      // ignore errors, we'll download the image below if it doesn't exist\n    }\n  }\n\n  if (!remoteFileNode) {\n    // Otherwise we need to download it\n    remoteFileNode = await retry(\n      async () => {\n        if (fetchState.shouldBail) {\n          failedImageUrls.add(mediaItemUrl)\n          return null\n        }\n\n        const { hostname: wpUrlHostname } = url.parse(wpUrl)\n        const { hostname: mediaItemHostname } = url.parse(mediaItemUrl)\n\n        const htaccessCredentials = pluginOptions.auth.htaccess\n\n        // if media items are hosted on another url like s3,\n        // using the htaccess creds will throw 400 errors\n        const shouldUseHtaccessCredentials = wpUrlHostname === mediaItemHostname\n\n        const auth =\n          htaccessCredentials && shouldUseHtaccessCredentials\n            ? {\n                htaccess_pass: htaccessCredentials?.password,\n                htaccess_user: htaccessCredentials?.username,\n              }\n            : null\n\n        // if this errors, it's caught one level above in fetch-referenced-media-items.js so it can be placed on the end of the request queue\n        const node = await createRemoteFileNode({\n          url: mediaItemUrl,\n          auth,\n          ...createFileNodeRequirements,\n          pluginOptions,\n        })\n\n        return node\n      },\n      {\n        retries: 3,\n        factor: 1.1,\n        minTimeout: 5000,\n        onRetry: error =>\n          errorPanicker({\n            error,\n            reporter,\n            node: mediaItemNode,\n            fetchState,\n            parentName,\n          }),\n      }\n    )\n  }\n\n  if (!remoteFileNode) {\n    return null\n  }\n\n  // push it's id and url to our store for caching,\n  // so we can touch this node next time\n  // and so we can easily access the id by source url later\n  store.dispatch.imageNodes.pushNodeMeta({\n    id: remoteFileNode.id,\n    sourceUrl: mediaItemUrl,\n    modifiedGmt,\n  })\n\n  if (hardCacheMediaFiles) {\n    try {\n      // make sure the directory exists\n      await fs.ensureDir(path.dirname(hardCachedFilePath))\n      // copy our downloaded file to our existing directory\n      await fs.copyFile(remoteFileNode.absolutePath, hardCachedFilePath)\n    } catch (e) {\n      helpers.reporter.panic(e)\n    }\n  }\n\n  // and use it\n  return remoteFileNode\n}\n"],"file":"create-local-file-node.js"}