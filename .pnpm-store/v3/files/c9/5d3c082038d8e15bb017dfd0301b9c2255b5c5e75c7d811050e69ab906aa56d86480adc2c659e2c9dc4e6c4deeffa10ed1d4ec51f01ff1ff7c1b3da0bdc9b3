{"version":3,"sources":["../../../src/schema/types/built-in-types.ts"],"names":["fileType","siteFunctionType","directoryType","siteType","siteSiteMetadataType","sitePageType","sitePluginType","siteBuildMetadataType","allSdlTypes","overridableBuiltInTypeNames","Set","builtInTypeDefinitions","map","type","builtInScalarTypeNames"],"mappings":";;;;;AAAA;;AAEA;AAEA,MAAMA,QAAQ,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlCA;AAoCA,MAAMC,gBAAgB,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;AAYA,MAAMC,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlCA;AAoCA,MAAMC,QAAQ,GAAI;AAClB;AACA;AACA;AACA;AACA,CALA;AAOA,MAAMC,oBAAoB,GAAI;AAC9B;AACA;AACA;AACA;AACA,CALA;AAOA,MAAMC,YAAY,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;AAYA,MAAMC,cAAc,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;AAcA,MAAMC,qBAAqB,GAAI;AAC/B;AACA;AACA;AACA,CAJA;AAMA,MAAMC,WAAW,GAAG,CAClBR,QADkB,EAElBE,aAFkB,EAGlBC,QAHkB,EAIlBC,oBAJkB,EAKlBH,gBALkB,EAMlBI,YANkB,EAOlBC,cAPkB,EAQlBC,qBARkB,CAApB;AAWO,MAAME,2BAA2B,GAAG,IAAIC,GAAJ,CAAQ,CAAE,kBAAF,CAAR,CAApC;;;AAEA,MAAMC,sBAAsB,GAAG,MACpCH,WAAW,CAACI,GAAZ,CAAgBC,IAAI,IAAI,oBAAMA,IAAN,CAAxB,CADK;;;AAGA,MAAMC,sBAAsB,GAAG,CACnC,SADmC,EAEnC,MAFmC,EAGnC,OAHmC,EAInC,IAJmC,EAKnC,KALmC,EAMnC,MANmC,EAOnC,QAPmC,CAA/B","sourcesContent":["import { parse, DocumentNode } from \"graphql\"\n\n// TODO v5: mark File type as @dontInfer (requires @childOf directive to all children types like ImageSharp)\n\nconst fileType = `\n  type File implements Node @infer {\n    sourceInstanceName: String!\n    absolutePath: String!\n    relativePath: String!\n    extension: String!\n    size: Int!\n    prettySize: String!\n    modifiedTime: Date! @dateformat\n    accessTime: Date! @dateformat\n    changeTime: Date! @dateformat\n    birthTime: Date! @dateformat\n    root: String!\n    dir: String!\n    base: String!\n    ext: String!\n    name: String!\n    relativeDirectory: String!\n    dev: Int!\n    mode: Int!\n    nlink: Int!\n    uid: Int!\n    gid: Int!\n    rdev: Int!\n    ino: Float!\n    atimeMs: Float!\n    mtimeMs: Float!\n    ctimeMs: Float!\n    atime: Date! @dateformat\n    mtime: Date! @dateformat\n    ctime: Date! @dateformat\n    birthtime: Date @deprecated(reason: \"Use \\`birthTime\\` instead\")\n    birthtimeMs: Float @deprecated(reason: \"Use \\`birthTime\\` instead\")\n  }\n`\n\nconst siteFunctionType = `\n  type SiteFunction implements Node @dontInfer {\n    functionRoute: String!\n    pluginName: String!\n    originalAbsoluteFilePath: String!\n    originalRelativeFilePath: String!\n    relativeCompiledFilePath: String!\n    absoluteCompiledFilePath: String!\n    matchPath: String\n  }\n`\n\nconst directoryType = `\n  type Directory implements Node @dontInfer {\n    sourceInstanceName: String!\n    absolutePath: String!\n    relativePath: String!\n    extension: String!\n    size: Int!\n    prettySize: String!\n    modifiedTime: Date! @dateformat\n    accessTime: Date! @dateformat\n    changeTime: Date! @dateformat\n    birthTime: Date! @dateformat\n    root: String!\n    dir: String!\n    base: String!\n    ext: String!\n    name: String!\n    relativeDirectory: String!\n    dev: Int!\n    mode: Int!\n    nlink: Int!\n    uid: Int!\n    gid: Int!\n    rdev: Int!\n    ino: Float!\n    atimeMs: Float!\n    mtimeMs: Float!\n    ctimeMs: Float!\n    atime: Date! @dateformat\n    mtime: Date! @dateformat\n    ctime: Date! @dateformat\n    birthtime: Date @deprecated(reason: \"Use \\`birthTime\\` instead\")\n    birthtimeMs: Float @deprecated(reason: \"Use \\`birthTime\\` instead\")\n  }\n`\n\nconst siteType = `\n  type Site implements Node @infer {\n    buildTime: Date @dateformat\n    siteMetadata: SiteSiteMetadata\n  }\n`\n\nconst siteSiteMetadataType = `\n  type SiteSiteMetadata {\n    title: String\n    description: String\n  }\n`\n\nconst sitePageType = `\n  type SitePage implements Node @dontInfer {\n    path: String!\n    component: String!\n    internalComponentName: String!\n    componentChunkName: String!\n    matchPath: String\n    pageContext: JSON @proxy(from: \"context\")\n    pluginCreator: SitePlugin @link(from: \"pluginCreatorId\")\n  }\n`\n\nconst sitePluginType = `\n  type SitePlugin implements Node @dontInfer {\n    resolve: String\n    name: String\n    version: String\n    nodeAPIs: [String]\n    browserAPIs: [String]\n    ssrAPIs: [String]\n    pluginFilepath: String\n    pluginOptions: JSON\n    packageJson: JSON\n  }\n`\n\nconst siteBuildMetadataType = `\n  type SiteBuildMetadata implements Node @dontInfer {\n    buildTime: Date @dateformat\n  }\n`\n\nconst allSdlTypes = [\n  fileType,\n  directoryType,\n  siteType,\n  siteSiteMetadataType,\n  siteFunctionType,\n  sitePageType,\n  sitePluginType,\n  siteBuildMetadataType,\n]\n\nexport const overridableBuiltInTypeNames = new Set([`SiteSiteMetadata`])\n\nexport const builtInTypeDefinitions = (): Array<DocumentNode> =>\n  allSdlTypes.map(type => parse(type))\n\nexport const builtInScalarTypeNames = [\n  `Boolean`,\n  `Date`,\n  `Float`,\n  `ID`,\n  `Int`,\n  `JSON`,\n  `String`,\n]\n"],"file":"built-in-types.js"}