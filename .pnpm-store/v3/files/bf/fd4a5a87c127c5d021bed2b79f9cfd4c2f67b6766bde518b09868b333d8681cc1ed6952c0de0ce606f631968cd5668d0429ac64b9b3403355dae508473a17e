{"version":3,"sources":["../../../src/utils/babel/babel-module-exports-helpers.ts"],"names":["hasSibling","path","getAllPrevSiblings","getAllNextSiblings","length","removeExportProperties","exportPath","objectPath","propertiesToRemove","i","node","properties","property","type","value","includes","name","propertyPath","get","removed","remove","parentPath"],"mappings":";;;;;;AAGA;AACA;AACA;AACO,SAASA,UAAT,CAAoBC,IAApB,EAA6C;AAClD,SACE,CAAC,GAAGA,IAAI,CAACC,kBAAL,EAAJ,EAA+B,GAAGD,IAAI,CAACE,kBAAL,EAAlC,EAA6DC,MAA7D,KAAwE,CAD1E;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASC,sBAAT,CACLC,UADK,EAELC,UAFK,EAGLC,kBAHK,EAIC;AACN,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACG,IAAX,CAAgBC,UAAhB,CAA2BP,MAA/C,EAAuDK,CAAC,EAAxD,EAA4D;AAC1D,UAAMG,QAAQ,GAAGL,UAAU,CAACG,IAAX,CAAgBC,UAAhB,CAA2BF,CAA3B,CAAjB;;AAEA,QACEG,QAAQ,CAACC,IAAT,KAAmB,gBAAnB,IACAD,QAAQ,CAACE,KAAT,CAAeD,IAAf,KAAyB,YADzB,IAEA,CAACL,kBAAkB,CAACO,QAAnB,CAA4BH,QAAQ,CAACE,KAAT,CAAeE,IAA3C,CAHH,EAIE;AACA;AACD;;AAED,UAAMC,YAAY,GAAGV,UAAU,CAACW,GAAX,CAAgB,cAAaT,CAAE,EAA/B,CAArB;;AAEA,QAAIT,UAAU,CAACiB,YAAD,CAAV,IAA4B,CAACA,YAAY,CAACE,OAA9C,EAAuD;AACrDF,MAAAA,YAAY,CAACG,MAAb;AACA;AACD;;AAED,QAAIpB,UAAU,CAACO,UAAU,CAACc,UAAZ,CAAV,IAAqC,CAACd,UAAU,CAACc,UAAX,CAAsBF,OAAhE,EAAyE;AACvEZ,MAAAA,UAAU,CAACc,UAAX,CAAsBD,MAAtB;AACA;AACD;;AAED,QAAI,CAACd,UAAU,CAACa,OAAhB,EAAyB;AACvBb,MAAAA,UAAU,CAACc,MAAX;AACD;AACF;AACF","sourcesContent":["import { ExportNamedDeclaration, ObjectPattern } from \"@babel/types\"\nimport { NodePath } from \"@babel/core\"\n\n/**\n * Check the node has at least one sibling.\n */\nexport function hasSibling(path: NodePath): boolean {\n  return (\n    [...path.getAllPrevSiblings(), ...path.getAllNextSiblings()].length !== 0\n  )\n}\n\n/**\n * Remove specific properties from a destructured variable named export.\n *\n * If there are no other properties or declarations, the entire export declaration will be removed.\n * If there are other properties, only the matching properties will be removed.\n *\n * Matches exports like these:\n * ```\n * export const { foo } = {} // or `let`/`var`\n * export const { foo, bar: baz } = {} // or `let`/`var`\n * ```\n *\n * This is cheaper than using a nested visitor and traversing upwards to check distance\n * from the export declaration.\n */\nexport function removeExportProperties(\n  exportPath: NodePath<ExportNamedDeclaration>,\n  objectPath: NodePath<ObjectPattern>,\n  propertiesToRemove: Array<string>\n): void {\n  for (let i = 0; i < objectPath.node.properties.length; i++) {\n    const property = objectPath.node.properties[i]\n\n    if (\n      property.type !== `ObjectProperty` ||\n      property.value.type !== `Identifier` ||\n      !propertiesToRemove.includes(property.value.name)\n    ) {\n      continue\n    }\n\n    const propertyPath = objectPath.get(`properties.${i}`) as NodePath\n\n    if (hasSibling(propertyPath) && !propertyPath.removed) {\n      propertyPath.remove()\n      continue\n    }\n\n    if (hasSibling(objectPath.parentPath) && !objectPath.parentPath.removed) {\n      objectPath.parentPath.remove()\n      break\n    }\n\n    if (!exportPath.removed) {\n      exportPath.remove()\n    }\n  }\n}\n"],"file":"babel-module-exports-helpers.js"}