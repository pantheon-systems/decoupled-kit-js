{"version":3,"sources":["../../src/services/run-page-queries.ts"],"names":["ONE_MINUTE","runPageQueries","parentSpan","queryIds","store","program","graphqlRunner","state","getState","pageQueryIds","length","activity","reporter","createProgress","id","process","env","GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING","start","cancelNotice","gatsby_executing_command","GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND","graphqlTracing","done"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAIA;;AAEA,MAAMA,UAAU,GAAG,IAAI,EAAJ,GAAS,IAA5B;;AAEO,eAAeC,cAAf,CAA8B;AACnCC,EAAAA,UADmC;AAEnCC,EAAAA,QAFmC;AAGnCC,EAAAA,KAHmC;AAInCC,EAAAA,OAJmC;AAKnCC,EAAAA;AALmC,CAA9B,EAM0C;AAC/C,gCAAYF,KAAZ;AACA,QAAMG,KAAK,GAAGH,KAAK,CAACI,QAAN,EAAd;;AAEA,MAAI,CAACL,QAAL,EAAe;AACb;AACD;;AAED,QAAM;AAAEM,IAAAA;AAAF,MAAmBN,QAAzB;;AAEA,MAAIM,YAAY,CAACC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B;AACD;;AAED,QAAMC,QAAQ,GAAGC,kBAASC,cAAT,CACd,kBADc,EAEfJ,YAAY,CAACC,MAFE,EAGf,CAHe,EAIf;AACEI,IAAAA,EAAE,EAAG,oBADP;AAEEZ,IAAAA;AAFF,GAJe,CAAjB,CAd+C,CAwB/C;;;AACA,MAAI,CAACa,OAAO,CAACC,GAAR,CAAYC,0CAAjB,EAA6D;AAC3DN,IAAAA,QAAQ,CAACO,KAAT;AACD;;AAED,MAAIC,YAAJ;;AACA,MACEJ,OAAO,CAACC,GAAR,CAAYI,wBAAZ,KAA0C,SAA1C,IACA,CAACL,OAAO,CAACC,GAAR,CAAYK,mCADb,IAEA,CAAC,4BAHH,EAIE;AACAF,IAAAA,YAAY,GAAG,4DACZ,iBADY,EAEZ,6CAFY,EAGZ;AACP;AACA;AACA;AACA;AACA;AACA,CATmB,EAUbnB,UAVa,CAAf;AAYD;;AAED,QAAM,+BAAmBS,YAAnB,EAAiC;AACrCF,IAAAA,KADqC;AAErCI,IAAAA,QAFqC;AAGrCL,IAAAA,aAHqC;AAIrCgB,IAAAA,cAAc,EAAEjB,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEiB;AAJY,GAAjC,CAAN;;AAOA,MAAIH,YAAJ,EAAkB;AAChBA,IAAAA,YAAY;AACb;;AAED,MAAI,CAACJ,OAAO,CAACC,GAAR,CAAYC,0CAAjB,EAA6D;AAC3DN,IAAAA,QAAQ,CAACY,IAAT;AACD;AACF","sourcesContent":["import { processPageQueries } from \"../query\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { IQueryRunningContext } from \"../state-machines/query-running/types\"\nimport { assertStore } from \"../utils/assert-store\"\nimport {\n  showExperimentNoticeAfterTimeout,\n  CancelExperimentNoticeCallbackOrUndefined,\n} from \"../utils/show-experiment-notice\"\nimport { isCI } from \"gatsby-core-utils\"\n\nconst ONE_MINUTE = 1 * 60 * 1000\n\nexport async function runPageQueries({\n  parentSpan,\n  queryIds,\n  store,\n  program,\n  graphqlRunner,\n}: Partial<IQueryRunningContext>): Promise<void> {\n  assertStore(store)\n  const state = store.getState()\n\n  if (!queryIds) {\n    return\n  }\n\n  const { pageQueryIds } = queryIds\n\n  if (pageQueryIds.length === 0) {\n    return\n  }\n\n  const activity = reporter.createProgress(\n    `run page queries`,\n    pageQueryIds.length,\n    0,\n    {\n      id: `page-query-running`,\n      parentSpan,\n    }\n  )\n\n  // TODO: This is hacky, remove with a refactor of PQR itself\n  if (!process.env.GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING) {\n    activity.start()\n  }\n\n  let cancelNotice: CancelExperimentNoticeCallbackOrUndefined\n  if (\n    process.env.gatsby_executing_command === `develop` &&\n    !process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND &&\n    !isCI()\n  ) {\n    cancelNotice = showExperimentNoticeAfterTimeout(\n      `Query On Demand`,\n      `https://gatsby.dev/query-on-demand-feedback`,\n      `which avoids running page queries in development until you visit a page â€” so a lot less upfront work. Here's how to try it:\n\nmodules.exports = {\n  flags: { QUERY_ON_DEMAND: true },\n  plugins: [...]\n}\n`,\n      ONE_MINUTE\n    )\n  }\n\n  await processPageQueries(pageQueryIds, {\n    state,\n    activity,\n    graphqlRunner,\n    graphqlTracing: program?.graphqlTracing,\n  })\n\n  if (cancelNotice) {\n    cancelNotice()\n  }\n\n  if (!process.env.GATSBY_EXPERIMENTAL_PARALLEL_QUERY_RUNNING) {\n    activity.done()\n  }\n}\n"],"file":"run-page-queries.js"}