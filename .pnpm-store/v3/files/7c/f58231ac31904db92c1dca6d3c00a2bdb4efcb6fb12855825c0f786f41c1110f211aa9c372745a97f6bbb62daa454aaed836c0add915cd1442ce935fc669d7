{"version":3,"sources":["../../../src/bootstrap/load-plugins/index.ts"],"names":["loadPlugins","rawConfig","rootDir","config","currentAPIs","browser","browserAPIs","node","nodeAPIs","ssr","ssrAPIs","pluginInfos","pluginArray","x","flattenedPlugins","badExports","store","dispatch","type","payload"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAOA;;AACA;;AACA;;;;;;AAGO,eAAeA,WAAf,CACLC,SADK,EAELC,OAFK,EAG6B;AAClC;AACA,QAAMC,MAAM,GAAG,gCAAgBF,SAAhB,CAAf,CAFkC,CAIlC;;AACA,QAAM,4CAA6BE,MAA7B,EAAqCD,OAArC,CAAN;AAEA,QAAME,WAAW,GAAG,oBAAO;AACzBC,IAAAA,OAAO,EAAEC,WADgB;AAEzBC,IAAAA,IAAI,EAAEC,QAFmB;AAGzBC,IAAAA,GAAG,EAAEC;AAHoB,GAAP,CAApB,CAPkC,CAalC;;AACA,QAAMC,WAAW,GAAG,8CAAoBR,MAApB,EAA4BD,OAA5B,CAApB,CAdkC,CAgBlC;;AACA,QAAMU,WAAW,GAAG,oCAAeD,WAAf,CAApB,CAjBkC,CAmBlC;AACA;;AACA,QAAME,CAAC,GAAG,iCAAkB;AAAET,IAAAA,WAAF;AAAeU,IAAAA,gBAAgB,EAAEF;AAAjC,GAAlB,CAAV,CArBkC,CAuBlC;;AACA,MAAIE,gBAAgB,GAAGD,CAAC,CAACC,gBAAzB;AACA,QAAMC,UAAU,GAAGF,CAAC,CAACE,UAArB,CAzBkC,CA2BlC;;AACA,QAAM,gCAAiB;AAAEX,IAAAA,WAAF;AAAeW,IAAAA;AAAf,GAAjB,CAAN,CA5BkC,CA8BlC;;AACAD,EAAAA,gBAAgB,GAAG,8CAA+B;AAChDA,IAAAA;AADgD,GAA/B,CAAnB,CA/BkC,CAmClC;;AACAE,eAAMC,QAAN,CAAe;AACbC,IAAAA,IAAI,EAAG,4BADM;AAEbC,IAAAA,OAAO,EAAEL;AAFI,GAAf;;AAKA,SAAOA,gBAAP;AACD","sourcesContent":["import { store } from \"../../redux\"\nimport { IGatsbyState } from \"../../redux/types\"\nimport * as nodeAPIs from \"../../utils/api-node-docs\"\nimport * as browserAPIs from \"../../utils/api-browser-docs\"\nimport ssrAPIs from \"../../../cache-dir/api-ssr-docs\"\nimport { loadInternalPlugins } from \"./load-internal-plugins\"\nimport {\n  collatePluginAPIs,\n  handleBadExports,\n  handleMultipleReplaceRenderers,\n  validateConfigPluginsOptions,\n} from \"./validate\"\nimport { IFlattenedPlugin } from \"./types\"\nimport { normalizeConfig } from \"./utils/normalize\"\nimport { getAPI } from \"./utils/get-api\"\nimport { flattenPlugins } from \"./utils/flatten-plugins\"\nimport { IGatsbyConfig } from \"../../internal\"\n\nexport async function loadPlugins(\n  rawConfig: IGatsbyConfig,\n  rootDir: string\n): Promise<Array<IFlattenedPlugin>> {\n  // Turn all strings in plugins: [`...`] into the { resolve: ``, options: {} } form\n  const config = normalizeConfig(rawConfig)\n\n  // Show errors for invalid plugin configuration\n  await validateConfigPluginsOptions(config, rootDir)\n\n  const currentAPIs = getAPI({\n    browser: browserAPIs,\n    node: nodeAPIs,\n    ssr: ssrAPIs,\n  })\n\n  // Collate internal plugins, site config plugins, site default plugins\n  const pluginInfos = loadInternalPlugins(config, rootDir)\n\n  // Create a flattened array of the plugins\n  const pluginArray = flattenPlugins(pluginInfos)\n\n  // Work out which plugins use which APIs, including those which are not\n  // valid Gatsby APIs, aka 'badExports'\n  const x = collatePluginAPIs({ currentAPIs, flattenedPlugins: pluginArray })\n\n  // From this point on, these are fully-resolved plugins.\n  let flattenedPlugins = x.flattenedPlugins\n  const badExports = x.badExports\n\n  // Show errors for any non-Gatsby APIs exported from plugins\n  await handleBadExports({ currentAPIs, badExports })\n\n  // Show errors when ReplaceRenderer has been implemented multiple times\n  flattenedPlugins = handleMultipleReplaceRenderers({\n    flattenedPlugins,\n  })\n\n  // If we get this far, everything looks good. Update the store\n  store.dispatch({\n    type: `SET_SITE_FLATTENED_PLUGINS`,\n    payload: flattenedPlugins as IGatsbyState[\"flattenedPlugins\"],\n  })\n\n  return flattenedPlugins\n}\n"],"file":"index.js"}