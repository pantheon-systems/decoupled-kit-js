{"version":3,"sources":["../../src/query/graphql-runner.ts"],"names":["_rootNodeMap","WeakMap","_trackedRootNodes","WeakSet","GraphQLRunner","constructor","store","collectStats","graphqlTracing","schema","schemaCustomization","getState","nodeModel","LocalNodeModel","schemaComposer","composer","createPageDependency","parseCache","Map","validDocuments","scheduleClearCache","clearCache","bind","stats","totalQueries","uniqueOperations","Set","uniqueQueries","totalRunQuery","totalPluralRunQuery","totalIndexHits","totalSiftHits","totalNonSingleFilters","comparatorsUsed","uniqueFilterPaths","uniqueSorts","clear","parse","query","has","set","get","validate","document","errors","warnings","NoDeprecatedCustomRule","length","add","getStats","comparatorsUsedObj","forEach","value","key","push","comparator","amount","size","context","parentSpan","queryName","componentPath","forceGraphqlTracing","telemetryResolverTimings","statsQuery","body","crypto","createHash","update","digest","err","message","reporter","warn","tracer","GraphQLSpanTracer","tags","start","rootValue","contextValue","customContext","variableValues","end"],"mappings":"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","sourcesContent":["import crypto from \"crypto\"\nimport { Span } from \"opentracing\"\nimport {\n  parse,\n  validate,\n  execute,\n  DocumentNode,\n  GraphQLSchema,\n  Source,\n  GraphQLError,\n  ExecutionResult,\n  NoDeprecatedCustomRule,\n} from \"graphql\"\nimport { debounce } from \"lodash\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { createPageDependency } from \"../redux/actions/add-page-dependency\"\n\nimport withResolverContext from \"../schema/context\"\nimport { LocalNodeModel } from \"../schema/node-model\"\nimport { Store } from \"redux\"\nimport { IGatsbyState } from \"../redux/types\"\nimport { IGraphQLRunnerStatResults, IGraphQLRunnerStats } from \"./types\"\nimport { IGraphQLTelemetryRecord } from \"../schema/type-definitions\"\nimport GraphQLSpanTracer from \"./graphql-span-tracer\"\n\n// Preserve these caches across graphql instances.\nconst _rootNodeMap = new WeakMap()\nconst _trackedRootNodes = new WeakSet()\n\ntype Query = string | Source\n\nexport interface IQueryOptions {\n  parentSpan: Span | undefined\n  queryName: string\n  componentPath?: string | undefined\n  forceGraphqlTracing?: boolean\n  telemetryResolverTimings?: Array<IGraphQLTelemetryRecord>\n}\n\nexport interface IGraphQLRunnerOptions {\n  collectStats?: boolean\n  graphqlTracing?: boolean\n}\n\nexport class GraphQLRunner {\n  parseCache: Map<Query, DocumentNode>\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  nodeModel: any // TODO: convert \"../schema/node-model\" from Flow\n\n  schema: GraphQLSchema\n\n  validDocuments: WeakSet<DocumentNode>\n  scheduleClearCache: () => void\n\n  stats: IGraphQLRunnerStats | null\n  graphqlTracing: boolean\n\n  constructor(\n    protected store: Store<IGatsbyState>,\n    { collectStats, graphqlTracing }: IGraphQLRunnerOptions = {}\n  ) {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    this.nodeModel = new LocalNodeModel({\n      schema,\n      schemaComposer: schemaCustomization.composer,\n      createPageDependency,\n      _rootNodeMap,\n      _trackedRootNodes,\n    })\n    this.schema = schema\n    this.parseCache = new Map()\n    this.validDocuments = new WeakSet()\n    this.scheduleClearCache = debounce(this.clearCache.bind(this), 5000)\n\n    this.graphqlTracing = graphqlTracing || false\n\n    if (collectStats) {\n      this.stats = {\n        totalQueries: 0,\n        uniqueOperations: new Set(),\n        uniqueQueries: new Set(),\n        totalRunQuery: 0,\n        totalPluralRunQuery: 0,\n        totalIndexHits: 0,\n        totalSiftHits: 0,\n        totalNonSingleFilters: 0,\n        comparatorsUsed: new Map(),\n        uniqueFilterPaths: new Set(),\n        uniqueSorts: new Set(),\n      }\n    } else {\n      this.stats = null\n    }\n  }\n\n  clearCache(): void {\n    this.parseCache.clear()\n    this.validDocuments = new WeakSet()\n  }\n\n  parse(query: Query): DocumentNode {\n    if (!this.parseCache.has(query)) {\n      this.parseCache.set(query, parse(query))\n    }\n    return this.parseCache.get(query) as DocumentNode\n  }\n\n  validate(\n    schema: GraphQLSchema,\n    document: DocumentNode\n  ): {\n    errors: ReadonlyArray<GraphQLError>\n    warnings: ReadonlyArray<GraphQLError>\n  } {\n    let errors: ReadonlyArray<GraphQLError> = []\n    let warnings: ReadonlyArray<GraphQLError> = []\n    if (!this.validDocuments.has(document)) {\n      errors = validate(schema, document)\n      warnings = validate(schema, document, [NoDeprecatedCustomRule])\n      if (!errors.length) {\n        this.validDocuments.add(document)\n      }\n    }\n    return { errors, warnings }\n  }\n\n  getStats(): IGraphQLRunnerStatResults | null {\n    if (this.stats) {\n      const comparatorsUsedObj: Array<{\n        comparator: string\n        amount: number\n      }> = []\n      this.stats.comparatorsUsed.forEach((value, key) => {\n        comparatorsUsedObj.push({ comparator: key, amount: value })\n      })\n      return {\n        totalQueries: this.stats.totalQueries,\n        uniqueOperations: this.stats.uniqueOperations.size,\n        uniqueQueries: this.stats.uniqueQueries.size,\n        totalRunQuery: this.stats.totalRunQuery,\n        totalPluralRunQuery: this.stats.totalPluralRunQuery,\n        totalIndexHits: this.stats.totalIndexHits,\n        totalSiftHits: this.stats.totalSiftHits,\n        totalNonSingleFilters: this.stats.totalNonSingleFilters,\n        comparatorsUsed: comparatorsUsedObj,\n        uniqueFilterPaths: this.stats.uniqueFilterPaths.size,\n        uniqueSorts: this.stats.uniqueSorts.size,\n      }\n    } else {\n      return null\n    }\n  }\n\n  async query(\n    query: Query,\n    context: Record<string, unknown>,\n    {\n      parentSpan,\n      queryName,\n      componentPath,\n      forceGraphqlTracing = false,\n      telemetryResolverTimings,\n    }: IQueryOptions\n  ): Promise<ExecutionResult> {\n    const { schema, schemaCustomization } = this.store.getState()\n\n    if (this.schema !== schema) {\n      this.schema = schema\n      this.clearCache()\n    }\n\n    if (this.stats) {\n      this.stats.totalQueries++\n      let statsQuery = query\n      if (typeof statsQuery !== `string`) {\n        statsQuery = statsQuery.body\n      }\n\n      this.stats.uniqueQueries.add(\n        crypto.createHash(`sha1`).update(statsQuery).digest(`hex`)\n      )\n    }\n\n    const document = this.parse(query)\n    const { errors, warnings } = this.validate(schema, document)\n\n    // Queries are usually executed in batch. But after the batch is finished\n    // cache just wastes memory without much benefits.\n    // TODO: consider a better strategy for cache purging/invalidation\n    this.scheduleClearCache()\n\n    if (warnings.length > 0) {\n      // TODO: move those warnings to the caller side, e.g. query-runner.ts\n      warnings.forEach(err => {\n        const message = componentPath ? `\\nQueried in ${componentPath}` : ``\n        reporter.warn(err.message + message)\n      })\n    }\n\n    if (errors.length > 0) {\n      return { errors }\n    }\n\n    let tracer\n    if ((this.graphqlTracing || forceGraphqlTracing) && parentSpan) {\n      tracer = new GraphQLSpanTracer(`GraphQL Query`, {\n        parentSpan,\n        tags: {\n          queryName: queryName,\n        },\n      })\n\n      tracer.start()\n    }\n\n    try {\n      // `execute` will return a promise\n      return await execute({\n        schema,\n        document,\n        rootValue: context,\n        contextValue: withResolverContext({\n          schema,\n          schemaComposer: schemaCustomization.composer,\n          context,\n          customContext: schemaCustomization.context,\n          nodeModel: this.nodeModel,\n          stats: this.stats,\n          tracer,\n          telemetryResolverTimings,\n        }),\n        variableValues: context,\n      })\n    } finally {\n      if (tracer) {\n        tracer.end()\n      }\n    }\n  }\n}\n"],"file":"graphql-runner.js"}