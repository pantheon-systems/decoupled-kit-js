{
  "version": 3,
  "sources": ["../../src/file-resolver-protocol.ts"],
  "sourcesContent": ["/**\n * This file is a copy of the resolver from the `codesandbox-api` package.\n * We wanted to avoid to reference codesandbox-api because of the code that runs on load in the package.\n * The plan is to take some time and refactor codesandbox-api into what it was supposed to be in the first place,\n * an abstraction over the actions that can be dispatched between the bundler and the iframe.\n */\n\nconst generateId = () =>\n  // Such a random ID\n  Math.floor(Math.random() * 1000000 + Math.random() * 1000000);\n\nconst getConstructorName = (x: any) => {\n  try {\n    return x.constructor.name;\n  } catch (e) {\n    return \"\";\n  }\n};\n\nexport default class Protocol {\n  private outgoingMessages: Set<number> = new Set();\n  private internalId: number;\n  private isWorker: boolean;\n\n  constructor(\n    private type: string,\n    private handleMessage: (message: any) => any,\n    private target: Worker | Window\n  ) {\n    this.createConnection();\n    this.internalId = generateId();\n    this.isWorker = getConstructorName(target) === \"Worker\";\n  }\n\n  getTypeId() {\n    return `p-${this.type}`;\n  }\n\n  createConnection() {\n    self.addEventListener(\"message\", this._messageListener);\n  }\n\n  public dispose() {\n    self.removeEventListener(\"message\", this._messageListener);\n  }\n\n  sendMessage<PromiseType>(data: any): Promise<PromiseType> {\n    return new Promise((resolve) => {\n      const messageId = generateId();\n\n      const message = {\n        $originId: this.internalId,\n        $type: this.getTypeId(),\n        $data: data,\n        $id: messageId,\n      };\n\n      this.outgoingMessages.add(messageId);\n\n      const listenFunction = (e: MessageEvent) => {\n        const { data } = e;\n\n        if (\n          data.$type === this.getTypeId() &&\n          data.$id === messageId &&\n          data.$originId !== this.internalId\n        ) {\n          resolve(data.$data);\n\n          self.removeEventListener(\"message\", listenFunction);\n        }\n      };\n\n      self.addEventListener(\"message\", listenFunction);\n\n      this._postMessage(message);\n    });\n  }\n\n  private _messageListener = async (e: MessageEvent) => {\n    const { data } = e;\n\n    if (data.$type !== this.getTypeId()) {\n      return;\n    }\n\n    // We are getting a response to the message\n    if (this.outgoingMessages.has(data.$id)) {\n      return;\n    }\n\n    const result = await this.handleMessage(data.$data);\n\n    const returnMessage = {\n      $originId: this.internalId,\n      $type: this.getTypeId(),\n      $data: result,\n      $id: data.$id,\n    };\n\n    if (e.source) {\n      // @ts-ignore\n      e.source.postMessage(returnMessage, \"*\");\n    } else {\n      this._postMessage(returnMessage);\n    }\n  };\n\n  private _postMessage(m: any) {\n    if (\n      this.isWorker ||\n      // @ts-ignore Unknown to TS\n      (typeof DedicatedWorkerGlobalScope !== \"undefined\" &&\n        // @ts-ignore Unknown to TS\n        this.target instanceof DedicatedWorkerGlobalScope)\n    ) {\n      // @ts-ignore\n      this.target.postMessage(m);\n    } else {\n      (this.target as Window).postMessage(m, \"*\");\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAOA,IAAM,aAAa,MAEjB,KAAK,MAAM,KAAK,WAAW,MAAU,KAAK,WAAW;AAEvD,IAAM,qBAAqB,CAAC,MAAW;AACrC,MAAI;AACF,WAAO,EAAE,YAAY;AAAA,WACd,GAAP;AACA,WAAO;AAAA;AAAA;AAIX,qBAA8B;AAAA,EAK5B,YACU,MACA,eACA,QACR;AAHQ;AACA;AACA;AAPF,4BAAgC,IAAI;AA2DpC,4BAAmB,CAAO,MAAoB;AACpD,YAAM,EAAE,SAAS;AAEjB,UAAI,KAAK,UAAU,KAAK,aAAa;AACnC;AAAA;AAIF,UAAI,KAAK,iBAAiB,IAAI,KAAK,MAAM;AACvC;AAAA;AAGF,YAAM,SAAS,MAAM,KAAK,cAAc,KAAK;AAE7C,YAAM,gBAAgB;AAAA,QACpB,WAAW,KAAK;AAAA,QAChB,OAAO,KAAK;AAAA,QACZ,OAAO;AAAA,QACP,KAAK,KAAK;AAAA;AAGZ,UAAI,EAAE,QAAQ;AAEZ,UAAE,OAAO,YAAY,eAAe;AAAA,aAC/B;AACL,aAAK,aAAa;AAAA;AAAA;AA3EpB,SAAK;AACL,SAAK,aAAa;AAClB,SAAK,WAAW,mBAAmB,YAAY;AAAA;AAAA,EAGjD,YAAY;AACV,WAAO,KAAK,KAAK;AAAA;AAAA,EAGnB,mBAAmB;AACjB,SAAK,iBAAiB,WAAW,KAAK;AAAA;AAAA,EAGjC,UAAU;AACf,SAAK,oBAAoB,WAAW,KAAK;AAAA;AAAA,EAG3C,YAAyB,MAAiC;AACxD,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,YAAM,YAAY;AAElB,YAAM,UAAU;AAAA,QACd,WAAW,KAAK;AAAA,QAChB,OAAO,KAAK;AAAA,QACZ,OAAO;AAAA,QACP,KAAK;AAAA;AAGP,WAAK,iBAAiB,IAAI;AAE1B,YAAM,iBAAiB,CAAC,MAAoB;AAC1C,cAAM,EAAE,gBAAS;AAEjB,YACE,MAAK,UAAU,KAAK,eACpB,MAAK,QAAQ,aACb,MAAK,cAAc,KAAK,YACxB;AACA,kBAAQ,MAAK;AAEb,eAAK,oBAAoB,WAAW;AAAA;AAAA;AAIxC,WAAK,iBAAiB,WAAW;AAEjC,WAAK,aAAa;AAAA;AAAA;AAAA,EAiCd,aAAa,GAAQ;AAC3B,QACE,KAAK,YAEJ,OAAO,+BAA+B,eAErC,KAAK,kBAAkB,4BACzB;AAEA,WAAK,OAAO,YAAY;AAAA,WACnB;AACL,MAAC,KAAK,OAAkB,YAAY,GAAG;AAAA;AAAA;AAAA;",
  "names": []
}
