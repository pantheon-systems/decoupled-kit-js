{"version":3,"sources":["../../../src/datastore/in-memory/indexing.ts"],"names":["nodeIdToIdentifierMap","Map","getGatsbyNodePartial","node","indexFields","resolvedFields","cacheKey","id","internal","counter","derefPartial","undefined","has","get","deref","_","every","map","field","gatsbyNodePartialInternalData","dottedFields","fieldsToStore","Set","sortFieldIds","getSortFieldIdentifierKeys","fullNodeObject","dottedField","partial","Object","assign","set","WeakRef","sortByIds","a","b","postIndexingMetaSetup","filterCache","op","bucket","byValue","sort","postIndexingMetaSetupNeNin","includes","postIndexingMetaSetupLtLteGtGte","arr","meta","nodesUnordered","forEach","v","nodeId","push","entriesNullable","entries","filter","orderedNodes","orderedValues","offsets","length","valuesAsc","nodesByValueAsc","valueRangesAsc","valuesDesc","nodesByValueDesc","valueRangesDesc","ensureIndexByQuery","filterCacheKey","filterPath","nodeTypeNames","filtersCache","state","store","getState","resolvedNodesCache","iterateNodesByType","addNodeToFilterCache","chain","iterateNodes","type","ensureEmptyFilterCache","orderedByCounter","__gatsby_resolved","typeName","resolvedNodes","resolved","valueOffset","i","nextProp","Array","isArray","markNodeForValue","value","ensureIndexByElemMatch","addNodeToBucketWithElemMatch","valueAtCurrentStep","path","nestedQuery","elem","binarySearchAsc","values","needle","min","max","pivot","Math","floor","binarySearchDesc","getNodesFromCacheByValue","filterValue","wasElemMatch","arrNull","arrUndef","unionNodesByCounter","Error","filterValueArr","add","nodes","expensiveDedupeInline","removeBucketFromSet","RegExp","regex","test","String","ranges","range","slice","point","pivotMin","pivotMax","pivotValue","exclPivot","inclPivot","until","reverse","cache","delete","intersectNodesByCounter","pointerA","pointerB","result","maxA","maxB","lastAdded","counterA","counterB","prev","j","dottedFieldKeys","keys","fieldKeys","some","key","startsWith"],"mappings":"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","sourcesContent":["import { store } from \"../../redux\"\nimport { IGatsbyNode } from \"../../redux/types\"\nimport {\n  IDbQueryElemMatch,\n  FilterValue,\n  FilterValueNullable,\n  objectToDottedField,\n} from \"../common/query\"\nimport { getDataStore, getNode } from \"../\"\nimport _ from \"lodash\"\nimport { getValueAt } from \"../../utils/get-value-at\"\n\n// Only list supported ops here. \"CacheableFilterOp\"\nexport type FilterOp =  // TODO: merge with DbComparator ?\n  | \"$eq\"\n  | \"$ne\"\n  | \"$lt\"\n  | \"$lte\"\n  | \"$gt\"\n  | \"$gte\"\n  | \"$in\"\n  | \"$nin\"\n  | \"$regex\" // Note: this includes $glob\n// Note: `undefined` is an encoding for a property that does not exist\n\nexport type FilterCacheKey = string\ntype GatsbyNodeID = string\n\nexport interface IGatsbyNodePartial {\n  id: GatsbyNodeID\n  internal: {\n    counter: number\n  }\n  gatsbyNodePartialInternalData: {\n    indexFields: Set<string>\n  }\n  [k: string]: any\n}\n\nconst nodeIdToIdentifierMap = new Map<\n  GatsbyNodeID,\n  WeakRef<IGatsbyNodePartial>\n>()\n\n/**\n * Grabs an instance of IGatsbyNodePartial for the given node.\n * This accepts an IGatsbyNode or IGatsbyNodePartial as input, which allows\n * us to conditionally store index fields on the partial if we encounter\n * one that hasn't been stored on the partial yet.\n */\nexport const getGatsbyNodePartial = (\n  node: IGatsbyNode | IGatsbyNodePartial,\n  indexFields: Array<string>,\n  resolvedFields: Record<string, any>\n): IGatsbyNodePartial => {\n  // first, check if we have the partial in the cache\n  const cacheKey = `${node.id}_____${node.internal.counter}`\n  let derefPartial: IGatsbyNodePartial | undefined = undefined\n  if (nodeIdToIdentifierMap.has(cacheKey)) {\n    derefPartial = nodeIdToIdentifierMap.get(cacheKey)?.deref()\n\n    // now check if we have it in memory and it has all the fields we need\n    if (\n      derefPartial &&\n      _.every(\n        indexFields.map(field =>\n          derefPartial!.gatsbyNodePartialInternalData.indexFields.has(field)\n        )\n      )\n    ) {\n      return derefPartial\n    }\n  }\n\n  // find all the keys of fields and store them and their values on the partial\n  // if we've already passed this partial, merge both sets of index fields\n  const dottedFields = {}\n  const fieldsToStore = derefPartial\n    ? new Set([\n        ...derefPartial.gatsbyNodePartialInternalData.indexFields,\n        ...indexFields,\n      ])\n    : new Set(indexFields)\n\n  const sortFieldIds = getSortFieldIdentifierKeys(\n    [...fieldsToStore],\n    resolvedFields\n  )\n  let fullNodeObject: IGatsbyNode | undefined =\n    node.gatsbyNodePartialInternalData ? undefined : (node as IGatsbyNode)\n\n  for (const dottedField of sortFieldIds) {\n    if (dottedField in node) {\n      dottedFields[dottedField] = node[dottedField]\n    } else {\n      // if we haven't gotten the full node object, fetch it once\n      if (!fullNodeObject) {\n        fullNodeObject = getNode(node.id)!\n      }\n\n      // use the full node object to fetch the value\n      dottedFields[dottedField] = getValueAt(fullNodeObject, dottedField)\n    }\n  }\n\n  // create the partial object\n  const partial = Object.assign(dottedFields, {\n    id: node.id,\n    internal: {\n      counter: node.internal.counter,\n    },\n    gatsbyNodePartialInternalData: {\n      indexFields: fieldsToStore,\n    },\n  })\n\n  // set the object in the cache for later fetching\n  nodeIdToIdentifierMap.set(cacheKey, new WeakRef<IGatsbyNodePartial>(partial))\n\n  return partial\n}\n\nconst sortByIds = (a: IGatsbyNodePartial, b: IGatsbyNodePartial): number =>\n  a.internal.counter - b.internal.counter\n\nexport interface IFilterCache {\n  op: FilterOp\n  // In this map `undefined` values represent nodes that did not have the path\n  // The individual arrays are ordered asc by internal.counter which will\n  // preserve insertion order and guarantee uniqueness and it's a number so our\n  // .sort() calls can subtract one from the other which is nice :)\n  // This arrays may contain duplicates (!) because those only get filtered in the\n  // last step.\n  // TODO: We might decide to make sure these buckets _are_ deduped for eq perf\n  byValue: Map<FilterValueNullable, Array<IGatsbyNodePartial>>\n  meta: {\n    // Used by ne/nin, which will create a Set from this array and then remove another set(s) and sort\n    nodesUnordered?: Array<IGatsbyNodePartial>\n    // Flat list of all nodes by requested types, ordered by counter (cached for empty filters)\n    orderedByCounter?: Array<IGatsbyNodePartial>\n    // Ordered list of all values (by `<`) found by this filter. No null / undefs\n    valuesAsc?: Array<FilterValue>\n    // Flat list of nodes, ordered by valueAsc\n    nodesByValueAsc?: Array<IGatsbyNodePartial>\n    // Ranges of nodes per value, maps to the nodesByValueAsc array\n    valueRangesAsc?: Map<FilterValue, [number, number]>\n    // Ordered list of all values (by `>`) found by this filter. No null / undefs\n    valuesDesc?: Array<FilterValue>\n    // Flat list of nodes, ordered by valueDesc\n    nodesByValueDesc?: Array<IGatsbyNodePartial>\n    // Ranges of nodes per value, maps to the nodesByValueDesc array\n    valueRangesDesc?: Map<FilterValue, [number, number]>\n  }\n}\nexport type FiltersCache = Map<FilterCacheKey, IFilterCache>\n\nexport function postIndexingMetaSetup(\n  filterCache: IFilterCache,\n  op: FilterOp\n): void {\n  // Loop through byValue and make sure the buckets are sorted by counter\n  // Since we don't do insertion sort, we have to do it afterwards\n  for (const bucket of filterCache.byValue) {\n    bucket[1].sort(sortByIds)\n  }\n\n  if (op === `$ne` || op === `$nin`) {\n    postIndexingMetaSetupNeNin(filterCache)\n  } else if ([`$lt`, `$lte`, `$gt`, `$gte`].includes(op)) {\n    postIndexingMetaSetupLtLteGtGte(filterCache, op)\n  }\n}\n\nfunction postIndexingMetaSetupNeNin(filterCache: IFilterCache): void {\n  // Note: edge cases regarding `null` and `undefined`. Here `undefined` signals\n  // that the property did not exist as the filters do not support actual\n  // `undefined` values.\n  // For $ne, `null` only returns nodes that actually have the property\n  // and in that case the property cannot be `null` either. For any other value,\n  // $ne will return all nodes where the value is not actually the needle,\n  // including nodes where the value is null.\n  // A $nin does the same as an $ne except it filters multiple values instead\n  // of just one.\n  // For `$ne` we will take the list of all targeted nodes and eliminate the\n  // bucket of nodes with a particular value, if it exists at all..\n\n  const arr: Array<IGatsbyNodePartial> = []\n  filterCache.meta.nodesUnordered = arr\n  filterCache.byValue.forEach(v => {\n    v.forEach(nodeId => {\n      arr.push(nodeId)\n    })\n  })\n}\n\nfunction postIndexingMetaSetupLtLteGtGte(\n  filterCache: IFilterCache,\n  op: FilterOp\n): void {\n  // Create an ordered array of individual nodes, ordered (grouped) by the\n  // value to which the filter resolves. Nodes per value are ordered by\n  // internal.counter, asc.\n  // This way non-eq ops can simply slice the array to get a range.\n\n  const entriesNullable: Array<\n    [FilterValueNullable, Array<IGatsbyNodePartial>]\n  > = [...filterCache.byValue.entries()]\n\n  // These range checks never return `null` or `undefined` so filter those out\n  // By filtering them out early, the sort should be faster. Could be ...\n  const entries: Array<[FilterValue, Array<IGatsbyNodePartial>]> =\n    entriesNullable.filter(([v]) => v != null) as Array<\n      [FilterValue, Array<IGatsbyNodePartial>]\n    >\n\n  // Sort all arrays by its value, asc. Ignore/allow potential type casting.\n  // Note: while `<` is the inverse of `>=`, the ordering might coerce values.\n  // This coercion makes the op no longer idempotent (normally the result of\n  // `a < b` is the opposite of `b >= a` for any a or b of the same type). The\n  // exception is a number that is `NaN`, which we're ignoring here as it's most\n  // likely a bug in the user code. However, when coercing the ops may end up\n  // comparing against `NaN`, too. For example: `(\"abc\" <= 12) !== (12 > \"abc\")`\n  // which ends up doing `NaN <= 12` and `NaN > \"abc\"`, which will both yield\n  // false.\n  // So instead we potentially track two ordered lists; ascending and descending\n  // and the only difference when comparing the inverse of one to the other\n  // should be how these `NaN` cases end up getting ordered.\n  // It's fine for `lt` and `lte` to use the same ordered list. Same for gt/gte.\n  if (op === `$lt` || op === `$lte`) {\n    // Order ascending; first value is lowest\n    entries.sort(([a], [b]) => (a < b ? -1 : a > b ? 1 : 0))\n  } else if (op === `$gt` || op === `$gte`) {\n    // Order descending; first value is highest\n    entries.sort(([a], [b]) => (a > b ? -1 : a < b ? 1 : 0))\n  }\n\n  const orderedNodes: Array<IGatsbyNodePartial> = []\n  const orderedValues: Array<FilterValue> = []\n  const offsets: Map<FilterValue, [number, number]> = new Map()\n  entries.forEach(([v, bucket]: [FilterValue, Array<IGatsbyNodePartial>]) => {\n    // Record the range containing all nodes with as filter value v\n    // The last value of the range should be the offset of the next value\n    // (So you should be able to do `nodes.slice(start, stop)` to get them)\n    offsets.set(v, [orderedNodes.length, orderedNodes.length + bucket.length])\n    // We could do `arr.push(...bucket)` here but that's not safe with very\n    // large sets, so we use a regular loop\n    bucket.forEach(node => orderedNodes.push(node))\n    orderedValues.push(v)\n  })\n\n  if (op === `$lt` || op === `$lte`) {\n    filterCache.meta.valuesAsc = orderedValues\n    filterCache.meta.nodesByValueAsc = orderedNodes\n    // The nodesByValueAsc is ordered by value, but multiple nodes per value are\n    // not ordered. To make lt as fast as lte, we must know the start and stop\n    // index for each value. Similarly useful for for `ne`.\n    filterCache.meta.valueRangesAsc = offsets\n  } else if (op === `$gt` || op === `$gte`) {\n    filterCache.meta.valuesDesc = orderedValues\n    filterCache.meta.nodesByValueDesc = orderedNodes\n    // The nodesByValueDesc is ordered by value, but multiple nodes per value are\n    // not ordered. To make gt as fast as gte, we must know the start and stop\n    // index for each value. Similarly useful for for `ne`.\n    filterCache.meta.valueRangesDesc = offsets\n  }\n}\n\n/**\n * Given a single non-elemMatch filter path, a list of node types, and a\n * cache, create a cache that for each resulting value of the filter contains\n * all the Nodes in a list.\n * This cache is used for applying the filter and is a massive improvement over\n * looping over all the nodes, when the number of pages (/nodes) scales up.\n */\nexport const ensureIndexByQuery = (\n  op: FilterOp,\n  filterCacheKey: FilterCacheKey,\n  filterPath: Array<string>,\n  nodeTypeNames: Array<string>,\n  filtersCache: FiltersCache,\n  indexFields: Array<string>,\n  resolvedFields: Record<string, any>\n): void => {\n  const state = store.getState()\n  const resolvedNodesCache = state.resolvedNodesCache\n\n  const filterCache: IFilterCache = {\n    op,\n    byValue: new Map<FilterValueNullable, Array<IGatsbyNodePartial>>(),\n    meta: {},\n  } as IFilterCache\n  filtersCache.set(filterCacheKey, filterCache)\n\n  // We cache the subsets of nodes by type, but only one type. So if searching\n  // through one node type we can prevent a search through all nodes, otherwise\n  // it's probably faster to loop through all nodes. Perhaps. Maybe.\n\n  if (nodeTypeNames.length === 1) {\n    getDataStore()\n      .iterateNodesByType(nodeTypeNames[0])\n      .forEach(node => {\n        addNodeToFilterCache({\n          node,\n          chain: filterPath,\n          filterCache,\n          resolvedNodesCache,\n          indexFields,\n          resolvedFields,\n        })\n      })\n  } else {\n    // Here we must first filter for the node type\n    // This loop is expensive at scale (!)\n    getDataStore()\n      .iterateNodes()\n      .forEach(node => {\n        if (!nodeTypeNames.includes(node.internal.type)) {\n          return\n        }\n\n        addNodeToFilterCache({\n          node,\n          chain: filterPath,\n          filterCache,\n          resolvedNodesCache,\n          indexFields,\n          resolvedFields,\n        })\n      })\n  }\n\n  postIndexingMetaSetup(filterCache, op)\n}\n\nexport function ensureEmptyFilterCache(\n  filterCacheKey,\n  nodeTypeNames: Array<string>,\n  filtersCache: FiltersCache,\n  indexFields: Array<string>,\n  resolvedFields: Record<string, any>\n): void {\n  // This is called for queries without any filters\n  // We want to cache the result since it's basically a list of nodes by type(s)\n  // There are sites that have multiple queries which are empty\n\n  const state = store.getState()\n  const resolvedNodesCache = state.resolvedNodesCache\n  const orderedByCounter: Array<IGatsbyNodePartial> = []\n\n  filtersCache.set(filterCacheKey, {\n    op: `$eq`, // Ignore.\n    byValue: new Map<FilterValueNullable, Array<IGatsbyNodePartial>>(),\n    meta: {\n      orderedByCounter, // This is what we want\n    },\n  })\n\n  if (nodeTypeNames.length === 1) {\n    getDataStore()\n      .iterateNodesByType(nodeTypeNames[0])\n      .forEach(node => {\n        if (!node.__gatsby_resolved) {\n          const typeName = node.internal.type\n          const resolvedNodes = resolvedNodesCache.get(typeName)\n          const resolved = resolvedNodes?.get(node.id)\n          if (resolved !== undefined) {\n            node.__gatsby_resolved = resolved\n          }\n        }\n        orderedByCounter.push(\n          getGatsbyNodePartial(node, indexFields, resolvedFields)\n        )\n      })\n  } else {\n    // Here we must first filter for the node type\n    // This loop is expensive at scale (!)\n    getDataStore()\n      .iterateNodes()\n      .forEach(node => {\n        if (nodeTypeNames.includes(node.internal.type)) {\n          if (!node.__gatsby_resolved) {\n            const typeName = node.internal.type\n            const resolvedNodes = resolvedNodesCache.get(typeName)\n            const resolved = resolvedNodes?.get(node.id)\n            if (resolved !== undefined) {\n              node.__gatsby_resolved = resolved\n            }\n          }\n          orderedByCounter.push(\n            getGatsbyNodePartial(node, indexFields, resolvedFields)\n          )\n        }\n      })\n  }\n\n  // Since each node can only have one type, we shouldn't have to be concerned\n  // about duplicates in this array. Just make sure they're sorted.\n  orderedByCounter.sort(sortByIds)\n}\n\nfunction addNodeToFilterCache({\n  node,\n  chain,\n  filterCache,\n  resolvedNodesCache,\n  indexFields,\n  resolvedFields,\n  valueOffset = node,\n}: {\n  node: IGatsbyNode\n  chain: Array<string>\n  filterCache: IFilterCache\n  resolvedNodesCache: Map<string, any>\n  indexFields: Array<string>\n  resolvedFields: Record<string, any>\n  valueOffset?: any\n}): void {\n  // There can be a filter that targets `__gatsby_resolved` so fix that first\n  if (!node.__gatsby_resolved) {\n    const typeName = node.internal.type\n    const resolvedNodes = resolvedNodesCache.get(typeName)\n    node.__gatsby_resolved = resolvedNodes?.get(node.id)\n  }\n\n  // - for plain query, valueOffset === node\n  // - for elemMatch, valueOffset is sub-tree of the node to continue matching\n  let v = valueOffset as any\n  let i = 0\n  while (i < chain.length && v) {\n    const nextProp = chain[i++]\n    v = v[nextProp]\n  }\n\n  if (\n    (typeof v !== `string` &&\n      typeof v !== `number` &&\n      typeof v !== `boolean` &&\n      v !== null) ||\n    i !== chain.length\n  ) {\n    if (i === chain.length && Array.isArray(v)) {\n      // The op resolved to an array\n      // Add an entry for each element of the array. This would work for ops\n      // like eq and ne, but not sure about range ops like lt,lte,gt,gte.\n\n      v.forEach(v =>\n        markNodeForValue(filterCache, node, v, indexFields, resolvedFields)\n      )\n\n      return\n    }\n\n    // This means that either\n    // - The filter resolved to `undefined`, or\n    // - The filter resolved to something other than a primitive\n    // Set the value to `undefined` to mark \"path does not (fully) exist\"\n    v = undefined\n  }\n\n  markNodeForValue(filterCache, node, v, indexFields, resolvedFields)\n}\n\nfunction markNodeForValue(\n  filterCache: IFilterCache,\n  node: IGatsbyNode,\n  value: FilterValueNullable,\n  indexFields: Array<string>,\n  resolvedFields: Record<string, any>\n): void {\n  let arr = filterCache.byValue.get(value)\n  if (!arr) {\n    arr = []\n    filterCache.byValue.set(value, arr)\n  }\n\n  const partial = getGatsbyNodePartial(node, indexFields, resolvedFields)\n  if (!arr.includes(partial)) {\n    arr.push(partial)\n  }\n}\n\nexport const ensureIndexByElemMatch = (\n  op: FilterOp,\n  filterCacheKey: FilterCacheKey,\n  filter: IDbQueryElemMatch,\n  nodeTypeNames: Array<string>,\n  filtersCache: FiltersCache,\n  indexFields: Array<string>,\n  resolvedFields: Record<string, any>\n): void => {\n  // Given an elemMatch filter, generate the cache that contains all nodes that\n  // matches a given value for that sub-query\n\n  const state = store.getState()\n  const { resolvedNodesCache } = state\n\n  const filterCache: IFilterCache = {\n    op,\n    byValue: new Map<FilterValueNullable, Array<IGatsbyNodePartial>>(),\n    meta: {},\n  } as IFilterCache\n  filtersCache.set(filterCacheKey, filterCache)\n\n  if (nodeTypeNames.length === 1) {\n    getDataStore()\n      .iterateNodesByType(nodeTypeNames[0])\n      .forEach(node => {\n        addNodeToBucketWithElemMatch({\n          node,\n          valueAtCurrentStep: node,\n          filter,\n          filterCache,\n          resolvedNodesCache,\n          indexFields,\n          resolvedFields,\n        })\n      })\n  } else {\n    // Expensive at scale\n    getDataStore()\n      .iterateNodes()\n      .forEach(node => {\n        if (!nodeTypeNames.includes(node.internal.type)) {\n          return\n        }\n\n        addNodeToBucketWithElemMatch({\n          node,\n          valueAtCurrentStep: node,\n          filter,\n          filterCache,\n          resolvedNodesCache,\n          indexFields,\n          resolvedFields,\n        })\n      })\n  }\n\n  postIndexingMetaSetup(filterCache, op)\n}\n\nfunction addNodeToBucketWithElemMatch({\n  node,\n  valueAtCurrentStep, // Arbitrary step on the path inside the node\n  filter,\n  filterCache,\n  resolvedNodesCache,\n  indexFields,\n  resolvedFields,\n}: {\n  node: IGatsbyNode\n  valueAtCurrentStep: any // Arbitrary step on the path inside the node\n  filter: IDbQueryElemMatch\n  filterCache: IFilterCache\n  resolvedNodesCache\n  indexFields: Array<string>\n  resolvedFields: Record<string, any>\n}): void {\n  // There can be a filter that targets `__gatsby_resolved` so fix that first\n  if (!node.__gatsby_resolved) {\n    const typeName = node.internal.type\n    const resolvedNodes = resolvedNodesCache.get(typeName)\n    node.__gatsby_resolved = resolvedNodes?.get(node.id)\n  }\n\n  const { path, nestedQuery } = filter\n\n  // Find the value to apply elemMatch to\n  let i = 0\n  while (i < path.length && valueAtCurrentStep) {\n    const nextProp = path[i++]\n    valueAtCurrentStep = valueAtCurrentStep[nextProp]\n  }\n\n  if (path.length !== i) {\n    // Found undefined before the end of the path\n    return\n  }\n\n  // `v` should now be an elemMatch target, probably an array (but maybe not)\n  if (!Array.isArray(valueAtCurrentStep)) {\n    // It's possible to `elemMatch` on a non-array so let's support that too\n    valueAtCurrentStep = [valueAtCurrentStep]\n  }\n\n  // Note: We need to check all elements because the node may need to be added\n  // to multiple buckets (`{a:[{b:3},{b:4}]}`, for `a.elemMatch.b/eq` that\n  // node ends up in buckets for value 3 and 4. This may lead to duplicate\n  // work when elements resolve to the same value, but that can't be helped.\n  valueAtCurrentStep.forEach(elem => {\n    if (nestedQuery.type === `elemMatch`) {\n      addNodeToBucketWithElemMatch({\n        node,\n        valueAtCurrentStep: elem,\n        filter: nestedQuery,\n        filterCache,\n        resolvedNodesCache,\n        indexFields,\n        resolvedFields,\n      })\n    } else {\n      // Now take same route as non-elemMatch filters would take\n      addNodeToFilterCache({\n        node,\n        chain: nestedQuery.path,\n        filterCache,\n        resolvedNodesCache,\n        indexFields,\n        resolvedFields,\n        valueOffset: elem,\n      })\n    }\n  })\n}\n\nconst binarySearchAsc = (\n  values: Array<FilterValue>, // Assume ordered asc\n  needle: FilterValue\n): [number, number] | undefined => {\n  let min = 0\n  let max = values.length - 1\n  let pivot = Math.floor(values.length / 2)\n  while (min <= max) {\n    const value = values[pivot]\n    if (needle < value) {\n      // Move pivot to middle of nodes left of current pivot\n      // assert pivot < max\n      max = pivot\n    } else if (needle > value) {\n      // Move pivot to middle of nodes right of current pivot\n      // assert pivot > min\n      min = pivot\n    } else {\n      // This means needle === value\n      // TODO: except for NaN ... and potentially certain type casting cases\n      return [pivot, pivot]\n    }\n\n    if (max - min <= 1) {\n      // End of search. Needle not found (as expected). Use pivot as index.\n      // If the needle was not found, max-min==1 and max is returned.\n      return [min, max]\n    }\n\n    pivot = min + Math.floor((max - min) / 2)\n  }\n\n  // Shouldn't be reachable\n  return undefined\n}\nconst binarySearchDesc = (\n  values: Array<FilterValue>, // Assume ordered desc\n  needle: FilterValue\n): [number, number] | undefined => {\n  let min = 0\n  let max = values.length - 1\n  let pivot = Math.floor(values.length / 2)\n  while (min <= max) {\n    const value = values[pivot]\n    if (needle < value) {\n      // Move pivot to middle of nodes right of current pivot\n      // assert pivot < min\n      min = pivot\n    } else if (needle > value) {\n      // Move pivot to middle of nodes left of current pivot\n      // assert pivot > max\n      max = pivot\n    } else {\n      // This means needle === value\n      // TODO: except for NaN ... and potentially certain type casting cases\n      return [pivot, pivot]\n    }\n\n    if (max - min <= 1) {\n      // End of search. Needle not found (as expected). Use pivot as index.\n      // If the needle was not found, max-min==1 and max is returned.\n      return [min, max]\n    }\n\n    pivot = min + Math.floor((max - min) / 2)\n  }\n\n  // Shouldn't be reachable\n  return undefined\n}\n\n/**\n * Given the cache key for a filter and a target value return the list of nodes\n * that resolve to this value. The returned array should be ordered by id.\n * This returns `undefined` if there is no such node\n *\n * Basically if the filter was {a: {b: {slug: {eq: \"foo/bar\"}}}} then it will\n * return all the nodes that have `node.slug === \"foo/bar\"`. That usually (but\n * not always) at most one node for slug, but this filter can apply to anything.\n *\n * Arrays returned by this function must be ordered by internal.counter and\n * not contain duplicate nodes (!)\n */\nexport const getNodesFromCacheByValue = (\n  filterCacheKey: FilterCacheKey,\n  filterValue: FilterValueNullable,\n  filtersCache: FiltersCache,\n  wasElemMatch\n): Array<IGatsbyNodePartial> | undefined => {\n  const filterCache = filtersCache.get(filterCacheKey)\n  if (!filterCache) {\n    return undefined\n  }\n\n  const op = filterCache.op\n\n  if (op === `$eq`) {\n    // Arrays in byValue are assumed to be ordered by counter\n\n    if (filterValue == null) {\n      // Edge case for null; fetch all nodes for `null` and `undefined` because\n      // `$eq` also returns nodes without the path when searching for `null`.\n      // Not all ops do so, so we map non-existing paths to `undefined`.\n\n      const arrNull = filterCache.byValue.get(null) ?? []\n      const arrUndef = filterCache.byValue.get(undefined) ?? []\n\n      // Merge the two (ordered) arrays and return an ordered deduped array\n      // TODO: is there a reason left why we cant just cache this merged list?\n      return unionNodesByCounter(arrNull, arrUndef)\n    }\n\n    return filterCache.byValue.get(filterValue)\n  }\n\n  if (op === `$in`) {\n    if (!Array.isArray(filterValue)) {\n      throw new Error(\"The argument to the `in` comparator should be an array\")\n    }\n    const filterValueArr: Array<FilterValueNullable> = filterValue\n\n    const set: Set<IGatsbyNodePartial> = new Set()\n\n    // TODO: we can also mergeSort for every step. this may perform worse because of how memory in js works.\n    // For every value in the needle array, find the bucket of nodes for\n    // that value, add this bucket of nodes to one list, return the list.\n    filterValueArr.forEach((v: FilterValueNullable) =>\n      filterCache.byValue.get(v)?.forEach(v => set.add(v))\n    )\n\n    const arr = [...set] // this is bad for perf but will guarantee us a unique set :(\n    arr.sort(sortByIds)\n\n    // Note: it's very unlikely that the list of filter values is big so .includes should be fine here\n    if (filterValueArr.includes(null)) {\n      // Like all other ops, `in: [null]` behaves weirdly, allowing all nodes\n      // that do not actually have a (complete) path (v=undefined)\n      const nodes = filterCache.byValue.get(undefined)\n      if (nodes) {\n        // This will also dedupe so don't do that immediately\n        return unionNodesByCounter(nodes, arr)\n      }\n    }\n\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe first\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n\n    return arr\n  }\n\n  if (op === `$nin`) {\n    // This is essentially the same as the $ne operator, just with multiple\n    // values to exclude.\n\n    if (!Array.isArray(filterValue)) {\n      throw new Error(`The $nin operator expects an array as value`)\n    }\n\n    const values: Set<FilterValueNullable> = new Set(filterValue)\n    const set = new Set(filterCache.meta.nodesUnordered)\n\n    // Do the action for \"$ne\" for each element in the set of values\n    values.forEach(filterValue => {\n      removeBucketFromSet(filterValue, filterCache, set)\n    })\n\n    // TODO: there's probably a more efficient algorithm to do set\n    //       subtraction in such a way that we don't have to re-sort\n    return [...set].sort(sortByIds)\n  }\n\n  if (op === `$ne`) {\n    const set = new Set(filterCache.meta.nodesUnordered)\n\n    removeBucketFromSet(filterValue, filterCache, set)\n\n    // TODO: there's probably a more efficient algorithm to do set\n    //       subtraction in such a way that we don't have to resort here\n    return [...set].sort(sortByIds)\n  }\n\n  if (op === `$regex`) {\n    // Note: $glob is converted to $regex so $glob filters go through here, too\n    // Aside from the input pattern format, further behavior is exactly the same.\n\n    // The input to the filter must be a string (including leading/trailing slash and regex flags)\n    // By the time the filter reaches this point, the filterValue has to be a regex.\n\n    if (!(filterValue instanceof RegExp)) {\n      throw new Error(\n        `The value for the $regex comparator must be an instance of RegExp`\n      )\n    }\n    const regex = filterValue\n\n    const arr: Array<IGatsbyNodePartial> = []\n    filterCache.byValue.forEach((nodes, value) => {\n      // TODO: does the value have to be a string for $regex? Can we auto-ignore any non-strings? Or does it coerce.\n      // Note: for legacy reasons partial paths should also be included for regex\n      if (value !== undefined && regex.test(String(value))) {\n        nodes.forEach(node => arr.push(node))\n      }\n    })\n\n    // TODO: we _can_ cache this list as well. Might make sense if it turns out that $regex is mostly used with literals\n    // TODO: it may make sense to first collect all buckets and then to .concat them, or merge sort them\n\n    arr.sort(sortByIds)\n\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n\n    return arr\n  }\n\n  if (filterValue == null) {\n    if (op === `$lt` || op === `$gt`) {\n      // Nothing is lt/gt null\n      return undefined\n    }\n\n    // This is an edge case and this value should be directly indexed\n    // For `lte`/`gte` this should only return nodes for `null`, not a \"range\"\n    return filterCache.byValue.get(filterValue)\n  }\n\n  if (Array.isArray(filterValue)) {\n    throw new Error(\n      \"Array is an invalid filter value for the `\" + op + \"` comparator\"\n    )\n  }\n\n  if (filterValue instanceof RegExp) {\n    // This is most likely an internal error, although it is possible for\n    // users to talk to this API more directly.\n    throw new Error(\n      `A RegExp instance is only valid for $regex and $glob comparators`\n    )\n  }\n\n  if (op === `$lt`) {\n    // First try a direct approach. If a value is queried that also exists then\n    // we can prevent a binary search through the whole list, O(1) vs O(log n)\n\n    const ranges = filterCache.meta.valueRangesAsc\n    const nodes = filterCache.meta.nodesByValueAsc\n\n    const range = ranges!.get(filterValue)\n    if (range) {\n      const arr = nodes!.slice(0, range[0])\n      arr.sort(sortByIds)\n      // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n      if (wasElemMatch) {\n        expensiveDedupeInline(arr)\n      }\n      return arr\n    }\n\n    // Query may ask for a value that doesn't appear in the list, like if the\n    // list is [1, 2, 5, 6] and the query is <= 3. In that case we have to\n    // apply a search (we'll do binary) to determine the offset to slice from.\n\n    // Note: for lte, the valueAsc array must be list at this point\n    const values = filterCache.meta.valuesAsc as Array<FilterValue>\n    // It shouldn't find the targetValue (but it might) and return the index of\n    // the two value between which targetValue sits, or first/last element.\n    const point = binarySearchAsc(values, filterValue)\n    if (!point) {\n      return undefined\n    }\n    const [pivotMin, pivotMax] = point\n\n    // Each pivot index must have a value and a range\n    // The returned min/max index may include the lower/upper bound, so we still\n    // have to do lte checks for both values.\n    let pivotValue = values[pivotMax]\n    if (pivotValue > filterValue) {\n      pivotValue = values[pivotMin]\n    }\n\n    // Note: the pivot value _shouldnt_ match the filter value because that\n    // means the value was actually found, but those should have been indexed\n    // so should have yielded a result in the .get() above.\n\n    const [exclPivot, inclPivot] = ranges!.get(pivotValue) as [number, number]\n\n    // Note: technically, `5 <= \"5\" === true` but `5` would not be cached.\n    // So we have to consider weak comparison and may have to include the pivot\n    const until = pivotValue < filterValue ? inclPivot : exclPivot\n    const arr = nodes!.slice(0, until)\n    arr.sort(sortByIds)\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n    return arr\n  }\n\n  if (op === `$lte`) {\n    // First try a direct approach. If a value is queried that also exists then\n    // we can prevent a binary search through the whole list, O(1) vs O(log n)\n\n    const ranges = filterCache.meta.valueRangesAsc\n    const nodes = filterCache.meta.nodesByValueAsc\n\n    const range = ranges!.get(filterValue)\n    if (range) {\n      const arr = nodes!.slice(0, range[1])\n      arr.sort(sortByIds)\n      // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n      if (wasElemMatch) {\n        expensiveDedupeInline(arr)\n      }\n      return arr\n    }\n\n    // Query may ask for a value that doesn't appear in the list, like if the\n    // list is [1, 2, 5, 6] and the query is <= 3. In that case we have to\n    // apply a search (we'll do binary) to determine the offset to slice from.\n\n    // Note: for lte, the valueAsc array must be list at this point\n    const values = filterCache.meta.valuesAsc as Array<FilterValue>\n    // It shouldn't find the targetValue (but it might) and return the index of\n    // the two value between which targetValue sits, or first/last element.\n    const point = binarySearchAsc(values, filterValue)\n    if (!point) {\n      return undefined\n    }\n    const [pivotMin, pivotMax] = point\n\n    // Each pivot index must have a value and a range\n    // The returned min/max index may include the lower/upper bound, so we still\n    // have to do lte checks for both values.\n    let pivotValue = values[pivotMax]\n    if (pivotValue > filterValue) {\n      pivotValue = values[pivotMin]\n    }\n\n    // Note: the pivot value _shouldnt_ match the filter value because that\n    // means the value was actually found, but those should have been indexed\n    // so should have yielded a result in the .get() above.\n\n    const [exclPivot, inclPivot] = ranges!.get(pivotValue) as [number, number]\n\n    // Note: technically, `5 <= \"5\" === true` but `5` would not be cached.\n    // So we have to consider weak comparison and may have to include the pivot\n    const until = pivotValue <= filterValue ? inclPivot : exclPivot\n    const arr = nodes!.slice(0, until)\n    arr.sort(sortByIds)\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n    return arr\n  }\n\n  if (op === `$gt`) {\n    // First try a direct approach. If a value is queried that also exists then\n    // we can prevent a binary search through the whole list, O(1) vs O(log n)\n\n    const ranges = filterCache.meta.valueRangesDesc\n    const nodes = filterCache.meta.nodesByValueDesc\n\n    const range = ranges!.get(filterValue)\n    if (range) {\n      const arr = nodes!.slice(0, range[0]).reverse()\n      arr.sort(sortByIds)\n      // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n      if (wasElemMatch) {\n        expensiveDedupeInline(arr)\n      }\n      return arr\n    }\n\n    // Query may ask for a value that doesn't appear in the list, like if the\n    // list is [1, 2, 5, 6] and the query is <= 3. In that case we have to\n    // apply a search (we'll do binary) to determine the offset to slice from.\n\n    // Note: for gte, the valueDesc array must be list at this point\n    const values = filterCache.meta.valuesDesc as Array<FilterValue>\n    // It shouldn't find the targetValue (but it might) and return the index of\n    // the two value between which targetValue sits, or first/last element.\n    const point = binarySearchDesc(values, filterValue)\n    if (!point) {\n      return undefined\n    }\n    const [pivotMin, pivotMax] = point\n\n    // Each pivot index must have a value and a range\n    // The returned min/max index may include the lower/upper bound, so we still\n    // have to do gte checks for both values.\n    let pivotValue = values[pivotMax]\n    if (pivotValue < filterValue) {\n      pivotValue = values[pivotMin]\n    }\n\n    // Note: the pivot value _shouldnt_ match the filter value because that\n    // means the value was actually found, but those should have been indexed\n    // so should have yielded a result in the .get() above.\n\n    const [exclPivot, inclPivot] = ranges!.get(pivotValue) as [number, number]\n\n    // Note: technically, `5 >= \"5\" === true` but `5` would not be cached.\n    // So we have to consider weak comparison and may have to include the pivot\n    const until = pivotValue > filterValue ? inclPivot : exclPivot\n    const arr = nodes!.slice(0, until).reverse()\n    arr.sort(sortByIds)\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n    return arr\n  }\n\n  if (op === `$gte`) {\n    // First try a direct approach. If a value is queried that also exists then\n    // we can prevent a binary search through the whole list, O(1) vs O(log n)\n\n    const ranges = filterCache.meta.valueRangesDesc\n    const nodes = filterCache.meta.nodesByValueDesc\n\n    const range = ranges!.get(filterValue)\n    if (range) {\n      const arr = nodes!.slice(0, range[1]).reverse()\n      arr.sort(sortByIds)\n      // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n      if (wasElemMatch) {\n        expensiveDedupeInline(arr)\n      }\n      return arr\n    }\n\n    // Query may ask for a value that doesn't appear in the list, like if the\n    // list is [1, 2, 5, 6] and the query is <= 3. In that case we have to\n    // apply a search (we'll do binary) to determine the offset to slice from.\n\n    // Note: for gte, the valueDesc array must be list at this point\n    const values = filterCache.meta.valuesDesc as Array<FilterValue>\n    // It shouldn't find the targetValue (but it might) and return the index of\n    // the two value between which targetValue sits, or first/last element.\n    const point = binarySearchDesc(values, filterValue)\n    if (!point) {\n      return undefined\n    }\n    const [pivotMin, pivotMax] = point\n\n    // Each pivot index must have a value and a range\n    // The returned min/max index may include the lower/upper bound, so we still\n    // have to do gte checks for both values.\n    let pivotValue = values[pivotMax]\n    if (pivotValue < filterValue) {\n      pivotValue = values[pivotMin]\n    }\n\n    // Note: the pivot value _shouldnt_ match the filter value because that\n    // means the value was actually found, but those should have been indexed\n    // so should have yielded a result in the .get() above.\n\n    const [exclPivot, inclPivot] = ranges!.get(pivotValue) as [number, number]\n\n    // Note: technically, `5 >= \"5\" === true` but `5` would not be cached.\n    // So we have to consider weak comparison and may have to include the pivot\n    const until = pivotValue >= filterValue ? inclPivot : exclPivot\n    const arr = nodes!.slice(0, until).reverse()\n    arr.sort(sortByIds)\n    // elemMatch can cause a node to appear in multiple buckets so we must dedupe\n    if (wasElemMatch) {\n      expensiveDedupeInline(arr)\n    }\n    return arr\n  }\n\n  // Unreachable because we checked all values of FilterOp (which op is)\n  return undefined\n}\n\nfunction removeBucketFromSet(\n  filterValue: FilterValueNullable,\n  filterCache: IFilterCache,\n  set: Set<IGatsbyNodePartial>\n): void {\n  if (filterValue === null) {\n    // Edge case: $ne with `null` returns only the nodes that contain the full\n    // path and that don't resolve to null, so drop `undefined` as well.\n    let cache = filterCache.byValue.get(undefined)\n    if (cache) cache.forEach(node => set.delete(node))\n    cache = filterCache.byValue.get(null)\n    if (cache) cache.forEach(node => set.delete(node))\n  } else {\n    // Not excluding null so it should include undefined leafs or leafs where\n    // only the partial path exists for whatever reason.\n    const cache = filterCache.byValue.get(filterValue)\n    if (cache) cache.forEach(node => set.delete(node))\n  }\n}\n\n/**\n * Finds the intersection of two arrays in O(n) with n = min(a.length, b.length)\n * The returned set should not contain duplicate nodes.\n *\n * The input should be ordered by node.internal.counter and it will return a\n * list that is also ordered by node.internal.counter\n */\nexport function intersectNodesByCounter(\n  a: Array<IGatsbyNodePartial>,\n  b: Array<IGatsbyNodePartial>\n): Array<IGatsbyNodePartial> {\n  let pointerA = 0\n  let pointerB = 0\n  // TODO: perf check: is it helpful to init the array to min(maxA,maxB) items?\n  const result: Array<IGatsbyNodePartial> = []\n  const maxA = a.length\n  const maxB = b.length\n  let lastAdded: IGatsbyNodePartial | undefined = undefined // Used to dedupe the list\n\n  while (pointerA < maxA && pointerB < maxB) {\n    const counterA = a[pointerA].internal.counter\n    const counterB = b[pointerB].internal.counter\n\n    if (counterA < counterB) {\n      pointerA++\n    } else if (counterA > counterB) {\n      pointerB++\n    } else {\n      if (a[pointerA].id !== b[pointerB].id) {\n        throw new Error(\n          `Invariant violation: inconsistent node counters detected`\n        )\n      }\n      // nodeA===nodeB. Make sure we didn't just add this node already.\n      // Since input arrays are sorted, the same node should be grouped\n      // back to back, so even if both input arrays contained the same node\n      // twice, this check would prevent the result from getting duplicate nodes\n      if (lastAdded !== a[pointerA]) {\n        result.push(a[pointerA])\n        lastAdded = a[pointerA]\n      }\n      pointerA++\n      pointerB++\n    }\n  }\n\n  return result\n}\n\n/**\n * Merge two lists of nodes.\n * The returned set should not contain duplicate nodes.\n *\n * The input should be ordered by node.internal.counter and it will return a\n * list that is also ordered by node.internal.counter\n */\nexport function unionNodesByCounter(\n  a: Array<IGatsbyNodePartial>,\n  b: Array<IGatsbyNodePartial>\n): Array<IGatsbyNodePartial> {\n  // TODO: perf check: is it helpful to init the array to max(maxA,maxB) items?\n  const arr: Array<IGatsbyNodePartial> = []\n  let lastAdded: IGatsbyNodePartial | undefined = undefined // Used to dedupe the list\n\n  let pointerA = 0\n  let pointerB = 0\n  const maxA = a.length\n  const maxB = b.length\n\n  while (pointerA < maxA && pointerB < maxB) {\n    const counterA = a[pointerA].internal.counter\n    const counterB = b[pointerB].internal.counter\n\n    if (counterA < counterB) {\n      if (lastAdded !== a[pointerA]) {\n        arr.push(a[pointerA])\n        lastAdded = a[pointerA]\n      }\n      pointerA++\n    } else if (counterA > counterB) {\n      if (lastAdded !== b[pointerB]) {\n        arr.push(b[pointerB])\n        lastAdded = b[pointerB]\n      }\n      pointerB++\n    } else {\n      if (lastAdded !== a[pointerA]) {\n        arr.push(a[pointerA])\n        lastAdded = a[pointerA]\n      }\n      pointerA++\n      pointerB++\n    }\n  }\n\n  while (pointerA < maxA) {\n    if (lastAdded !== a[pointerA]) {\n      arr.push(a[pointerA])\n      lastAdded = a[pointerA]\n    }\n    pointerA++\n  }\n\n  while (pointerB < maxB) {\n    if (lastAdded !== b[pointerB]) {\n      arr.push(b[pointerB])\n      lastAdded = b[pointerB]\n    }\n    pointerB++\n  }\n\n  return arr\n}\n\nfunction expensiveDedupeInline(arr: Array<IGatsbyNodePartial>): void {\n  // An elemMatch filter may cause duplicates to appear in a bucket.\n  // Since the bucket is sorted those should now be back to back\n  // Worst case this is a fast O(n) loop that does nothing.\n  let prev: IGatsbyNodePartial | undefined = undefined\n\n  // We copy-on-find because a splice is expensive and we can't use Sets\n\n  let j = 0\n  for (let i = 0; i < arr.length; ++i) {\n    const node = arr[i]\n    if (node !== prev) {\n      // Only start copying the remainder of the list once a dupe is found\n      if (i !== j) {\n        arr[j] = node\n      }\n      ++j\n      prev = node\n    }\n  }\n  arr.length = j\n}\n\nexport function getSortFieldIdentifierKeys(\n  indexFields: Array<string>,\n  resolvedFields: Record<string, any>\n): Array<string> {\n  const dottedFields = objectToDottedField(resolvedFields)\n  const dottedFieldKeys = Object.keys(dottedFields)\n  const fieldKeys = indexFields.map(field => {\n    if (\n      dottedFields[field] ||\n      dottedFieldKeys.some(key => field.startsWith(key))\n    ) {\n      return `__gatsby_resolved.${field}`\n    } else {\n      return field\n    }\n  })\n\n  return fieldKeys\n}\n"],"file":"indexing.js"}