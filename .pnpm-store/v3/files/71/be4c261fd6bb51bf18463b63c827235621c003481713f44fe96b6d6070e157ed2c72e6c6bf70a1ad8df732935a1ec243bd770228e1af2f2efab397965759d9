{"version":3,"sources":["../../src/utils/batcher.ts"],"names":["Batcher","queue","callbacks","bulkCallbacks","constructor","threshold","add","args","push","length","flush","forEach","callback","call","bulkCall"],"mappings":";;;;;AAAe,MAAMA,OAAN,CAA6D;AAClEC,EAAAA,KAAK,GAAgC,EAAhC;AACLC,EAAAA,SAAS,GAAmD,EAAnD;AACTC,EAAAA,aAAa,GAAuD,EAAvD;;AAErBC,EAAAA,WAAW,CAASC,SAAT,EAA4B;AAAA,SAAnBA,SAAmB,GAAnBA,SAAmB;AAAE;AAEzC;;;AACAC,EAAAA,GAAG,CAAC,GAAGC,IAAJ,EAAsC;AACvC,SAAKN,KAAL,CAAWO,IAAX,CAAgBD,IAAhB;;AAEA,QAAI,KAAKN,KAAL,CAAWQ,MAAX,IAAqB,KAAKJ,SAA9B,EAAyC;AACvC,WAAKK,KAAL;AACD;AACF;AAED;;;AACAA,EAAAA,KAAK,GAAS;AACZ;AACA,SAAKT,KAAL,CAAWU,OAAX,CAAmBJ,IAAI,IACrB,KAAKL,SAAL,CAAeS,OAAf,CAAuBC,QAAQ,IAAIA,QAAQ,CAAC,GAAGL,IAAJ,CAA3C,CADF,EAFY,CAMZ;;AACA,SAAKJ,aAAL,CAAmBQ,OAAnB,CAA2BC,QAAQ,IAAI;AACrCA,MAAAA,QAAQ,CAAC,KAAKX,KAAN,CAAR;AACD,KAFD,EAPY,CAWZ;;AACA,SAAKA,KAAL,GAAa,EAAb;AACD;AAED;;;AACAY,EAAAA,IAAI,CAACD,QAAD,EAA0D;AAC5D,SAAKV,SAAL,CAAeM,IAAf,CAAoBI,QAApB;AACD;AAED;;;AACAE,EAAAA,QAAQ,CAACF,QAAD,EAA8D;AACpE,SAAKT,aAAL,CAAmBK,IAAnB,CAAwBI,QAAxB;AACD;;AAxCyE","sourcesContent":["export default class Batcher<Callback extends (...args: Array<any>) => any> {\n  private queue: Array<Parameters<Callback>> = []\n  private callbacks: Array<(...args: Parameters<Callback>) => void> = []\n  private bulkCallbacks: Array<(args: Array<Parameters<Callback>>) => void> = []\n\n  constructor(private threshold: number) {}\n\n  /** Add a call to the batcher */\n  add(...args: Parameters<Callback>): void {\n    this.queue.push(args)\n\n    if (this.queue.length >= this.threshold) {\n      this.flush()\n    }\n  }\n\n  /** Call all of our callbacks and clear out the queue */\n  flush(): void {\n    // call each callback for each item in the queue\n    this.queue.forEach(args =>\n      this.callbacks.forEach(callback => callback(...args))\n    )\n\n    // pass the entire queue to all bulk callbacks\n    this.bulkCallbacks.forEach(callback => {\n      callback(this.queue)\n    })\n\n    // clear out the queue\n    this.queue = []\n  }\n\n  /** Sets up a callback for each batcher item */\n  call(callback: (...args: Parameters<Callback>) => void): void {\n    this.callbacks.push(callback)\n  }\n\n  /** Sets up a bulk callback that takes the entire queue */\n  bulkCall(callback: (args: Array<Parameters<Callback>>) => void): void {\n    this.bulkCallbacks.push(callback)\n  }\n}\n"],"file":"batcher.js"}