{"version":3,"file":"bundle.umd.js","sources":["../src/utils.ts","../src/jsonApiTransformer.ts","../src/global.ts","../src/jsonApiLink.ts"],"sourcesContent":["/**\n * Adapted from apollo-link-state/utils.ts\n */\nimport { DocumentNode, DirectiveNode } from 'graphql';\n\nimport { checkDocument, removeDirectivesFromDocument } from 'apollo-utilities';\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => directive.name.value === 'jsonapi',\n  remove: true,\n};\n\nconst removed = new Map();\nexport function removeRestSetsFromDocument(query: DocumentNode): DocumentNode {\n  const cached = removed.get(query);\n  if (cached) return cached;\n\n  checkDocument(query);\n\n  const docClone = removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    query,\n  );\n\n  removed.set(query, docClone);\n  return docClone;\n}\n\nexport const mapObject = (obj, fn) =>\n  Object.entries(obj)\n    .map(fn)\n    .reduce((acc, [k, v]) => {\n      acc[k] = v;\n      return acc;\n    }, {});\n\nexport const mapObjectValues = (obj, fn) =>\n  mapObject(obj, ([k, v]) => [k, fn(v)]);\n\nexport const identity = v => v;\n","import { mapObjectValues, identity } from './utils';\nimport { JsonApiLink } from './jsonApiLink';\n\ninterface ResourceIdentifier {\n  id: string;\n  type: string;\n}\n\ntype RelationshipData = ResourceIdentifier | Array<ResourceIdentifier>;\n\ninterface LinkObject {\n  href?: string;\n  meta?: object;\n}\n\ntype Link = string | LinkObject;\n\ninterface Links {\n  [key: string]: Link;\n}\n\ninterface RelationshipInfo {\n  links?: Links;\n  data?: RelationshipData;\n  meta?: object;\n}\n\ninterface Relationships {\n  [relationshipName: string]: RelationshipInfo;\n}\n\ninterface Resource {\n  id: string;\n  type: string;\n  attributes?: object;\n  links?: Links;\n  meta?: object;\n  relationships?: Relationships;\n  __relationships_denormalizing?: boolean;\n}\n\ninterface JsonApiBody {\n  data?: Resource | Array<Resource>;\n  included?: Array<Resource> | undefined;\n  meta?: object;\n  errors?: Array<Error>;\n  links?: Links;\n  jsonapi?: object;\n\n  __jsonapi_full_response?: JsonApiBody;\n  __typename?: string;\n}\n\nconst flattenResource = ({\n  attributes,\n  relationships,\n  links,\n  ...restResource\n}: Resource) => {\n  if (!relationships) {\n    return {\n      ...restResource,\n      ...attributes,\n    };\n  }\n  const flattenedRelationships = mapObjectValues(\n    relationships,\n    related =>\n      related && related.data && applyToData(flattenResource)(related).data,\n  );\n  return {\n    ...restResource,\n    ...attributes,\n    ...flattenedRelationships,\n  };\n};\n\nconst findResource = (\n  { id, type }: ResourceIdentifier,\n  resources: Array<Resource>,\n) =>\n  resources.find(\n    ({ id: resourceId, type: resourceType }) =>\n      id === resourceId && type === resourceType,\n  );\n\nconst _denormalizeRelationships = (\n  data: Resource,\n  allResources: Array<Resource>,\n) => {\n  if (!data || !data.relationships || data.__relationships_denormalizing) {\n    return data;\n  }\n  data.__relationships_denormalizing = true;\n\n  const relationships = mapObjectValues(\n    data.relationships,\n    related =>\n      related &&\n      related.data &&\n      applyToData(item =>\n        _denormalizeRelationships(\n          findResource(item, allResources) || item,\n          allResources,\n        ),\n      )(related),\n  );\n  return { ...data, relationships };\n};\n\nconst denormalizeRelationships = (data: Resource, { included = [] }) => {\n  return _denormalizeRelationships(data, [data, ...included]);\n};\n\nconst applyToData = fn => ({ data, ...rest }: JsonApiBody) => {\n  if (Array.isArray(data)) {\n    return { data: data.map(obj => fn(obj, rest)), ...rest };\n  }\n  return { data: fn(data, rest), ...rest };\n};\n\nconst applyToIncluded = fn => ({ included, ...rest }: JsonApiBody) => {\n  if (!included) {\n    return rest;\n  }\n  return { included: included.map(obj => fn(obj, rest)), ...rest };\n};\n\nconst applyToJsonapiFullResponse = fn => ({\n  __jsonapi_full_response,\n  ...rest\n}: JsonApiBody) =>\n  __jsonapi_full_response\n    ? { __jsonapi_full_response: fn(__jsonapi_full_response), ...rest }\n    : (rest as JsonApiBody);\n\nconst applyNormalizer = (normalizer: JsonApiLink.TypeNameNormalizer) => (\n  resource: Resource,\n) => ({\n  __typename: normalizer(resource.type),\n  ...resource,\n});\n\nconst typeFor = (data: Resource | Array<Resource>) =>\n  Array.isArray(data) ? data[0] && data[0].type : data.type;\n\nconst typenameNamespacer = (prefix, normalizer) => {\n  const resourceTypenameNamespacer = ({\n    attributes,\n    relationships,\n    meta,\n    links,\n    ...resource\n  }: Resource) => {\n    const __typename = normalizer(`${prefix}${resource.type}`);\n    return {\n      ...resource,\n      __typename,\n      attributes: attributes && {\n        ...attributes,\n        __typename: normalizer(`${__typename}_attributes`),\n      },\n      relationships: relationships && {\n        ...mapObjectValues(\n          relationships,\n          related =>\n            related &&\n            related.data &&\n            applyToData(resourceTypenameNamespacer)(related),\n        ),\n        __typename: normalizer(`${__typename}_relationships`),\n      },\n      meta: meta && {\n        ...meta,\n        __typename: normalizer(`${__typename}_meta`),\n      },\n      links: links && {\n        ...links,\n        __typename: normalizer(`${__typename}_links`),\n      },\n    };\n  };\n\n  const bodyTypenameNamespacer = body => {\n    const type = typeFor(body.data) || 'unknown';\n    return {\n      data:\n        body.data &&\n        (Array.isArray(body.data)\n          ? body.data.map(resourceTypenameNamespacer)\n          : resourceTypenameNamespacer(body.data)),\n      meta: body.meta && {\n        ...body.meta,\n        __typename: normalizer(`${prefix}${type}_body_meta`),\n      },\n      links: body.links && {\n        ...body.links,\n        __typename: normalizer(`${prefix}${type}_body_links`),\n      },\n      included: body.included\n        ? body.included.map(resourceTypenameNamespacer)\n        : body.included,\n      __typename: normalizer(`${prefix}${type}_body`),\n    };\n  };\n\n  return bodyTypenameNamespacer;\n};\n\nconst preserveBody = normalizer => async (body: JsonApiBody) => {\n  const __jsonapi_full_response = typenameNamespacer(\n    'jsonapi_full_response_',\n    normalizer,\n  )(body);\n  return {\n    ...body,\n    __typename: normalizer(`${__jsonapi_full_response.__typename}_wrapper`),\n    __jsonapi_full_response,\n  } as JsonApiBody;\n};\n\nconst jsonapiResponseTransformer = async (\n  response: Response,\n  typeNameNormalizer: JsonApiLink.TypeNameNormalizer,\n  includeJsonapi: boolean,\n) =>\n  response\n    .json()\n    .then(applyToIncluded(applyNormalizer(typeNameNormalizer)))\n    .then(applyToData(applyNormalizer(typeNameNormalizer)))\n    .then(includeJsonapi ? preserveBody(typeNameNormalizer) : identity)\n    .then(applyToData(denormalizeRelationships))\n    .then(applyToData(flattenResource))\n    .then(applyToJsonapiFullResponse(applyToIncluded(denormalizeRelationships)))\n    .then(applyToJsonapiFullResponse(applyToData(denormalizeRelationships)))\n    .then(({ data, __jsonapi_full_response, __typename }) =>\n      includeJsonapi\n        ? { graphql: data, jsonapi: __jsonapi_full_response, __typename }\n        : data,\n    );\n\nexport default jsonapiResponseTransformer;\n","let global;\n\nif (typeof global !== 'undefined') {\n  global = global;\n} else if (typeof window !== 'undefined') {\n  global = window;\n} else if (typeof self !== 'undefined') {\n  global = self;\n} else {\n  global = {};\n}\n\nexport default global;\n","import {\n  OperationTypeNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  // Query Nodes\n  DirectiveNode,\n  FieldNode,\n  SelectionSetNode,\n} from 'graphql';\nimport {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  FetchResult,\n} from 'apollo-link';\nimport {\n  hasDirectives,\n  getMainDefinition,\n  getFragmentDefinitions,\n  createFragmentMap,\n  addTypenameToDocument,\n  FragmentMap,\n  isField,\n  isInlineFragment,\n  resultKeyNameFromField,\n} from 'apollo-utilities';\nimport jsonApiTransformer from './jsonApiTransformer';\nimport global from './global';\n\nimport { graphql } from 'graphql-anywhere/lib/async';\nimport { Resolver, ExecInfo } from 'graphql-anywhere';\n\nimport * as qs from 'qs';\nimport { removeRestSetsFromDocument, identity } from './utils';\n\nexport namespace JsonApiLink {\n  export type URI = string;\n\n  export type Endpoint = string;\n\n  export interface EndpointOptions {\n    uri: Endpoint;\n  }\n\n  export interface Endpoints {\n    [endpointKey: string]: Endpoint | EndpointOptions;\n  }\n\n  export type Header = string;\n  export interface HeadersHash {\n    [headerKey: string]: Header;\n  }\n  export type InitializationHeaders = HeadersHash | Headers | string[][];\n\n  export type HeadersMergePolicy = (...headerGroups: Headers[]) => Headers;\n\n  export interface TypeNameNormalizer {\n    (typeName: string): string;\n  }\n\n  export interface FieldNameNormalizer {\n    (fieldName: string, keypath?: string[]): string;\n  }\n\n  export interface SerializedBody {\n    body: any;\n    headers: InitializationHeaders;\n  }\n\n  export interface Serializer {\n    (data: any, headers: Headers): SerializedBody;\n  }\n\n  export interface Serializers {\n    [bodySerializer: string]: Serializer;\n  }\n\n  export type CustomFetch = (\n    request: RequestInfo,\n    init: RequestInit,\n  ) => Promise<Response>;\n\n  export interface JsonApiLinkHelperProps {\n    /** Arguments passed in via normal graphql parameters */\n    args: { [key: string]: any };\n    /** Arguments added via @export(as: ) directives */\n    exportVariables: { [key: string]: any };\n    /** Arguments passed directly to @jsonapi(params: ) */\n    // params: { [key: string]: any };\n    /** Apollo Context */\n    context: { [key: string]: any };\n    /** All arguments passed to the `@jsonapi(...)` directive */\n    '@jsonapi': { [key: string]: any };\n  }\n  export interface PathBuilderProps extends JsonApiLinkHelperProps {\n    replacer: (opts: JsonApiLinkHelperProps) => string;\n  }\n\n  /**\n   * Used for any Error from the server when requests:\n   * - terminate with HTTP Status >= 300\n   * - and the response contains no data or errors\n   */\n  export type ServerError = Error & {\n    response: Response;\n    result: any;\n    statusCode: number;\n  };\n\n  export type Options = {\n    /**\n     * The URI to use when fetching operations.\n     *\n     * Optional if endpoints provides a default.\n     */\n    uri?: URI;\n\n    /**\n     * A root endpoint (uri) to apply paths to or a map of endpoints.\n     */\n    endpoints?: Endpoints;\n\n    /**\n     * An object representing values to be sent as headers on the request.\n     */\n    headers?: InitializationHeaders;\n\n    /**\n     * A function that takes the JSON API `type` and converts it to a GraphQL compliant `__typename`\n     */\n    typeNameNormalizer?: TypeNameNormalizer;\n\n    /**\n     * A function that takes the response field name and converts it into a GraphQL compliant name\n     *\n     */\n    fieldNameNormalizer?: FieldNameNormalizer;\n\n    /**\n     * A function that takes a GraphQL-compliant field name and converts it back into an endpoint-specific name\n     * Can be overridden at the mutation-call-site (in the rest-directive).\n     */\n    fieldNameDenormalizer?: FieldNameNormalizer;\n\n    /**\n     * The credentials policy you want to use for the fetch call.\n     */\n    credentials?: RequestCredentials;\n\n    /**\n     * Use a custom fetch to handle REST calls.\n     */\n    customFetch?: CustomFetch;\n\n    /**\n     * Add serializers that will serialize the body before it is emitted and will pass on\n     * headers to update the request.\n     */\n    bodySerializers?: Serializers;\n\n    /**\n     * Set the default serializer for the link\n     * @default JSON serialization\n     */\n    defaultSerializer?: Serializer;\n  };\n\n  /** @jsonapi(...) Directive Options */\n  export interface DirectiveOptions {\n    /**\n     * What HTTP method to use.\n     * @default `GET`\n     */\n    method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n    /** What GraphQL type to name the response */\n    type?: string;\n    /**\n     * What path (including query) to use\n     * - @optional if you provide @see DirectiveOptions.pathBuilder\n     */\n    path?: string;\n    /**\n     * What endpoint to select from the map of endpoints available to this link.\n     * @default `JsonApiLink.endpoints[DEFAULT_ENDPOINT_KEY]`\n     */\n    endpoint?: string;\n    /**\n     * Function that constructs a request path out of the Environmental\n     *  state when processing this @jsonapi(...) call.\n     *\n     * - @optional if you provide: @see DirectiveOptions.path\n     * - **note**: providing this function means it's your responsibility to call\n     *             encodeURIComponent directly if needed!\n     *\n     * Warning: This is an Advanced API and we are looking for syntactic & ergonomics feedback.\n     */\n    pathBuilder?: (props: PathBuilderProps) => string;\n    /**\n     * Optional method that constructs a RequestBody out of the Environmental state\n     * when processing this @jsonapi(...) call.\n     * @default function that extracts the bodyKey from the args.\n     *\n     * Warning: This is an Advanced API and we are looking for syntactic & ergonomics feedback.\n     */\n    bodyBuilder?: (props: JsonApiLinkHelperProps) => object;\n\n    /**\n     * Optional serialization function or a key that will be used look up the serializer to serialize the request body before transport.\n     * @default if null will fallback to the default serializer\n     */\n    bodySerializer?: JsonApiLink.Serializer | string;\n\n    /**\n     * A per-request name denormalizer, this permits special endpoints to have their\n     * field names remapped differently from the default.\n     * @default Uses JsonApiLink.fieldNameDenormalizer\n     */\n    fieldNameDenormalizer?: JsonApiLink.FieldNameNormalizer;\n\n    /**\n     * Restructures the query result to give access to the full response.\n     * Puts the flattened resource(s) under a `graphql` key, and returns the\n     * original response body structure under a `jsonapi` key.\n     * @default false\n     */\n    includeJsonapi?: boolean;\n  }\n}\n\nconst quickFindJsonApiDirective = (\n  field: FieldNode,\n): DirectiveNode | undefined => {\n  if (field.directives && field.directives.length) {\n    return field.directives.find(\n      directive => 'jsonapi' === directive.name.value,\n    );\n  }\n};\n/**\n * The way graphql works today, it doesn't hand us the AST tree for our query, it hands us the ROOT\n * This method searches for REST-directive-attached nodes that are named to match this query.\n *\n * A little bit of wasted compute, but alternative would be a patch in graphql-anywhere.\n *\n * @param resultKey SearchKey for REST directive-attached item matching this sub-query\n * @param current current node in the REST-JSON-response\n * @param mainDefinition Parsed Query Definition\n * @param fragmentMap Map of Named Fragments\n * @param currentSelectionSet Current selection set we're filtering by\n */\nfunction findRestDirectivesThenInsertNullsForOmittedFields(\n  resultKey: string,\n  current: any[] | object, // currentSelectionSet starts at root, so wait until we're inside a Field tagged with an @jsonapi directive to activate!\n  mainDefinition: OperationDefinitionNode | FragmentDefinitionNode,\n  fragmentMap: FragmentMap,\n  currentSelectionSet: SelectionSetNode,\n): any[] | object {\n  if (\n    currentSelectionSet == null ||\n    null == current ||\n    typeof current === 'number' ||\n    typeof current === 'boolean' ||\n    typeof current === 'string'\n  ) {\n    return current;\n  }\n  currentSelectionSet.selections.forEach(node => {\n    if (isInlineFragment(node)) {\n      findRestDirectivesThenInsertNullsForOmittedFields(\n        resultKey,\n        current,\n        mainDefinition,\n        fragmentMap,\n        node.selectionSet,\n      );\n    } else if (node.kind === 'FragmentSpread') {\n      const fragment = fragmentMap[node.name.value];\n      findRestDirectivesThenInsertNullsForOmittedFields(\n        resultKey,\n        current,\n        mainDefinition,\n        fragmentMap,\n        fragment.selectionSet,\n      );\n    } else if (isField(node)) {\n      const name = resultKeyNameFromField(node);\n      if (name === resultKey && quickFindJsonApiDirective(node)) {\n        // Jackpot! We found our selectionSet!\n        insertNullsForAnyOmittedFields(\n          current,\n          mainDefinition,\n          fragmentMap,\n          node.selectionSet,\n        );\n      } else {\n        findRestDirectivesThenInsertNullsForOmittedFields(\n          resultKey,\n          current,\n          mainDefinition,\n          fragmentMap,\n          node.selectionSet,\n        );\n      }\n    } else {\n      // This will give a TypeScript build-time error if you did something wrong or the AST changes!\n      return ((node: never): never => {\n        throw new Error('Unhandled Node Type in SelectionSetNode.selections');\n      })(node);\n    }\n  });\n  // Return current to have our result pass to next link in async promise chain!\n  return current;\n}\n/**\n * Recursively walks a handed object in parallel with the Query SelectionSet,\n *  and inserts `null` for any field that is missing from the response.\n *\n * This is needed because ApolloClient will throw an error automatically if it's\n *  missing -- effectively making all of rest-link's selections implicitly non-optional.\n *\n * @param current Current object we're patching\n * @param mainDefinition Parsed Query Definition\n * @param fragmentMap Map of Named Fragments\n * @param currentSelectionSet Current selection set we're filtering by\n */\nfunction insertNullsForAnyOmittedFields(\n  current: any[] | object, // currentSelectionSet starts at root, so wait until we're inside a Field tagged with an @jsonapi directive to activate!\n  mainDefinition: OperationDefinitionNode | FragmentDefinitionNode,\n  fragmentMap: FragmentMap,\n  currentSelectionSet: SelectionSetNode,\n): void {\n  if (\n    currentSelectionSet == null ||\n    null == current ||\n    typeof current === 'number' ||\n    typeof current === 'boolean' ||\n    typeof current === 'string'\n  ) {\n    return;\n  }\n  if (Array.isArray(current)) {\n    // If our current value is an array, process our selection set for each entry.\n    current.forEach(c =>\n      insertNullsForAnyOmittedFields(\n        c,\n        mainDefinition,\n        fragmentMap,\n        currentSelectionSet,\n      ),\n    );\n    return;\n  }\n  currentSelectionSet.selections.forEach(node => {\n    if (isInlineFragment(node)) {\n      insertNullsForAnyOmittedFields(\n        current,\n        mainDefinition,\n        fragmentMap,\n        node.selectionSet,\n      );\n    } else if (node.kind === 'FragmentSpread') {\n      const fragment = fragmentMap[node.name.value];\n      insertNullsForAnyOmittedFields(\n        current,\n        mainDefinition,\n        fragmentMap,\n        fragment.selectionSet,\n      );\n    } else if (isField(node)) {\n      const value = current[node.name.value];\n      if (node.name.value === '__typename') {\n        // Don't mess with special fields like __typename\n      } else if (typeof value === 'undefined') {\n        // Patch in a null where the field would have been marked as missing\n        current[node.name.value] = null;\n      } else if (\n        value != null &&\n        typeof value === 'object' &&\n        node.selectionSet != null\n      ) {\n        insertNullsForAnyOmittedFields(\n          value,\n          mainDefinition,\n          fragmentMap,\n          node.selectionSet,\n        );\n      } else {\n        // Other types (string, number) do not need recursive patching!\n      }\n    } else {\n      // This will give a TypeScript build-time error if you did something wrong or the AST changes!\n      return ((node: never): never => {\n        throw new Error('Unhandled Node Type in SelectionSetNode.selections');\n      })(node);\n    }\n  });\n}\n\nconst getEndpointOptions = (\n  endpoints: JsonApiLink.Endpoints,\n  endpoint: JsonApiLink.Endpoint,\n): JsonApiLink.EndpointOptions => {\n  const result =\n    endpoints[endpoint || DEFAULT_ENDPOINT_KEY] ||\n    endpoints[DEFAULT_ENDPOINT_KEY];\n\n  if (typeof result === 'string') {\n    return { uri: result };\n  }\n\n  return result;\n};\n\n/** Internal Tool that Parses Paths for JsonApiLink -- This API should be considered experimental */\nexport class PathBuilder {\n  /** For accelerating the replacement of paths that are used a lot */\n  private static cache: {\n    [path: string]: (props: JsonApiLink.PathBuilderProps) => string;\n  } = {};\n  /** Table to limit the amount of nagging (due to probable API Misuse) we do to once per path per launch */\n  private static warnTable: { [key: string]: true } = {};\n  /** Regexp that finds things that are eligible for variable replacement */\n  private static argReplacement = /({[._a-zA-Z0-9]*})/;\n\n  static replacerForPath(\n    path: string,\n  ): (props: JsonApiLink.PathBuilderProps) => string {\n    if (path in PathBuilder.cache) {\n      return PathBuilder.cache[path];\n    }\n\n    const queryOrigStartIndex = path.indexOf('?');\n    const pathBits = path.split(PathBuilder.argReplacement);\n\n    const chunkActions: Array<\n      | true // We're enabling the qs-encoder\n      | string // This is a raw string bit, don't mess with it\n      | ((\n          props: JsonApiLink.JsonApiLinkHelperProps,\n          useQSEncoder: boolean,\n        ) => string)\n    > = [];\n\n    let hasBegunQuery = false;\n    pathBits.reduce((processedCount, bit) => {\n      if (bit === '' || bit === '{}') {\n        // Empty chunk, do nothing\n        return processedCount + bit.length;\n      }\n      const nextIndex = processedCount + bit.length;\n      if (bit[0] === '{' && bit[bit.length - 1] === '}') {\n        // Replace some args!\n        const _keyPath = bit.slice(1, bit.length - 1).split('.');\n\n        chunkActions.push(\n          (\n            props: JsonApiLink.JsonApiLinkHelperProps,\n            useQSEncoder: boolean,\n          ) => {\n            try {\n              const value = PathBuilderLookupValue(props, _keyPath);\n              if (\n                !useQSEncoder ||\n                (typeof value !== 'object' || value == null)\n              ) {\n                return String(value);\n              } else {\n                return qs.stringify(value);\n              }\n            } catch (e) {\n              const key = [path, _keyPath.join('.')].join('|');\n              if (!(key in PathBuilder.warnTable)) {\n                console.warn(\n                  'Warning: JsonApiLink caught an error while unpacking',\n                  key,\n                  \"This tends to happen if you forgot to pass a parameter needed for creating an @jsonapi(path, or if JsonApiLink was configured to deeply unpack a path parameter that wasn't provided. This message will only log once per detected instance. Trouble-shooting hint: check @jsonapi(path: and the variables provided to this query.\",\n                );\n                PathBuilder.warnTable[key] = true;\n              }\n              return '';\n            }\n          },\n        );\n      } else {\n        chunkActions.push(bit);\n        if (!hasBegunQuery && nextIndex >= queryOrigStartIndex) {\n          hasBegunQuery = true;\n          chunkActions.push(true);\n        }\n      }\n      return nextIndex;\n    }, 0);\n\n    const result: (props: JsonApiLink.PathBuilderProps) => string = props => {\n      let hasEnteredQuery = false;\n      const tmp = chunkActions.reduce((accumulator: string, action): string => {\n        if (typeof action === 'string') {\n          return accumulator + action;\n        } else if (typeof action === 'boolean') {\n          hasEnteredQuery = true;\n          return accumulator;\n        } else {\n          return accumulator + action(props, hasEnteredQuery);\n        }\n      }, '') as string;\n      return tmp;\n    };\n    return (PathBuilder.cache[path] = result);\n  }\n}\n\n/** Private Helper Function */\nfunction PathBuilderLookupValue(tmp: object, keyPath: string[]) {\n  if (keyPath.length === 0) {\n    return tmp;\n  }\n  const remainingKeyPath = [...keyPath]; // Copy before mutating\n  const key = remainingKeyPath.shift();\n  return PathBuilderLookupValue(tmp[key], remainingKeyPath);\n}\n\n/**\n * Some keys should be passed through transparently without normalizing/de-normalizing\n */\nconst noMangleKeys = ['__typename'];\n\n/** Recursively descends the provided object tree and converts all the keys */\nconst convertObjectKeys = (\n  object: object,\n  __converter: JsonApiLink.FieldNameNormalizer,\n  keypath: string[] = [],\n): object => {\n  let converter: JsonApiLink.FieldNameNormalizer = null;\n  if (__converter.length != 2) {\n    converter = (name, keypath) => {\n      return __converter(name);\n    };\n  } else {\n    converter = __converter;\n  }\n\n  if (object == null || typeof object !== 'object') {\n    // Object is a scalar or null / undefined => no keys to convert!\n    return object;\n  }\n\n  // FileList/File are only available in some browser contexts\n  // Notably: *not available* in react-native.\n  if (\n    ((global as any).FileList && object instanceof FileList) ||\n    ((global as any).File && object instanceof File)\n  ) {\n    // Object is a FileList or File object => no keys to convert!\n    return object;\n  }\n\n  if (Array.isArray(object)) {\n    return object.map((o, index) =>\n      convertObjectKeys(o, converter, [...keypath, String(index)]),\n    );\n  }\n\n  return Object.keys(object).reduce((acc: any, key: string) => {\n    let value = object[key];\n\n    if (noMangleKeys.indexOf(key) !== -1) {\n      acc[key] = value;\n      return acc;\n    }\n\n    const nestedKeyPath = [...keypath, key];\n    acc[converter(key, nestedKeyPath)] = convertObjectKeys(\n      value,\n      converter,\n      nestedKeyPath,\n    );\n    return acc;\n  }, {});\n};\n\nconst noOpNameNormalizer: JsonApiLink.FieldNameNormalizer = (name: string) => {\n  return name;\n};\n\n/**\n * Helper that makes sure our headers are of the right type to pass to Fetch\n */\nexport const normalizeHeaders = (\n  headers: JsonApiLink.InitializationHeaders,\n): Headers => {\n  // Make sure that our headers object is of the right type\n  if (headers instanceof Headers) {\n    return headers;\n  } else {\n    return new Headers(headers || {});\n  }\n};\n\n/**\n * Returns a new Headers Group that contains all the headers.\n * - If there are duplicates, they will be in the returned header set multiple times!\n */\nexport const concatHeadersMergePolicy: JsonApiLink.HeadersMergePolicy = (\n  ...headerGroups: Headers[]\n): Headers => {\n  return headerGroups.reduce((accumulator, current) => {\n    if (!current) {\n      return accumulator;\n    }\n    if (!current.forEach) {\n      current = normalizeHeaders(current);\n    }\n    current.forEach((value, key) => {\n      accumulator.append(key, value);\n    });\n\n    return accumulator;\n  }, new Headers());\n};\n\n/**\n * This merge policy deletes any matching headers from the link's default headers.\n * - Pass headersToOverride array & a headers arg to context and this policy will automatically be selected.\n */\nexport const overrideHeadersMergePolicy = (\n  linkHeaders: Headers,\n  headersToOverride: string[],\n  requestHeaders: Headers | null,\n): Headers => {\n  const result = new Headers();\n  linkHeaders.forEach((value, key) => {\n    if (headersToOverride.indexOf(key) !== -1) {\n      return;\n    }\n    result.append(key, value);\n  });\n  return concatHeadersMergePolicy(result, requestHeaders || new Headers());\n};\nexport const overrideHeadersMergePolicyHelper = overrideHeadersMergePolicy; // Deprecated name\n\nconst makeOverrideHeadersMergePolicy = (\n  headersToOverride: string[],\n): JsonApiLink.HeadersMergePolicy => {\n  return (linkHeaders, requestHeaders) => {\n    return overrideHeadersMergePolicy(\n      linkHeaders,\n      headersToOverride,\n      requestHeaders,\n    );\n  };\n};\n\nconst SUPPORTED_HTTP_VERBS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'];\n\nexport const validateRequestMethodForOperationType = (\n  method: string,\n  operationType: OperationTypeNode,\n): void => {\n  switch (operationType) {\n    case 'query':\n      if (SUPPORTED_HTTP_VERBS.indexOf(method.toUpperCase()) !== -1) {\n        return;\n      }\n      throw new Error(\n        `A \"query\" operation can only support \"GET\" requests but got \"${method}\".`,\n      );\n    case 'mutation':\n      if (SUPPORTED_HTTP_VERBS.indexOf(method.toUpperCase()) !== -1) {\n        return;\n      }\n      throw new Error('\"mutation\" operations do not support that HTTP-verb');\n    case 'subscription':\n      throw new Error('A \"subscription\" operation is not supported yet.');\n    default:\n      const _exhaustiveCheck: never = operationType;\n      return _exhaustiveCheck;\n  }\n};\n\n/**\n * Utility to build & throw a JS Error from a \"failed\" REST-response\n * @param response: HTTP Response object for this request\n * @param result: Promise that will render the body of the response\n * @param message: Human-facing error message\n */\nconst rethrowServerSideError = (\n  response: Response,\n  result: any,\n  message: string,\n) => {\n  const error = new Error(message) as JsonApiLink.ServerError;\n\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n\n  throw error;\n};\n\n/** Apollo-Link getContext, provided from the user & mutated by upstream links */\ninterface LinkChainContext {\n  /** Credentials Policy for Fetch */\n  credentials?: RequestCredentials | null;\n\n  /** Headers the user wants to set on this request. See also headersMergePolicy */\n  headers?: JsonApiLink.InitializationHeaders | null;\n\n  /** Will default to concatHeadersMergePolicy unless headersToOverride is set */\n  headersMergePolicy?: JsonApiLink.HeadersMergePolicy | null;\n\n  /** List of headers to override, passing this will swap headersMergePolicy if necessary */\n  headersToOverride?: string[] | null;\n\n  /** An array of the responses from each fetched URL, useful for accessing headers in earlier links */\n  restResponses?: Response[];\n}\n\n/** Context passed via graphql() to our resolver */\ninterface RequestContext {\n  /** Headers the user wants to set on this request. See also headersMergePolicy */\n  headers: Headers;\n\n  /** Credentials Policy for Fetch */\n  credentials?: RequestCredentials | null;\n\n  /** Exported variables fulfilled in this request, using @export(as:). They are stored keyed by node to support deeply nested structures with exports at multiple levels */\n  exportVariablesByNode: Map<any, { [key: string]: any }>;\n\n  endpoints: JsonApiLink.Endpoints;\n  customFetch: JsonApiLink.CustomFetch;\n  operationType: OperationTypeNode;\n  typeNameNormalizer: JsonApiLink.TypeNameNormalizer;\n  fieldNameNormalizer: JsonApiLink.FieldNameNormalizer;\n  fieldNameDenormalizer: JsonApiLink.FieldNameNormalizer;\n  mainDefinition: OperationDefinitionNode | FragmentDefinitionNode;\n  fragmentDefinitions: FragmentDefinitionNode[];\n  serializers: JsonApiLink.Serializers;\n\n  /** An array of the responses from each fetched URL */\n  responses: Response[];\n}\n\nconst addTypeToNode = (node, typename) => {\n  if (node === null || node === undefined || typeof node !== 'object') {\n    return node;\n  }\n\n  if (!Array.isArray(node)) {\n    node['__typename'] = typename;\n    return node;\n  }\n\n  return node.map(item => {\n    return addTypeToNode(item, typename);\n  });\n};\n\nconst resolver: Resolver = async (\n  fieldName: string,\n  root: any,\n  args: any,\n  context: RequestContext,\n  info: ExecInfo,\n) => {\n  const { directives, isLeaf, resultKey } = info;\n  const { exportVariablesByNode } = context;\n\n  const exportVariables = exportVariablesByNode.get(root) || {};\n\n  /** creates a copy of this node's export variables for its child nodes. iterates over array results to provide for each child. returns the passed result. */\n  const copyExportVariables = <T>(result: T): T => {\n    if (result instanceof Array) {\n      result.forEach(copyExportVariables);\n    } else {\n      // export variables are stored keyed on the node they are for\n      exportVariablesByNode.set(result, { ...exportVariables });\n    }\n\n    return result;\n  };\n\n  // Support GraphQL Aliases!\n  const aliasedNode = (root || {})[resultKey];\n  const preAliasingNode = (root || {})[fieldName];\n\n  const isATypeCall = directives && directives.type;\n\n  if (!isLeaf && isATypeCall) {\n    // @type(name: ) is only supported inside apollo-link-json-api at this time\n    // so use the preAliasingNode as we're responsible for implementing aliasing!\n    // Also: exit early, since @type(name: ) && @jsonapi() can't both exist on the same node.\n    if (directives.jsonapi) {\n      throw new Error(\n        'Invalid use of @type(name: ...) directive on a call that also has @jsonapi(...)',\n      );\n    }\n    return addTypeToNode(preAliasingNode, directives.type.name);\n  }\n\n  const isNotAJsonApiCall = !directives || !directives.jsonapi;\n  if (isNotAJsonApiCall) {\n    // This is not tagged with @jsonapi()\n    // This might not belong to us so return the aliasNode version preferentially\n    return copyExportVariables(aliasedNode || preAliasingNode);\n  }\n  const {\n    credentials,\n    endpoints,\n    headers,\n    customFetch,\n    operationType,\n    mainDefinition,\n    fragmentDefinitions,\n    typeNameNormalizer,\n    fieldNameNormalizer,\n    fieldNameDenormalizer: linkLevelNameDenormalizer,\n    serializers,\n  } = context;\n\n  const fragmentMap = createFragmentMap(fragmentDefinitions);\n\n  let {\n    path,\n    endpoint,\n    pathBuilder,\n  } = directives.jsonapi as JsonApiLink.DirectiveOptions;\n\n  const endpointOption = getEndpointOptions(endpoints, endpoint);\n  const neitherPathsProvided = path == null && pathBuilder == null;\n\n  if (neitherPathsProvided) {\n    throw new Error(\n      `One of (\"path\" | \"pathBuilder\") must be set in the @jsonapi() directive. This request had neither, please add one`,\n    );\n  }\n  if (!pathBuilder) {\n    if (path.includes(':')) {\n      throw new Error(\n        \"'@jsonapi(path:' contains a ':' colon, this format is not supported\",\n      );\n    }\n    pathBuilder = PathBuilder.replacerForPath(path);\n  }\n  const allParams: JsonApiLink.PathBuilderProps = {\n    args,\n    exportVariables,\n    context,\n    '@jsonapi': directives.jsonapi,\n    replacer: pathBuilder,\n  };\n  const pathWithParams = pathBuilder(allParams);\n\n  let {\n    method,\n    fieldNameDenormalizer: perRequestNameDenormalizer,\n    includeJsonapi,\n  } = directives.jsonapi as JsonApiLink.DirectiveOptions;\n  if (!method) {\n    method = 'GET';\n  }\n  if (!includeJsonapi) {\n    includeJsonapi = false;\n  }\n\n  let body = undefined;\n  let overrideHeaders: Headers = undefined;\n  if (-1 === ['GET', 'DELETE'].indexOf(method)) {\n    body = convertObjectKeys(\n      allParams.args.input,\n      perRequestNameDenormalizer ||\n        linkLevelNameDenormalizer ||\n        noOpNameNormalizer,\n    );\n\n    let serializedBody: JsonApiLink.SerializedBody;\n\n    serializedBody = serializers[DEFAULT_SERIALIZER_KEY](body, headers);\n    body = serializedBody.body;\n    overrideHeaders = new Headers(serializedBody.headers);\n  }\n\n  validateRequestMethodForOperationType(method, operationType || 'query');\n\n  const requestParams = {\n    method,\n    headers: overrideHeaders || headers,\n    body: body,\n\n    // Only set credentials if they're non-null as some browsers throw an exception:\n    // https://github.com/apollographql/apollo-link-rest/issues/121#issuecomment-396049677\n    ...(credentials ? { credentials } : {}),\n  };\n  const requestUrl = `${endpointOption.uri}${pathWithParams}`;\n\n  const response = await (customFetch || fetch)(requestUrl, requestParams);\n  context.responses.push(response);\n\n  let result;\n  if (response.ok) {\n    if (\n      response.status === 204 ||\n      response.headers.get('Content-Length') === '0'\n    ) {\n      // HTTP-204 means \"no-content\", similarly Content-Length implies the same\n      // This commonly occurs when you POST/PUT to the server, and it acknowledges\n      // success, but doesn't return your Resource.\n      result = {};\n    } else {\n      try {\n        result = await jsonApiTransformer(\n          response,\n          typeNameNormalizer,\n          includeJsonapi,\n        );\n      } catch (err) {\n        console.warn('An error occurred in jsonApiTransformer:');\n        throw err;\n      }\n    }\n  } else if (response.status === 404) {\n    // In a GraphQL context a missing resource should be indicated by\n    // a null value rather than throwing a network error\n    result = null;\n  } else {\n    // Default error handling:\n    // Throw a JSError, that will be available under the\n    // \"Network error\" category in apollo-link-error\n    let parsed: any;\n    // responses need to be cloned as they can only be read once\n    try {\n      parsed = await response.clone().json();\n    } catch (error) {\n      // its not json\n      parsed = await response.clone().text();\n    }\n    rethrowServerSideError(\n      response,\n      parsed,\n      `Response not successful: Received status code ${response.status}`,\n    );\n  }\n\n  if (fieldNameNormalizer !== null) {\n    result = convertObjectKeys(result, fieldNameNormalizer);\n  }\n\n  result = findRestDirectivesThenInsertNullsForOmittedFields(\n    resultKey,\n    result,\n    mainDefinition,\n    fragmentMap,\n    mainDefinition.selectionSet,\n  );\n\n  return copyExportVariables(result);\n};\n\n/**\n * Default key to use when the @jsonapi directive omits the \"endpoint\" parameter.\n */\nconst DEFAULT_ENDPOINT_KEY = '';\n\n/**\n * Default key to use when the @jsonapi directive omits the \"bodySerializers\" parameter.\n */\nconst DEFAULT_SERIALIZER_KEY = '';\n\nconst DEFAULT_JSON_SERIALIZER: JsonApiLink.Serializer = (\n  data: any,\n  headers: Headers,\n) => {\n  if (!headers.has('content-type')) {\n    headers.append('Content-Type', 'application/vnd.api+json');\n  }\n  return {\n    body: JSON.stringify(data),\n    headers: headers,\n  };\n};\n\n/**\n * JsonApiLink is an apollo-link for communicating with REST services using GraphQL on the client-side\n */\nexport class JsonApiLink extends ApolloLink {\n  private readonly endpoints: JsonApiLink.Endpoints;\n  private readonly headers: Headers;\n  private readonly typeNameNormalizer: JsonApiLink.TypeNameNormalizer;\n  private readonly fieldNameNormalizer: JsonApiLink.FieldNameNormalizer;\n  private readonly fieldNameDenormalizer: JsonApiLink.FieldNameNormalizer;\n  private readonly credentials: RequestCredentials;\n  private readonly customFetch: JsonApiLink.CustomFetch;\n  private readonly serializers: JsonApiLink.Serializers;\n\n  constructor({\n    uri,\n    endpoints,\n    headers,\n    typeNameNormalizer,\n    fieldNameNormalizer,\n    fieldNameDenormalizer,\n    customFetch,\n    credentials,\n    bodySerializers,\n    defaultSerializer,\n  }: JsonApiLink.Options) {\n    super();\n    const fallback = {};\n    fallback[DEFAULT_ENDPOINT_KEY] = uri || '';\n    this.endpoints = Object.assign({}, endpoints || fallback);\n\n    if (uri == null && endpoints == null) {\n      throw new Error(\n        'A JsonApiLink must be initialized with either 1 uri, or a map of keyed-endpoints',\n      );\n    }\n    if (uri != null) {\n      const currentDefaultURI = (endpoints || {})[DEFAULT_ENDPOINT_KEY];\n      if (currentDefaultURI != null && currentDefaultURI != uri) {\n        throw new Error(\n          \"JsonApiLink was configured with a default uri that doesn't match what's passed in to the endpoints map.\",\n        );\n      }\n      this.endpoints[DEFAULT_ENDPOINT_KEY] = uri;\n    }\n\n    if (this.endpoints[DEFAULT_ENDPOINT_KEY] == null) {\n      console.warn(\n        'JsonApiLink configured without a default URI. All @jsonapi(…) directives must provide an endpoint key!',\n      );\n    }\n\n    if (\n      bodySerializers &&\n      bodySerializers.hasOwnProperty(DEFAULT_SERIALIZER_KEY)\n    ) {\n      console.warn(\n        'JsonApiLink was configured to override the default serializer! This may result in unexpected behavior',\n      );\n    }\n\n    this.typeNameNormalizer = typeNameNormalizer || identity;\n    this.fieldNameNormalizer = fieldNameNormalizer || null;\n    this.fieldNameDenormalizer = fieldNameDenormalizer || null;\n    this.headers = normalizeHeaders(headers);\n    this.credentials = credentials || null;\n    this.customFetch = customFetch;\n    this.serializers = {\n      [DEFAULT_SERIALIZER_KEY]: defaultSerializer || DEFAULT_JSON_SERIALIZER,\n      ...(bodySerializers || {}),\n    };\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink,\n  ): Observable<FetchResult> | null {\n    const { query, variables, getContext, setContext } = operation;\n    const context: LinkChainContext | any = getContext() as any;\n    const isJsonApiQuery = hasDirectives(['jsonapi'], query);\n    if (!isJsonApiQuery) {\n      return forward(operation);\n    }\n\n    const nonRest = removeRestSetsFromDocument(query);\n\n    // 1. Use the user's merge policy if any\n    let headersMergePolicy: JsonApiLink.HeadersMergePolicy =\n      context.headersMergePolicy;\n    if (\n      headersMergePolicy == null &&\n      Array.isArray(context.headersToOverride)\n    ) {\n      // 2.a. Override just the passed in headers, if user provided that optional array\n      headersMergePolicy = makeOverrideHeadersMergePolicy(\n        context.headersToOverride,\n      );\n    } else if (headersMergePolicy == null) {\n      // 2.b Glue the link (default) headers to the request-context headers\n      headersMergePolicy = concatHeadersMergePolicy;\n    }\n\n    const headers = headersMergePolicy(this.headers, context.headers);\n    if (!headers.has('Accept')) {\n      // Since we assume a json body on successful responses set the Accept\n      // header accordingly if it is not provided by the user\n      headers.append('Accept', 'application/vnd.api+json');\n    }\n\n    const credentials: RequestCredentials =\n      context.credentials || this.credentials;\n\n    const queryWithTypename = addTypenameToDocument(query);\n\n    const mainDefinition = getMainDefinition(query);\n    const fragmentDefinitions = getFragmentDefinitions(query);\n\n    const operationType: OperationTypeNode =\n      (mainDefinition || ({} as any)).operation || 'query';\n\n    const requestContext: RequestContext = {\n      headers,\n      endpoints: this.endpoints,\n      // Provide an empty map for this request's exports to be stuffed into\n      exportVariablesByNode: new Map(),\n      credentials,\n      customFetch: this.customFetch,\n      operationType,\n      typeNameNormalizer: this.typeNameNormalizer,\n      fieldNameNormalizer: this.fieldNameNormalizer,\n      fieldNameDenormalizer: this.fieldNameDenormalizer,\n      mainDefinition,\n      fragmentDefinitions,\n      serializers: this.serializers,\n      responses: [],\n    };\n    const resolverOptions = {};\n    let obs;\n    if (nonRest && forward) {\n      operation.query = nonRest;\n      obs = forward(operation);\n    } else obs = Observable.of({ data: {} });\n\n    return obs.flatMap(\n      ({ data, errors }) =>\n        new Observable(observer => {\n          graphql(\n            resolver,\n            queryWithTypename,\n            data,\n            requestContext,\n            variables,\n            resolverOptions,\n          )\n            .then(data => {\n              setContext({\n                restResponses: (context.restResponses || []).concat(\n                  requestContext.responses,\n                ),\n              });\n              observer.next({ data, errors });\n              observer.complete();\n            })\n            .catch(err => {\n              if (err.name === 'AbortError') return;\n              if (err.result && err.result.errors) {\n                observer.next(err.result);\n              }\n              observer.error(err);\n            });\n        }),\n    );\n  }\n}\n"],"names":["checkDocument","removeDirectivesFromDocument","isInlineFragment","isField","resultKeyNameFromField","qs.stringify","global","createFragmentMap","jsonApiTransformer","hasDirectives","addTypenameToDocument","getMainDefinition","getFragmentDefinitions","Observable","graphql","ApolloLink"],"mappings":"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"}