{"version":3,"sources":["../../../src/bootstrap/load-plugins/load-internal-plugins.ts"],"names":["TYPESCRIPT_PLUGIN_NAME","loadInternalPlugins","config","rootDir","plugins","configuredPluginNames","Set","internalPlugins","filter","Boolean","forEach","relPath","absPath","path","join","__dirname","push","plugin","processedPlugin","add","name","resolve","require","options","pathCheck","has","GATSBY_CLOUD_PLUGIN_NAME","reporter","panic","process","env","GATSBY_CLOUD","processedTypeScriptPlugin","allExtensions","isTSX","jsxPragma","cwd","id","version","pluginOptions","program","store","getState","pageCreatorOptions","directory","pageCreatorPlugin","find","processedPageCreatorPlugin"],"mappings":"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","sourcesContent":["import { slash } from \"gatsby-core-utils\"\nimport path from \"path\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { store } from \"../../redux\"\nimport {\n  IPluginInfo,\n  IPluginRefObject,\n  IPluginRefOptions,\n  ISiteConfig,\n} from \"./types\"\nimport { processPlugin } from \"./process-plugin\"\nimport { createPluginId } from \"./utils/create-id\"\nimport { createFileContentHash } from \"./utils/create-hash\"\nimport {\n  addGatsbyPluginCloudPluginWhenInstalled,\n  incompatibleGatsbyCloudPlugin,\n  GATSBY_CLOUD_PLUGIN_NAME,\n} from \"./utils/handle-gatsby-cloud\"\nimport { getResolvedFieldsForPlugin } from \"../../utils/parcel/compile-gatsby-files\"\n\nconst TYPESCRIPT_PLUGIN_NAME = `gatsby-plugin-typescript`\n\nexport function loadInternalPlugins(\n  config: ISiteConfig = {},\n  rootDir: string\n): Array<IPluginInfo> {\n  // Instantiate plugins.\n  const plugins: Array<IPluginInfo> = []\n  const configuredPluginNames = new Set()\n\n  // Add internal plugins\n  const internalPlugins = [\n    `../../internal-plugins/dev-404-page`,\n    `../../internal-plugins/load-babel-config`,\n    `../../internal-plugins/internal-data-bridge`,\n    `../../internal-plugins/prod-404-500`,\n    `../../internal-plugins/webpack-theme-component-shadowing`,\n    `../../internal-plugins/bundle-optimisations`,\n    `../../internal-plugins/functions`,\n  ].filter(Boolean) as Array<string>\n\n  internalPlugins.forEach(relPath => {\n    const absPath = path.join(__dirname, relPath)\n    plugins.push(processPlugin(absPath, rootDir))\n  })\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      const processedPlugin = processPlugin(plugin, rootDir)\n      plugins.push(processedPlugin)\n      configuredPluginNames.add(processedPlugin.name)\n    })\n  }\n\n  // the order of all of these page-creators matters. The \"last plugin wins\",\n  // so the user's site comes last, and each page-creator instance has to\n  // match the plugin definition order before that. This works fine for themes\n  // because themes have already been added in the proper order to the plugins\n  // array\n  plugins.forEach(plugin => {\n    plugins.push(\n      processPlugin(\n        {\n          resolve: require.resolve(`gatsby-plugin-page-creator`),\n          options: {\n            path: slash(path.join(plugin.resolve, `src/pages`)),\n            pathCheck: false,\n          },\n        },\n        rootDir\n      )\n    )\n  })\n\n  if (\n    _CFLAGS_.GATSBY_MAJOR === `4` &&\n    configuredPluginNames.has(GATSBY_CLOUD_PLUGIN_NAME) &&\n    incompatibleGatsbyCloudPlugin(plugins)\n  ) {\n    reporter.panic(\n      `Plugin gatsby-plugin-gatsby-cloud is not compatible with your gatsby version. Please upgrade to gatsby-plugin-gatsby-cloud@next`\n    )\n  }\n\n  if (\n    !configuredPluginNames.has(GATSBY_CLOUD_PLUGIN_NAME) &&\n    (process.env.GATSBY_CLOUD === `true` || process.env.GATSBY_CLOUD === `1`)\n  ) {\n    addGatsbyPluginCloudPluginWhenInstalled(plugins, rootDir)\n  }\n\n  // Support Typescript by default but allow users to override it\n  if (!configuredPluginNames.has(TYPESCRIPT_PLUGIN_NAME)) {\n    const processedTypeScriptPlugin = processPlugin(\n      {\n        resolve: require.resolve(TYPESCRIPT_PLUGIN_NAME),\n        options: {\n          // TODO(@mxstbr): Do not hard-code these defaults but infer them from the\n          // pluginOptionsSchema of gatsby-plugin-typescript\n          allExtensions: false,\n          isTSX: false,\n          jsxPragma: `React`,\n        },\n      },\n      rootDir\n    )\n    plugins.push(processedTypeScriptPlugin)\n  }\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: createPluginId(`default-site-plugin`),\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n    ...getResolvedFieldsForPlugin(rootDir, `default-site-plugin`),\n  })\n\n  const program = store.getState().program\n\n  // default options for gatsby-plugin-page-creator\n  let pageCreatorOptions: IPluginRefOptions | undefined = {\n    path: slash(path.join(program.directory, `src/pages`)),\n    pathCheck: false,\n  }\n\n  if (config.plugins) {\n    const pageCreatorPlugin = config.plugins.find(\n      (plugin): plugin is IPluginRefObject =>\n        typeof plugin !== `string` &&\n        plugin.resolve === `gatsby-plugin-page-creator` &&\n        slash((plugin.options && plugin.options.path) || ``) ===\n          slash(path.join(program.directory, `src/pages`))\n    )\n    if (pageCreatorPlugin) {\n      // override the options if there are any user specified options\n      pageCreatorOptions = pageCreatorPlugin.options\n    }\n  }\n\n  const processedPageCreatorPlugin = processPlugin(\n    {\n      resolve: require.resolve(`gatsby-plugin-page-creator`),\n      options: pageCreatorOptions,\n    },\n    rootDir\n  )\n\n  plugins.push(processedPageCreatorPlugin)\n\n  return plugins\n}\n"],"file":"load-internal-plugins.js"}