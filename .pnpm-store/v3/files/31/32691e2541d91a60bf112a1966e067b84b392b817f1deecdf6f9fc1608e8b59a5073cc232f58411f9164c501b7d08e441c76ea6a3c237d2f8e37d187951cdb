{"version":3,"sources":["../../src/utils/wait-until-jobs-complete.ts"],"names":["waitJobsV1","Promise","resolve","onEndJob","store","getState","jobs","active","length","emitter","off","on","waitUntilAllJobsComplete","all","then","waitJobsByRequest","requestId","jobsV2","jobDigests","Set","jobsByRequest","get"],"mappings":";;;;;;AAAA;;AAEA;;AAKA,eAAeA,UAAf,GAA2C;AACzC,SAAO,IAAIC,OAAJ,CAAkBC,OAAO,IAAI;AAClC,UAAMC,QAAQ,GAAG,MAAY;AAC3B,UAAIC,aAAMC,QAAN,GAAiBC,IAAjB,CAAsBC,MAAtB,CAA6BC,MAA7B,KAAwC,CAA5C,EAA+C;AAC7CN,QAAAA,OAAO;;AACPO,uBAAQC,GAAR,CAAa,SAAb,EAAuBP,QAAvB;AACD;AACF,KALD;;AAOAM,mBAAQE,EAAR,CAAY,SAAZ,EAAsBR,QAAtB;;AACAA,IAAAA,QAAQ;AACT,GAVM,CAAP;AAWD;;AAEM,MAAMS,wBAAwB,GAAG,MACtCX,OAAO,CAACY,GAAR,CAAY,CAACb,UAAU,EAAX,EAAe,wCAAf,CAAZ,EAA0Dc,IAA1D,EADK;;;;AAGA,eAAeC,iBAAf,CAAiCC,SAAjC,EAAmE;AAAA;;AACxE,QAAMV,IAAI,GAAGF,aAAMC,QAAN,GAAiBY,MAA9B;;AACA,QAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CACzB,6BAAIb,IAAI,CAACc,aAAL,CAAmBC,GAAnB,CAAuBL,SAAvB,CAAJ,yEAAyC,EAAzC,CADyB,EAEzB,8BAAIV,IAAI,CAACc,aAAL,CAAmBC,GAAnB,CAAwB,EAAxB,CAAJ,2EAAkC,EAAlC,CAFyB,CAEc;AAFd,GAAR,CAAnB;AAIA,QAAMpB,OAAO,CAACY,GAAR,CAAY,CAACb,UAAU,EAAX,EAAe,uBAAWkB,UAAX,CAAf,CAAZ,CAAN;AACD","sourcesContent":["import { emitter, store } from \"../redux\"\n\nimport {\n  waitJobs as waitJobsV2,\n  waitUntilAllJobsComplete as waitUntilAllJobsV2Complete,\n} from \"./jobs/manager\"\n\nasync function waitJobsV1(): Promise<void> {\n  return new Promise<void>(resolve => {\n    const onEndJob = (): void => {\n      if (store.getState().jobs.active.length === 0) {\n        resolve()\n        emitter.off(`END_JOB`, onEndJob)\n      }\n    }\n\n    emitter.on(`END_JOB`, onEndJob)\n    onEndJob()\n  })\n}\n\nexport const waitUntilAllJobsComplete = (): Promise<void> =>\n  Promise.all([waitJobsV1(), waitUntilAllJobsV2Complete()]).then()\n\nexport async function waitJobsByRequest(requestId: string): Promise<void> {\n  const jobs = store.getState().jobsV2\n  const jobDigests = new Set([\n    ...(jobs.jobsByRequest.get(requestId) ?? []),\n    ...(jobs.jobsByRequest.get(``) ?? []), // wait for jobs without requestId just in case\n  ])\n  await Promise.all([waitJobsV1(), waitJobsV2(jobDigests)])\n}\n"],"file":"wait-until-jobs-complete.js"}