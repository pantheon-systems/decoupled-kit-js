{"version":3,"sources":["../../../src/schema/extensions/index.js"],"names":["GraphQLDirective","DirectiveLocation","specifiedDirectives","require","link","fileByPath","inferExtensionName","dontInferExtensionName","typeExtensions","description","mimeTypes","args","types","type","defaultValue","childOf","nodeInterface","locations","INTERFACE","builtInFieldExtensions","dateformat","name","formatString","locale","fromNow","difference","extend","fieldConfig","by","from","on","schemaComposer","typeMapper","convertSDLWrappedTypeName","getType","resolve","fileByRelativePath","proxy","fromNode","options","source","context","info","resolver","defaultFieldResolver","internalExtensionNames","map","directive","reservedExtensionNames","Object","keys","toDirectives","extensions","defaultLocations","extension","createTC","normalizedArgs","convertArgConfigMap","forEach","argName","addDirectives","fieldExtensions","fieldDirectives","FIELD_DEFINITION","addDirective","typeDirectives","OBJECT","processFieldExtensions","typeComposer","parentSpan","getFieldNames","fieldName","getFieldExtensions","filter","includes","prevFieldConfig","getFieldConfig","extendField","module","exports"],"mappings":"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","sourcesContent":["// @flow\nconst {\n  GraphQLDirective,\n  DirectiveLocation,\n  specifiedDirectives,\n} = require(`graphql`)\n\nconst { link, fileByPath } = require(`../resolvers`)\nimport { getDateResolver } from \"../types/date\"\n\nimport type { GraphQLFieldConfigArgumentMap, GraphQLFieldConfig } from \"graphql\"\nimport type { ComposeFieldConfig, ComposeOutputType } from \"graphql-compose\"\n\nexport interface GraphQLFieldExtensionDefinition {\n  name: string;\n  type?: ComposeOutputType;\n  args?: GraphQLFieldConfigArgumentMap;\n  extend(\n    args: GraphQLFieldConfigArgumentMap,\n    prevFieldConfig: GraphQLFieldConfig\n  ): $Shape<ComposeFieldConfig>;\n}\n\nconst inferExtensionName = `infer`\nconst dontInferExtensionName = `dontInfer`\n\nconst typeExtensions = {\n  [inferExtensionName]: {\n    description: `Infer field types from field values.`,\n  },\n  [dontInferExtensionName]: {\n    description: `Do not infer field types from field values.`,\n  },\n  mimeTypes: {\n    description: `Define the mime-types handled by this type.`,\n    args: {\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description: `The mime-types handled by this type.`,\n      },\n    },\n  },\n  childOf: {\n    description:\n      `Define parent-child relations between types. This is used to add ` +\n      `\\`child*\\` and \\`children*\\` convenience fields like \\`childImageSharp\\`.`,\n    args: {\n      mimeTypes: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of mime-types this type is a child of. Usually these are ` +\n          `the mime-types handled by a transformer plugin.`,\n      },\n      types: {\n        type: `[String!]!`,\n        defaultValue: [],\n        description:\n          `A list of types this type is a child of. Usually these are the ` +\n          `types handled by a transformer plugin.`,\n      },\n    },\n  },\n  nodeInterface: {\n    description:\n      `DEPRECATED: Use interface inheritance instead, i.e. \"interface Foo implements Node\".\\n\\n` +\n      `Adds root query fields for an interface. All implementing types ` +\n      `must also implement the Node interface.`,\n    locations: [DirectiveLocation.INTERFACE],\n  },\n}\n\nconst builtInFieldExtensions = {\n  dateformat: {\n    name: `dateformat`,\n    description: `Add date formatting options.`,\n    args: {\n      formatString: `String`,\n      locale: `String`,\n      fromNow: `Boolean`,\n      difference: `String`,\n    },\n    extend(args, fieldConfig) {\n      return getDateResolver(args, fieldConfig)\n    },\n  },\n\n  link: {\n    name: `link`,\n    description: `Link to node by foreign-key relation.`,\n    args: {\n      by: {\n        type: `String!`,\n        defaultValue: `id`,\n      },\n      from: `String`,\n      on: `String`,\n    },\n    extend(args, fieldConfig, schemaComposer) {\n      const type =\n        args.on &&\n        schemaComposer.typeMapper.convertSDLWrappedTypeName(args.on)?.getType()\n      return {\n        resolve: link({ ...args, type }, fieldConfig),\n      }\n    },\n  },\n\n  fileByRelativePath: {\n    name: `fileByRelativePath`,\n    description: `Link to File node by relative path.`,\n    args: {\n      from: `String`,\n    },\n    extend(args, fieldConfig) {\n      return {\n        resolve: fileByPath(args, fieldConfig),\n      }\n    },\n  },\n\n  proxy: {\n    name: `proxy`,\n    description: `Proxy resolver from another field.`,\n    args: {\n      from: `String!`,\n      fromNode: {\n        type: `Boolean!`,\n        defaultValue: false,\n      },\n    },\n    extend(options, fieldConfig) {\n      return {\n        resolve(source, args, context, info) {\n          const resolver = fieldConfig.resolve || context.defaultFieldResolver\n          return resolver(source, args, context, {\n            ...info,\n            from: options.from || info.from,\n            fromNode: options.from ? options.fromNode : info.fromNode,\n          })\n        },\n      }\n    },\n  },\n}\n\n// Reserved for internal use\nconst internalExtensionNames = [\n  `createdFrom`,\n  `default`,\n  `directives`,\n  `infer`,\n  `plugin`,\n  ...specifiedDirectives.map(directive => directive.name),\n]\nconst reservedExtensionNames = [\n  ...internalExtensionNames,\n  ...Object.keys(builtInFieldExtensions),\n]\n\nconst toDirectives = ({\n  schemaComposer,\n  extensions,\n  locations: defaultLocations,\n}) =>\n  Object.keys(extensions).map(name => {\n    const extension = extensions[name]\n    const { args, description, locations, type } = extension\n    // Allow field extensions to register a return type\n    if (type) {\n      schemaComposer.createTC(type)\n    }\n    // Support the `graphql-compose` style of directly providing the field type as string\n    const normalizedArgs = schemaComposer.typeMapper.convertArgConfigMap(args)\n\n    // arg.type is a composer that needs to be converted to graphql-js type\n    Object.keys(normalizedArgs).forEach(argName => {\n      normalizedArgs[argName].type = normalizedArgs[argName].type.getType()\n    })\n\n    return new GraphQLDirective({\n      name,\n      args: normalizedArgs,\n      description,\n      locations: locations || defaultLocations,\n    })\n  })\n\nconst addDirectives = ({ schemaComposer, fieldExtensions = {} }) => {\n  const fieldDirectives = toDirectives({\n    schemaComposer,\n    extensions: fieldExtensions,\n    locations: [DirectiveLocation.FIELD_DEFINITION],\n  })\n  fieldDirectives.forEach(directive => schemaComposer.addDirective(directive))\n  const typeDirectives = toDirectives({\n    schemaComposer,\n    extensions: typeExtensions,\n    locations: [DirectiveLocation.OBJECT],\n  })\n  typeDirectives.forEach(directive => schemaComposer.addDirective(directive))\n}\n\nconst processFieldExtensions = ({\n  fieldExtensions = {},\n  schemaComposer,\n  typeComposer,\n  parentSpan,\n}) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    Object.keys(extensions)\n      .filter(name => !internalExtensionNames.includes(name))\n      .forEach(name => {\n        const { extend } = fieldExtensions[name] || {}\n        if (typeof extend === `function`) {\n          // Always get fresh field config as it will have been changed\n          // by previous field extension\n          const prevFieldConfig = typeComposer.getFieldConfig(fieldName)\n          typeComposer.extendField(\n            fieldName,\n            extend(extensions[name], prevFieldConfig, schemaComposer)\n          )\n        }\n      })\n  })\n}\n\nmodule.exports = {\n  addDirectives,\n  builtInFieldExtensions,\n  internalExtensionNames,\n  processFieldExtensions,\n  reservedExtensionNames,\n  inferExtensionName,\n  dontInferExtensionName,\n}\n"],"file":"index.js"}