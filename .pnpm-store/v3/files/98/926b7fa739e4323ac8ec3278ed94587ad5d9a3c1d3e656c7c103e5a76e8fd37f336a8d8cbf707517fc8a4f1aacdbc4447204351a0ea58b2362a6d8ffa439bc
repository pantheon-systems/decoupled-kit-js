{"version":3,"sources":["../../../src/state-machines/data-layer/index.ts"],"names":["loadDataStates","customizingSchema","invoke","src","id","onDone","target","sourcingNodes","actions","initialCreatePagesStates","buildingSchema","creatingPages","writingOutRedirects","recreatePagesStates","doneState","done","type","data","gatsbyNodeGraphQLFunction","graphqlRunner","pagesToBuild","pagesToDelete","options","dataLayerActions","services","dataLayerServices","initializeDataMachine","context","initial","states","reloadDataMachine","recreatePagesMachine"],"mappings":"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","sourcesContent":["import { Machine, StatesConfig, MachineOptions } from \"xstate\"\nimport { dataLayerActions } from \"./actions\"\nimport { IDataLayerContext } from \"./types\"\nimport { dataLayerServices } from \"./services\"\n\nexport type DataLayerResult = Pick<\n  IDataLayerContext,\n  | \"gatsbyNodeGraphQLFunction\"\n  | \"graphqlRunner\"\n  | \"pagesToBuild\"\n  | \"pagesToDelete\"\n>\n\nconst loadDataStates: StatesConfig<IDataLayerContext, any, any> = {\n  customizingSchema: {\n    invoke: {\n      src: `customizeSchema`,\n      id: `customizing-schema`,\n      onDone: {\n        target: `sourcingNodes`,\n      },\n    },\n  },\n  sourcingNodes: {\n    invoke: {\n      src: `sourceNodes`,\n      id: `sourcing-nodes`,\n      onDone: {\n        target: `buildingSchema`,\n        actions: `assignChangedPages`,\n      },\n    },\n  },\n}\n\nconst initialCreatePagesStates: StatesConfig<IDataLayerContext, any, any> = {\n  buildingSchema: {\n    invoke: {\n      id: `building-schema`,\n      src: `buildSchema`,\n      onDone: {\n        target: `creatingPages`,\n        actions: `assignGraphQLRunners`,\n      },\n    },\n  },\n  creatingPages: {\n    invoke: {\n      id: `creating-pages`,\n      src: `createPages`,\n      onDone: {\n        target: `writingOutRedirects`,\n        actions: `assignChangedPages`,\n      },\n    },\n  },\n  writingOutRedirects: {\n    invoke: {\n      src: `writeOutRedirectsAndWatch`,\n      onDone: {\n        target: `done`,\n      },\n    },\n  },\n}\n\nconst recreatePagesStates: StatesConfig<IDataLayerContext, any, any> = {\n  buildingSchema: {\n    invoke: {\n      id: `building-schema`,\n      src: `buildSchema`,\n      onDone: {\n        target: `creatingPages`,\n        actions: `assignGraphQLRunners`,\n      },\n    },\n  },\n  creatingPages: {\n    invoke: {\n      id: `creating-pages`,\n      src: `createPages`,\n      onDone: {\n        target: `done`,\n        actions: `assignChangedPages`,\n      },\n    },\n  },\n}\n\nconst doneState: StatesConfig<IDataLayerContext, any, any> = {\n  done: {\n    type: `final`,\n    data: ({\n      gatsbyNodeGraphQLFunction,\n      graphqlRunner,\n      pagesToBuild,\n      pagesToDelete,\n    }): DataLayerResult => {\n      return {\n        gatsbyNodeGraphQLFunction,\n        graphqlRunner,\n        pagesToBuild,\n        pagesToDelete,\n      }\n    },\n  },\n}\n\nconst options: Partial<MachineOptions<IDataLayerContext, any>> = {\n  actions: dataLayerActions,\n  services: dataLayerServices,\n}\n\n/**\n * Machine used during first run\n */\n\nexport const initializeDataMachine = Machine(\n  {\n    id: `initializeDataMachine`,\n    context: {},\n    initial: `customizingSchema`,\n    states: {\n      ...loadDataStates,\n      ...initialCreatePagesStates,\n      ...doneState,\n    },\n  },\n  options\n)\n\n/**\n * Machine used when we need to source nodes again\n */\n\nexport const reloadDataMachine = Machine(\n  {\n    id: `reloadDataMachine`,\n    context: {},\n    initial: `customizingSchema`,\n    states: {\n      ...loadDataStates,\n      ...recreatePagesStates,\n      ...doneState,\n    },\n  },\n  options\n)\n\n/**\n * Machine used when we need to re-create pages after a\n * node mutation outside of sourceNodes\n */\nexport const recreatePagesMachine = Machine(\n  {\n    id: `recreatePagesMachine`,\n    context: {},\n    initial: `buildingSchema`,\n    states: {\n      ...recreatePagesStates,\n      ...doneState,\n    },\n  },\n  options\n)\n"],"file":"index.js"}