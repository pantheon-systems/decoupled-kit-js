{"version":3,"sources":["../../src/schema/index.js"],"names":["tracer","require","globalTracer","store","getDataStore","getTypes","createSchemaComposer","buildSchema","builtInFieldExtensions","builtInTypeDefinitions","TypeConflictReporter","shouldPrintEngineSnapshot","getAllTypeDefinitions","schemaCustomization","types","getState","builtInTypes","map","typeDef","typeOrTypeDef","plugin","undefined","filter","type","name","getAllFieldExtensions","fieldExtensions","customFieldExtensions","buildInferenceMetadata","Promise","resolve","length","typeNames","processNextType","typeName","pop","dispatch","payload","nodes","iterateNodesByType","setTimeout","build","parentSpan","fullMetadataBuild","spanArgs","childOf","span","startSpan","ready","thirdPartySchemas","printConfig","inferenceMetadata","config","mapping","typeMapping","program","directory","typeConflictReporter","enginePrintConfig","path","rewrite","schemaComposer","schema","printConflicts","finish","rebuild","module","exports"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst tracer = require(`opentracing`).globalTracer()\nconst { store } = require(`../redux`)\nconst { getDataStore, getTypes } = require(`../datastore`)\nconst { createSchemaComposer } = require(`./schema-composer`)\nconst { buildSchema } = require(`./schema`)\nconst { builtInFieldExtensions } = require(`./extensions`)\nconst { builtInTypeDefinitions } = require(`./types/built-in-types`)\nconst { TypeConflictReporter } = require(`./infer/type-conflict-reporter`)\nconst { shouldPrintEngineSnapshot } = require(`../utils/engines-helpers`)\n\nconst getAllTypeDefinitions = () => {\n  const {\n    schemaCustomization: { types },\n  } = store.getState()\n\n  const builtInTypes = builtInTypeDefinitions().map(typeDef => {\n    return {\n      typeOrTypeDef: typeDef,\n      plugin: undefined,\n    }\n  })\n\n  // Ensure that user-defined types are processed last\n  return [\n    ...builtInTypes,\n    ...types.filter(\n      type => type.plugin && type.plugin.name !== `default-site-plugin`\n    ),\n    ...types.filter(\n      type => !type.plugin || type.plugin.name === `default-site-plugin`\n    ),\n  ]\n}\n\nconst getAllFieldExtensions = () => {\n  const {\n    schemaCustomization: { fieldExtensions: customFieldExtensions },\n  } = store.getState()\n\n  return {\n    ...customFieldExtensions,\n    ...builtInFieldExtensions,\n  }\n}\n\n// Schema building requires metadata for type inference.\n// Technically it means looping through all type nodes, analyzing node structure\n// and then using this aggregated node structure in related GraphQL type.\n// Actual logic for inference located in inferenceMetadata reducer and ./infer\n// Here we just orchestrate the process via redux actions\nconst buildInferenceMetadata = ({ types }) =>\n  new Promise(resolve => {\n    if (!types || !types.length) {\n      resolve()\n      return\n    }\n    const typeNames = [...types]\n    // TODO: use async iterators when we switch to node>=10\n    //  or better investigate if we can offload metadata building to worker/Jobs API\n    //  and then feed the result into redux?\n    const processNextType = () => {\n      const typeName = typeNames.pop()\n      store.dispatch({\n        type: `BUILD_TYPE_METADATA`,\n        payload: {\n          typeName,\n          nodes: getDataStore().iterateNodesByType(typeName),\n        },\n      })\n      if (typeNames.length > 0) {\n        // Give event-loop a break\n        setTimeout(processNextType, 0)\n      } else {\n        resolve()\n      }\n    }\n    processNextType()\n  })\n\nconst build = async ({ parentSpan, fullMetadataBuild = true }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n  await getDataStore().ready()\n\n  if (fullMetadataBuild) {\n    // Build metadata for type inference and start updating it incrementally\n    await buildInferenceMetadata({ types: getTypes() })\n    store.dispatch({ type: `START_INCREMENTAL_INFERENCE` })\n  }\n\n  const {\n    schemaCustomization: { thirdPartySchemas, printConfig },\n    inferenceMetadata,\n    config: { mapping: typeMapping },\n    program: { directory },\n  } = store.getState()\n\n  const typeConflictReporter = new TypeConflictReporter()\n\n  const enginePrintConfig =\n    _CFLAGS_.GATSBY_MAJOR === `4` && shouldPrintEngineSnapshot()\n      ? {\n          path: `${directory}/.cache/schema.gql`,\n          rewrite: true,\n        }\n      : undefined\n\n  const fieldExtensions = getAllFieldExtensions()\n  const schemaComposer = createSchemaComposer({ fieldExtensions })\n  const schema = await buildSchema({\n    schemaComposer,\n    types: getAllTypeDefinitions(),\n    fieldExtensions,\n    thirdPartySchemas,\n    typeMapping,\n    printConfig,\n    enginePrintConfig,\n    typeConflictReporter,\n    inferenceMetadata,\n    parentSpan,\n  })\n\n  typeConflictReporter.printConflicts()\n\n  store.dispatch({\n    type: `SET_SCHEMA_COMPOSER`,\n    payload: schemaComposer,\n  })\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n\n  span.finish()\n}\n\nconst rebuild = async ({ parentSpan }) =>\n  await build({ parentSpan, fullMetadataBuild: false })\n\nmodule.exports = {\n  build,\n  rebuild,\n}\n"],"file":"index.js"}