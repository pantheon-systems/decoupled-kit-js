{"version":3,"sources":["../../src/utils/get-server-data.ts"],"names":["getServerData","req","page","pagePath","mod","ensuredLeadingSlash","startsWith","params","matchPath","path","fsRouteParams","context","getServerDataArg","headers","Map","Object","entries","method","url","query","pageContext"],"mappings":";;;;;AAGA;;AAmBO,eAAeA,aAAf,CACLC,GADK,EAILC,IAJK,EAKLC,QALK,EAMLC,GANK,EAOiB;AAAA;;AACtB,MAAI,EAACA,GAAD,aAACA,GAAD,eAACA,GAAG,CAAEJ,aAAN,CAAJ,EAAyB;AACvB,WAAO,EAAP;AACD;;AAED,QAAMK,mBAAmB,GAAGF,QAAQ,CAACG,UAAT,CAAqB,GAArB,IACxBH,QADwB,GAEvB,IAAGA,QAAS,EAFjB;AAIA,QAAM;AAAEI,IAAAA;AAAF,MAAa,kBAAML,IAAI,CAACM,SAAL,IAAkBN,IAAI,CAACO,IAA7B,EAAmCJ,mBAAnC,CAAnB;AACA,QAAMK,aAAa,GACjB,OAAOR,IAAI,CAACS,OAAL,CAAc,UAAd,CAAP,KAAqC,QAArC,GAA+CT,IAAI,CAACS,OAAL,CAAc,UAAd,CAA/C,GAA0E,EAD5E;AAGA,QAAMC,gBAAgB,GAAG;AACvBC,IAAAA,OAAO,EAAE,IAAIC,GAAJ,CAAQC,MAAM,CAACC,OAAP,iBAAef,GAAf,aAAeA,GAAf,uBAAeA,GAAG,CAAEY,OAApB,uDAA+B,EAA/B,CAAR,CADc;AAEvBI,IAAAA,MAAM,iBAAEhB,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEgB,MAAP,qDAAkB,KAFD;AAGvBC,IAAAA,GAAG,cAAEjB,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEiB,GAAP,+CAAe,oCAHK;AAIvBC,IAAAA,KAAK,gBAAElB,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEkB,KAAP,mDAAgB,EAJE;AAKvBC,IAAAA,WAAW,EAAElB,IAAI,CAACS,OALK;AAMvBJ,IAAAA,MAAM,EAAE,EACN,GAAGA,MADG;AAEN,SAAGG;AAFG;AANe,GAAzB;AAYA,SAAON,GAAG,CAACJ,aAAJ,CAAkBY,gBAAlB,CAAP;AACD","sourcesContent":["import type { Request } from \"express\"\nimport type { IGatsbyPage } from \"../redux/types\"\n\nimport { match } from \"@gatsbyjs/reach-router/lib/utils\"\n\nexport interface IServerData {\n  headers?: Record<string, string>\n  props?: Record<string, unknown>\n  status?: number\n}\n\ninterface IModuleWithServerData {\n  getServerData?: (args: {\n    headers: Map<string, unknown>\n    method: string\n    url: string\n    query?: Record<string, unknown>\n    params?: Record<string, unknown>\n    pageContext: Record<string, unknown>\n  }) => Promise<IServerData>\n}\n\nexport async function getServerData(\n  req:\n    | Partial<Pick<Request, \"query\" | \"method\" | \"url\" | \"headers\">>\n    | undefined,\n  page: IGatsbyPage,\n  pagePath: string,\n  mod: IModuleWithServerData | undefined\n): Promise<IServerData> {\n  if (!mod?.getServerData) {\n    return {}\n  }\n\n  const ensuredLeadingSlash = pagePath.startsWith(`/`)\n    ? pagePath\n    : `/${pagePath}`\n\n  const { params } = match(page.matchPath || page.path, ensuredLeadingSlash)\n  const fsRouteParams =\n    typeof page.context[`__params`] === `object` ? page.context[`__params`] : {}\n\n  const getServerDataArg = {\n    headers: new Map(Object.entries(req?.headers ?? {})),\n    method: req?.method ?? `GET`,\n    url: req?.url ?? `\"req\" most likely wasn't passed in`,\n    query: req?.query ?? {},\n    pageContext: page.context,\n    params: {\n      ...params,\n      ...fsRouteParams,\n    },\n  }\n\n  return mod.getServerData(getServerDataArg)\n}\n"],"file":"get-server-data.js"}