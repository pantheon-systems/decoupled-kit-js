{"version":3,"sources":["../../../src/schema/infer/add-inferred-fields.js"],"names":["_","require","ObjectTypeComposer","GraphQLList","invariant","report","getDataStore","addInferredFields","schemaComposer","typeComposer","exampleValue","typeMapping","parentSpan","config","getInferenceConfig","defaults","shouldAddFields","addInferredFieldsImpl","exampleObject","prefix","getTypeName","unsanitizedFieldPath","deprecatedNodeKeys","size","Array","from","join","module","exports","fields","Object","keys","forEach","unsanitizedKey","key","createFieldName","push","fieldsByKey","groupBy","field","possibleFields","selectedField","length","resolveMultipleFields","possibleFieldsNames","map","warn","fieldConfig","getFieldConfig","hasField","addFields","setFieldExtension","Set","selector","arrays","value","isArray","hasMapping","getFieldConfigFromMapping","includes","getFieldConfigFromFieldNameConvention","multiple","add","getSimpleFieldConfig","pop","split","extensions","proxy","type","nodeField","find","canonicalField","sortBy","mapping","path","link","by","foreignKey","replace","linkedTypesSet","linkedValues","linkedNodes","iterateNodes","node","get","has","internal","id","getNode","linkedTypes","typeName","sort","getOrCreateUTC","utc","setTypes","getOTC","setResolveType","dateformat","fileByRelativePath","Date","String","fieldTypeComposer","getFieldTC","lists","fieldType","getFieldType","ofType","createTypeName","create","setExtension","getExtension","derivedTypeName","inferenceConfig","Error","suffix","slice","upperFirst","NON_ALPHA_NUMERIC_EXPR","RegExp","fieldName","replaced","match","char","index","hasExtension"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst { ObjectTypeComposer } = require(`graphql-compose`)\nconst { GraphQLList } = require(`graphql`)\nconst invariant = require(`invariant`)\nconst report = require(`gatsby-cli/lib/reporter`)\n\nimport { isFile } from \"./is-file\"\nimport { isDate } from \"../types/date\"\nimport { addDerivedType } from \"../types/derived-types\"\nimport { reportOnce } from \"../../utils/report-once\"\nimport { is32BitInteger } from \"../../utils/is-32-bit-integer\"\nconst { getDataStore } = require(`../../datastore`)\n\nconst addInferredFields = ({\n  schemaComposer,\n  typeComposer,\n  exampleValue,\n  typeMapping,\n  parentSpan,\n}) => {\n  const config = getInferenceConfig({\n    typeComposer,\n    defaults: {\n      shouldAddFields: true,\n    },\n  })\n  addInferredFieldsImpl({\n    schemaComposer,\n    typeComposer,\n    exampleObject: exampleValue,\n    prefix: typeComposer.getTypeName(),\n    unsanitizedFieldPath: [typeComposer.getTypeName()],\n    typeMapping,\n    config,\n  })\n\n  if (deprecatedNodeKeys.size > 0) {\n    reportOnce(\n      `The ___NODE convention is deprecated. Please use the @link directive instead.\\nType: ${typeComposer.getTypeName()}, Keys: ${Array.from(\n        deprecatedNodeKeys\n      ).join(`, `)}\\nMigration: https://gatsby.dev/node-convention-deprecation`,\n      `verbose`\n    )\n  }\n}\n\nmodule.exports = {\n  addInferredFields,\n}\n\nconst addInferredFieldsImpl = ({\n  schemaComposer,\n  typeComposer,\n  exampleObject,\n  typeMapping,\n  prefix,\n  unsanitizedFieldPath,\n  config,\n}) => {\n  const fields = []\n  Object.keys(exampleObject).forEach(unsanitizedKey => {\n    const key = createFieldName(unsanitizedKey)\n    fields.push({\n      key,\n      unsanitizedKey,\n      exampleValue: exampleObject[unsanitizedKey],\n    })\n  })\n\n  const fieldsByKey = _.groupBy(fields, field => field.key)\n\n  Object.keys(fieldsByKey).forEach(key => {\n    const possibleFields = fieldsByKey[key]\n    let selectedField\n    if (possibleFields.length > 1) {\n      const field = resolveMultipleFields(possibleFields)\n      const possibleFieldsNames = possibleFields\n        .map(field => `\\`${field.unsanitizedKey}\\``)\n        .join(`, `)\n      report.warn(\n        `Multiple node fields resolve to the same GraphQL field \\`${prefix}.${field.key}\\` - [${possibleFieldsNames}]. Gatsby will use \\`${field.unsanitizedKey}\\`.`\n      )\n      selectedField = field\n    } else {\n      selectedField = possibleFields[0]\n    }\n\n    const fieldConfig = getFieldConfig({\n      ...selectedField,\n      schemaComposer,\n      typeComposer,\n      prefix,\n      unsanitizedFieldPath,\n      typeMapping,\n      config,\n    })\n\n    if (!fieldConfig) return\n\n    if (!typeComposer.hasField(key)) {\n      if (config.shouldAddFields) {\n        typeComposer.addFields({ [key]: fieldConfig })\n        typeComposer.setFieldExtension(key, `createdFrom`, `inference`)\n      }\n    }\n  })\n\n  return typeComposer\n}\n\nconst deprecatedNodeKeys = new Set()\n\nconst getFieldConfig = ({\n  schemaComposer,\n  typeComposer,\n  prefix,\n  exampleValue,\n  key,\n  unsanitizedKey,\n  unsanitizedFieldPath,\n  typeMapping,\n  config,\n}) => {\n  const selector = `${prefix}.${key}`\n  unsanitizedFieldPath.push(unsanitizedKey)\n\n  let arrays = 0\n  let value = exampleValue\n  while (Array.isArray(value)) {\n    value = value[0]\n    arrays++\n  }\n\n  let fieldConfig\n  if (hasMapping(typeMapping, selector)) {\n    // TODO: Use `prefix` instead of `selector` in hasMapping and getFromMapping?\n    // i.e. does the config contain sanitized field names?\n    fieldConfig = getFieldConfigFromMapping({ typeMapping, selector })\n  } else if (unsanitizedKey.includes(`___NODE`)) {\n    // TODO(v5): Remove ability to use foreign keys like this (e.g. author___NODE___contact___email)\n    // and recommend using schema customization instead\n\n    fieldConfig = getFieldConfigFromFieldNameConvention({\n      schemaComposer,\n      value: exampleValue,\n      key: unsanitizedKey,\n    })\n    arrays = arrays + (value.multiple ? 1 : 0)\n\n    deprecatedNodeKeys.add(unsanitizedKey)\n  } else {\n    fieldConfig = getSimpleFieldConfig({\n      schemaComposer,\n      typeComposer,\n      key,\n      value,\n      selector,\n      unsanitizedFieldPath,\n      typeMapping,\n      config,\n      arrays,\n    })\n  }\n\n  unsanitizedFieldPath.pop()\n  if (!fieldConfig) return null\n\n  // Proxy resolver to unsanitized fieldName in case it contained invalid characters\n  if (key !== unsanitizedKey.split(`___NODE`)[0]) {\n    fieldConfig = {\n      ...fieldConfig,\n      extensions: {\n        ...(fieldConfig.extensions || {}),\n        proxy: { from: unsanitizedKey },\n      },\n    }\n  }\n\n  while (arrays > 0) {\n    fieldConfig = { ...fieldConfig, type: [fieldConfig.type] }\n    arrays--\n  }\n\n  return fieldConfig\n}\n\nconst resolveMultipleFields = possibleFields => {\n  const nodeField = possibleFields.find(field =>\n    field.unsanitizedKey.includes(`___NODE`)\n  )\n  if (nodeField) {\n    return nodeField\n  }\n\n  const canonicalField = possibleFields.find(\n    field => field.unsanitizedKey === field.key\n  )\n  if (canonicalField) {\n    return canonicalField\n  }\n\n  return _.sortBy(possibleFields, field => field.unsanitizedKey)[0]\n}\n\n// XXX(freiksenet): removing this as it's a breaking change\n// Deeper nested levels should be inferred as JSON.\n// const MAX_DEPTH = 5\n\nconst hasMapping = (mapping, selector) =>\n  mapping && Object.keys(mapping).includes(selector)\n\nconst getFieldConfigFromMapping = ({ typeMapping, selector }) => {\n  const [type, ...path] = typeMapping[selector].split(`.`)\n  return {\n    type,\n    extensions: {\n      link: { by: path.join(`.`) || `id` },\n    },\n  }\n}\n\n// probably should be in example value\nconst getFieldConfigFromFieldNameConvention = ({\n  schemaComposer,\n  value,\n  key,\n}) => {\n  const path = key.split(`___NODE___`)[1]\n  // Allow linking by nested fields, e.g. `author___NODE___contact___email`\n  const foreignKey = path && path.replace(/___/g, `.`)\n  const linkedTypesSet = new Set()\n\n  if (foreignKey) {\n    const linkedValues = new Set(value.linkedNodes)\n    getDataStore()\n      .iterateNodes()\n      .forEach(node => {\n        const value = _.get(node, foreignKey)\n        if (linkedValues.has(value)) {\n          linkedTypesSet.add(node.internal.type)\n        }\n      })\n  } else {\n    value.linkedNodes.forEach(id => {\n      const node = getDataStore().getNode(id)\n      if (node) {\n        linkedTypesSet.add(node.internal.type)\n      }\n    })\n  }\n\n  const linkedTypes = [...linkedTypesSet]\n\n  invariant(\n    linkedTypes.length,\n    `Encountered an error trying to infer a GraphQL type for: \\`${key}\\`. ` +\n      `There is no corresponding node with the \\`id\\` field matching: \"${value.linkedNodes}\".`\n  )\n\n  let type\n  // If the field value is an array that links to more than one type,\n  // create a GraphQLUnionType. Note that we don't support the case where\n  // scalar fields link to different types. Similarly, an array of objects\n  // with foreign-key fields will produce union types if those foreign-key\n  // fields are arrays, but not if they are scalars. See the tests for an example.\n  if (linkedTypes.length > 1) {\n    const typeName = linkedTypes.sort().join(``) + `Union`\n    type = schemaComposer.getOrCreateUTC(typeName, utc => {\n      utc.setTypes(linkedTypes.map(typeName => schemaComposer.getOTC(typeName)))\n      utc.setResolveType(node => node.internal.type)\n    })\n  } else {\n    type = linkedTypes[0]\n  }\n\n  return {\n    type,\n    extensions: {\n      link: { by: foreignKey || `id`, from: key },\n    },\n  }\n}\n\nconst getSimpleFieldConfig = ({\n  schemaComposer,\n  typeComposer,\n  key,\n  value,\n  selector,\n  unsanitizedFieldPath,\n  typeMapping,\n  config,\n  arrays,\n}) => {\n  switch (typeof value) {\n    case `boolean`:\n      return { type: `Boolean` }\n    case `number`:\n      return { type: is32BitInteger(value) ? `Int` : `Float` }\n    case `string`:\n      if (isDate(value)) {\n        return { type: `Date`, extensions: { dateformat: {} } }\n      }\n      if (isFile(unsanitizedFieldPath, value)) {\n        // NOTE: For arrays of files, where not every path references\n        // a File node in the db, it is semi-random if the field is\n        // inferred as File or String, since the exampleValue only has\n        // the first entry (which could point to an existing file or not).\n        return { type: `File`, extensions: { fileByRelativePath: {} } }\n      }\n      return { type: `String` }\n    case `object`:\n      if (value instanceof Date) {\n        return { type: `Date`, extensions: { dateformat: {} } }\n      }\n      if (value instanceof String) {\n        return { type: `String` }\n      }\n      if (value /* && depth < MAX_DEPTH*/) {\n        let fieldTypeComposer\n        if (typeComposer.hasField(key)) {\n          fieldTypeComposer = typeComposer.getFieldTC(key)\n          // If we have an object as a field value, but the field type is\n          // explicitly defined as something other than an ObjectType\n          // we can bail early.\n          if (!(fieldTypeComposer instanceof ObjectTypeComposer)) return null\n          // If the array depth of the field value and of the explicitly\n          // defined field type don't match we can also bail early.\n          let lists = 0\n          let fieldType = typeComposer.getFieldType(key)\n          while (fieldType.ofType) {\n            if (fieldType instanceof GraphQLList) lists++\n            fieldType = fieldType.ofType\n          }\n          if (lists !== arrays) return null\n        } else {\n          // When the field type has not been explicitly defined, we\n          // don't need to continue in case of @dontInfer\n          if (!config.shouldAddFields) return null\n\n          const typeName = createTypeName(selector)\n          if (schemaComposer.has(typeName)) {\n            // Type could have been already created via schema customization\n            fieldTypeComposer = schemaComposer.getOTC(typeName)\n          } else {\n            fieldTypeComposer = ObjectTypeComposer.create(\n              typeName,\n              schemaComposer\n            )\n            fieldTypeComposer.setExtension(`createdFrom`, `inference`)\n            fieldTypeComposer.setExtension(\n              `plugin`,\n              typeComposer.getExtension(`plugin`)\n            )\n            addDerivedType({\n              typeComposer,\n              derivedTypeName: fieldTypeComposer.getTypeName(),\n            })\n          }\n        }\n\n        // Inference config options are either explicitly defined on a type\n        // with directive/extension, or inherited from the parent type.\n        const inferenceConfig = getInferenceConfig({\n          typeComposer: fieldTypeComposer,\n          defaults: config,\n        })\n\n        return {\n          type: addInferredFieldsImpl({\n            schemaComposer,\n            typeComposer: fieldTypeComposer,\n            exampleObject: value,\n            typeMapping,\n            prefix: selector,\n            unsanitizedFieldPath,\n            config: inferenceConfig,\n          }),\n        }\n      }\n  }\n  throw new Error(`Can't determine type for \"${value}\" in \\`${selector}\\`.`)\n}\n\nconst createTypeName = selector => {\n  const keys = selector.split(`.`)\n  const suffix = keys.slice(1).map(_.upperFirst).join(``)\n  return `${keys[0]}${suffix}`\n}\n\nconst NON_ALPHA_NUMERIC_EXPR = new RegExp(`[^a-zA-Z0-9_]`, `g`)\n\n/**\n * GraphQL field names must be a string and cannot contain anything other than\n * alphanumeric characters and `_`. They also can't start with `__` which is\n * reserved for internal fields (`___foo` doesn't work either).\n */\nconst createFieldName = key => {\n  // Check if the key is really a string otherwise GraphQL will throw.\n  invariant(\n    typeof key === `string`,\n    `GraphQL field name (key) is not a string: \\`${key}\\`.`\n  )\n\n  const fieldName = key.split(`___NODE`)[0]\n  const replaced = fieldName.replace(NON_ALPHA_NUMERIC_EXPR, `_`)\n\n  // key is invalid; normalize with leading underscore and rest with x\n  if (replaced.match(/^__/)) {\n    return replaced.replace(/_/g, (char, index) => (index === 0 ? `_` : `x`))\n  }\n\n  // key is invalid (starts with numeric); normalize with leading underscore\n  if (replaced.match(/^[0-9]/)) {\n    return `_` + replaced\n  }\n\n  return replaced\n}\n\nconst getInferenceConfig = ({ typeComposer, defaults }) => {\n  return {\n    shouldAddFields: typeComposer.hasExtension(`infer`)\n      ? typeComposer.getExtension(`infer`)\n      : defaults.shouldAddFields,\n  }\n}\n"],"file":"add-inferred-fields.js"}