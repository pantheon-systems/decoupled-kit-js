{"version":3,"sources":["../../../src/bootstrap/load-plugins/resolve-plugin.ts"],"names":["resolvePlugin","plugin","rootDir","pluginName","resolve","validLocalPlugin","localPluginPath","packageJSON","JSON","parse","fs","readFileSync","name","id","version","requireSource","require","resolvedPath","path","dirname","isAbsolute","err","process","env","gatsby_log_level","reporter","panicOnBuild","Error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAT,CAAuBC,MAAvB,EAA0CC,OAA1C,EAAwE;AAC7E,QAAMC,UAAU,GAAG,sBAASF,MAAT,IAAmBA,MAAnB,GAA4BA,MAAM,CAACG,OAAtD,CAD6E,CAG7E;;AACA,QAAM;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA,eAAe,GAAI;AAAvC,MAA6C,wCACjDL,MADiD,EAEjDC,OAFiD,CAAnD;;AAKA,MAAIG,gBAAgB,IAAIC,eAAxB,EAAyC;AACvC,UAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAClBC,YAAGC,YAAH,CAAiB,GAAEL,eAAgB,eAAnC,EAAoD,OAApD,CADkB,CAApB;AAGA,UAAMM,IAAI,GAAGL,WAAW,CAACK,IAAZ,IAAoBT,UAAjC;AACA,oDAAiCS,IAAjC,EAAuCL,WAAvC;AAEA,WAAO;AACLH,MAAAA,OAAO,EAAEE,eADJ;AAELM,MAAAA,IAFK;AAGLC,MAAAA,EAAE,EAAE,8BAAeD,IAAf,CAHC;AAILE,MAAAA,OAAO,EACL,CAAAP,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEO,OAAb,KAAwB,uCAAsBR,eAAtB,EAAwC,IAAxC,CALrB;AAML,SAAG,oDAA2BJ,OAA3B,EAAoCU,IAApC;AANE,KAAP;AAQD;AAED;AACF;AACA;AACA;;;AACE,MAAI;AACF,UAAMG,aAAa,GACjBb,OAAO,KAAK,IAAZ,GACI,4CAAuB,GAAEA,OAAQ,aAAjC,CADJ,GAEIc,OAHN,CADE,CAMF;AACA;;AACA,UAAMC,YAAY,GAAG,4BACnBC,cAAKC,OAAL,CACEJ,aAAa,CAACX,OAAd,CACEc,cAAKE,UAAL,CAAgBjB,UAAhB,IACIA,UADJ,GAEK,GAAEA,UAAW,eAHpB,CADF,CADmB,CAArB;AAUA,UAAMI,WAAW,GAAGC,IAAI,CAACC,KAAL,CAClBC,YAAGC,YAAH,CAAiB,GAAEM,YAAa,eAAhC,EAAiD,OAAjD,CADkB,CAApB;AAGA,oDAAiCV,WAAW,CAACK,IAA7C,EAAmDL,WAAnD;AAEA,WAAO;AACLH,MAAAA,OAAO,EAAEa,YADJ;AAELJ,MAAAA,EAAE,EAAE,8BAAeN,WAAW,CAACK,IAA3B,CAFC;AAGLA,MAAAA,IAAI,EAAEL,WAAW,CAACK,IAHb;AAILE,MAAAA,OAAO,EAAEP,WAAW,CAACO;AAJhB,KAAP;AAMD,GA7BD,CA6BE,OAAOO,GAAP,EAAY;AACZ,QAAIC,OAAO,CAACC,GAAR,CAAYC,gBAAZ,KAAkC,SAAtC,EAAgD;AAC9CC,wBAASC,YAAT,CACG,WAAUvB,UAAW,+BADxB,EAEEkB,GAFF;AAID,KALD,MAKO;AACLI,wBAASC,YAAT,CACG,uCAAsCvB,UAAW,iFADpD;AAGD;;AACD,UAAM,IAAIwB,KAAJ,CAAW,aAAX,CAAN;AACD;AACF","sourcesContent":["import path from \"path\"\nimport fs from \"fs\"\nimport { slash, createRequireFromPath } from \"gatsby-core-utils\"\nimport { warnOnIncompatiblePeerDependency } from \"./validate\"\nimport { PackageJson } from \"../../..\"\nimport { IPluginInfo, PluginRef } from \"./types\"\nimport { createPluginId } from \"./utils/create-id\"\nimport { createFileContentHash } from \"./utils/create-hash\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { isString } from \"lodash\"\nimport { checkLocalPlugin } from \"./utils/check-local-plugin\"\nimport { getResolvedFieldsForPlugin } from \"../../utils/parcel/compile-gatsby-files\"\n\n/**\n * @param plugin\n * This should be a plugin spec object where possible but can also be the\n * name of a plugin.\n *\n * When it is a name, it can be a name of a local plugin, the name of a plugin\n * located in node_modules, or a Gatsby internal plugin. In the last case the\n * plugin will be an absolute path.\n * @param rootDir\n * This is the project location, from which are found the plugins\n */\nexport function resolvePlugin(plugin: PluginRef, rootDir: string): IPluginInfo {\n  const pluginName = isString(plugin) ? plugin : plugin.resolve\n\n  // Handle local plugins\n  const { validLocalPlugin, localPluginPath = `` } = checkLocalPlugin(\n    plugin,\n    rootDir\n  )\n\n  if (validLocalPlugin && localPluginPath) {\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${localPluginPath}/package.json`, `utf-8`)\n    ) as PackageJson\n    const name = packageJSON.name || pluginName\n    warnOnIncompatiblePeerDependency(name, packageJSON)\n\n    return {\n      resolve: localPluginPath,\n      name,\n      id: createPluginId(name),\n      version:\n        packageJSON?.version || createFileContentHash(localPluginPath, `**`),\n      ...getResolvedFieldsForPlugin(rootDir, name),\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const requireSource =\n      rootDir !== null\n        ? createRequireFromPath(`${rootDir}/:internal:`)\n        : require\n\n    // If the path is absolute, resolve the directory of the internal plugin,\n    // otherwise resolve the directory containing the package.json\n    const resolvedPath = slash(\n      path.dirname(\n        requireSource.resolve(\n          path.isAbsolute(pluginName)\n            ? pluginName\n            : `${pluginName}/package.json`\n        )\n      )\n    )\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n    warnOnIncompatiblePeerDependency(packageJSON.name, packageJSON)\n\n    return {\n      resolve: resolvedPath,\n      id: createPluginId(packageJSON.name),\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    if (process.env.gatsby_log_level === `verbose`) {\n      reporter.panicOnBuild(\n        `plugin \"${pluginName} threw the following error:\\n`,\n        err\n      )\n    } else {\n      reporter.panicOnBuild(\n        `There was a problem loading plugin \"${pluginName}\". Perhaps you need to install its package?\\nUse --verbose to see actual error.`\n      )\n    }\n    throw new Error(`unreachable`)\n  }\n}\n"],"file":"resolve-plugin.js"}