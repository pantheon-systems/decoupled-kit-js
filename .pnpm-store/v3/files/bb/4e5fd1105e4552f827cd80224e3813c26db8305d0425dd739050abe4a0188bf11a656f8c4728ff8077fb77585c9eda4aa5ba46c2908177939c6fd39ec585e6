{"version":3,"sources":["../../src/models/remoteSchema.ts"],"names":["remoteSchema","state","wpUrl","nodeQueries","nonNodeQuery","introspectionData","schemaWasChanged","typeMap","nodeListFilter","field","name","ingestibles","nodeListRootFields","nodeInterfaceTypes","nonNodeRootFields","allowRefreshSchemaUpdate","fetchedTypes","Map","fieldBlacklist","fieldAliases","parent","children","internal","plugin","actionOptions","fields","reducers","toggleAllowRefreshSchemaUpdate","setSchemaWasChanged","payload","addFieldsToBlackList","setState","addFetchedType","type","key","get","kind","possibleTypes","length","set"],"mappings":";;;;;AACA;;AADA;AAyDA,MAAMA,YAAgC,GAAG;AACvCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,IADF;AAELC,IAAAA,WAAW,EAAE,EAFR;AAGLC,IAAAA,YAAY,EAAE,IAHT;AAILC,IAAAA,iBAAiB,EAAE,IAJd;AAKLC,IAAAA,gBAAgB,EAAE,IALb;AAMLC,IAAAA,OAAO,EAAE,IANJ;AAOLC,IAAAA,cAAc,EAAGC,KAAD,IACdA,KAAK,CAACC,IAAN,KAAgB,OARb;AASLC,IAAAA,WAAW,EAAE;AACXC,MAAAA,kBAAkB,EAAE,IADT;AAEXC,MAAAA,kBAAkB,EAAE,IAFT;AAGXC,MAAAA,iBAAiB,EAAE;AAHR,KATR;AAcLC,IAAAA,wBAAwB,EAAE,KAdrB;AAeLC,IAAAA,YAAY,EAAE,IAAIC,GAAJ,EAfT;AAgBLC,IAAAA,cAAc,EAAE,CACb,YADa,EAEb,OAFa,EAGd;AACC,eAJa,EAKb,wBALa,EAMb,cANa,EAOb,mBAPa,EAQb,cARa,EASb,iBATa,EAUb,eAVa,EAWb,UAXa,EAYb,YAZa,EAab,SAba,EAcb,WAda,EAeb,2BAfa,EAgBb,mBAhBa,EAiBb,iBAjBa,CAhBX;AAmCL;AACAC,IAAAA,YAAY,EAAE;AACZC,MAAAA,MAAM,EAAG,UADG;AAEZC,MAAAA,QAAQ,EAAG,YAFC;AAGZC,MAAAA,QAAQ,EAAG,YAHC;AAIZC,MAAAA,MAAM,EAAG,UAJG;AAKZC,MAAAA,aAAa,EAAG,iBALJ;AAMZC,MAAAA,MAAM,EAAG;AANG;AApCT,GADgC;AA+CvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,8BAA8B,CAAC1B,KAAD,EAAQ;AACpCA,MAAAA,KAAK,CAACc,wBAAN,GAAiC,CAACd,KAAK,CAACc,wBAAxC;AAEA,aAAOd,KAAP;AACD,KALO;;AAOR2B,IAAAA,mBAAmB,CAAC3B,KAAD,EAAQ4B,OAAR,EAAiB;AAClC5B,MAAAA,KAAK,CAACK,gBAAN,GAAyB,CAAC,CAACuB,OAA3B;AAEA,aAAO5B,KAAP;AACD,KAXO;;AAaR6B,IAAAA,oBAAoB,CAAC7B,KAAD,EAAQ4B,OAAR,EAAiB;AACnC5B,MAAAA,KAAK,CAACiB,cAAN,GAAuB,CAAC,GAAGjB,KAAK,CAACiB,cAAV,EAA0B,GAAGW,OAA7B,CAAvB;AACA,aAAO5B,KAAP;AACD,KAhBO;;AAkBR8B,IAAAA,QAAQ,CAAC9B,KAAD,EAAQ4B,OAAR,EAAiB;AACvB5B,MAAAA,KAAK,GAAG,EACN,GAAGA,KADG;AAEN,WAAG4B;AAFG,OAAR;AAKA,aAAO5B,KAAP;AACD,KAzBO;;AA2BR+B,IAAAA,cAAc,CAAC/B,KAAD,EAAQgC,IAAR,EAAc;AAC1B,YAAMC,GAAG,GAAG,2BAAaD,IAAb,CAAZ;;AAEA,UAAI,CAACC,GAAL,EAAU;AACR,eAAOjC,KAAP;AACD;;AAEDgC,MAAAA,IAAI,GAAGhC,KAAK,CAACM,OAAN,CAAc4B,GAAd,CAAkBD,GAAlB,CAAP,CAP0B,CAS1B;AACA;;AACA,UAAID,IAAI,IAAIA,IAAI,CAACG,IAAL,KAAe,OAAvB,IAAiCH,IAAI,CAACI,aAAL,CAAmBC,MAAnB,KAA8B,CAAnE,EAAsE;AACpE,eAAOrC,KAAP;AACD;;AAEDA,MAAAA,KAAK,CAACe,YAAN,CAAmBuB,GAAnB,CAAuBL,GAAvB,EAA4BD,IAA5B;AAEA,aAAOhC,KAAP;AACD;;AA7CO;AA/C6B,CAAzC;eAgGeD,Y","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { findTypeName } from \"~/steps/create-schema-customization/helpers\"\n\ninterface IRemoteSchemaState {\n  wpUrl: string\n  nodeQueries: any\n  nonNodeQuery: string\n  introspectionData: any\n  schemaWasChanged: boolean\n  typeMap: any\n  nodeListFilter: (field: { name: string }) => boolean\n  ingestibles: {\n    nodeListRootFields: any\n    nodeInterfaceTypes: any\n    nonNodeRootFields: Array<any>\n  }\n  allowRefreshSchemaUpdate: boolean\n  fetchedTypes: any\n  fieldBlacklist: Array<string>\n  fieldAliases: {\n    parent: string\n    children: string\n    internal: string\n    plugin: string\n    actionOptions: string\n    fields: string\n  }\n}\n\ninterface IRemoteSchemaReducers {\n  toggleAllowRefreshSchemaUpdate: (\n    state: IRemoteSchemaState\n  ) => IRemoteSchemaState\n\n  setSchemaWasChanged: (\n    state: IRemoteSchemaState,\n    payload: boolean\n  ) => IRemoteSchemaState\n\n  addFieldsToBlackList: (\n    state: IRemoteSchemaState,\n    payload: Array<string>\n  ) => IRemoteSchemaState\n\n  setState: (\n    state: IRemoteSchemaState,\n    payload: IRemoteSchemaState\n  ) => IRemoteSchemaState\n\n  addFetchedType: (state: IRemoteSchemaState, type: any) => IRemoteSchemaState\n}\n\ninterface IRemoteSchemaStore {\n  state: IRemoteSchemaState\n  reducers: IRemoteSchemaReducers\n}\n\nconst remoteSchema: IRemoteSchemaStore = {\n  state: {\n    wpUrl: null,\n    nodeQueries: {},\n    nonNodeQuery: null,\n    introspectionData: null,\n    schemaWasChanged: null,\n    typeMap: null,\n    nodeListFilter: (field: { name: string }): boolean =>\n      field.name === `nodes`,\n    ingestibles: {\n      nodeListRootFields: null,\n      nodeInterfaceTypes: null,\n      nonNodeRootFields: [],\n    },\n    allowRefreshSchemaUpdate: false,\n    fetchedTypes: new Map(),\n    fieldBlacklist: [\n      `isWpGatsby`,\n      `edges`,\n      // these aren't useful without authentication\n      `revisions`,\n      `isJwtAuthSecretRevoked`,\n      `isRestricted`,\n      `jwtAuthExpiration`,\n      `jwtAuthToken`,\n      `jwtRefreshToken`,\n      `jwtUserSecret`,\n      `editLock`,\n      `revisionOf`,\n      `preview`,\n      `isPreview`,\n      `previewRevisionDatabaseId`,\n      `previewRevisionId`,\n      `editingLockedBy`,\n    ],\n    // @todo make this a plugin option\n    fieldAliases: {\n      parent: `wpParent`,\n      children: `wpChildren`,\n      internal: `wpInternal`,\n      plugin: `wpPlugin`,\n      actionOptions: `wpActionOptions`,\n      fields: `wpFields`,\n    },\n  },\n\n  reducers: {\n    toggleAllowRefreshSchemaUpdate(state) {\n      state.allowRefreshSchemaUpdate = !state.allowRefreshSchemaUpdate\n\n      return state\n    },\n\n    setSchemaWasChanged(state, payload) {\n      state.schemaWasChanged = !!payload\n\n      return state\n    },\n\n    addFieldsToBlackList(state, payload) {\n      state.fieldBlacklist = [...state.fieldBlacklist, ...payload]\n      return state\n    },\n\n    setState(state, payload) {\n      state = {\n        ...state,\n        ...payload,\n      }\n\n      return state\n    },\n\n    addFetchedType(state, type) {\n      const key = findTypeName(type)\n\n      if (!key) {\n        return state\n      }\n\n      type = state.typeMap.get(key)\n\n      // union types with no member types will cause schema customization errors\n      // @todo move this to a better place. This should be excluded before it gets to this point.\n      if (type && type.kind === `UNION` && type.possibleTypes.length === 0) {\n        return state\n      }\n\n      state.fetchedTypes.set(key, type)\n\n      return state\n    },\n  } as IRemoteSchemaReducers,\n}\n\nexport default remoteSchema\n"],"file":"remoteSchema.js"}