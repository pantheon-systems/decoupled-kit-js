{"version":3,"sources":["../../../src/redux/actions/internal.ts"],"names":["createPageDependencies","payload","plugin","type","map","path","nodeId","connection","createPageDependency","deleteComponentsDependencies","paths","replaceComponentQuery","query","componentPath","apiFinished","replaceStaticQuery","args","queryExtracted","traceId","setGraphQLDefinitions","definitionsByName","queryExtractionGraphQLError","error","queryExtractedBabelSuccess","queryExtractionBabelError","setProgramStatus","status","pageQueryRun","queryStart","isPage","clearDirtyQueriesListToEmitViaWebsocket","removeStaleJob","contentDigest","setSiteConfig","config","result","gatsbyConfigSchema","validate","normalizedPayload","value","hasUnknownKeys","details","filter","Array","isArray","length","errorMessages","unknown","context","message","key","suggestion","reporter","panic","id","sourceMessage","join","setFunctions","functions","deleteNodeManifests","createJobV2FromInternalJob","internalJob","dispatch","getState","jobContentDigest","currentState","jobsV2","complete","has","Promise","resolve","get","engineContext","job","requestId","inProgressJobPromise","name","enqueuedJobPromise","then"],"mappings":"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","sourcesContent":["import {\n  ICreatePageDependencyActionPayloadType,\n  IDeleteNodeManifests,\n} from \"./../types\"\nimport reporter from \"gatsby-cli/lib/reporter\"\n\nimport {\n  IGatsbyConfig,\n  IGatsbyPlugin,\n  ProgramStatus,\n  ICreatePageDependencyAction,\n  IDeleteComponentDependenciesAction,\n  IReplaceComponentQueryAction,\n  IReplaceStaticQueryAction,\n  IQueryExtractedAction,\n  IQueryExtractionGraphQLErrorAction,\n  IQueryExtractedBabelSuccessAction,\n  IQueryExtractionBabelErrorAction,\n  ISetProgramStatusAction,\n  IPageQueryRunAction,\n  IRemoveStaleJobAction,\n  ISetSiteConfig,\n  ISetSiteFunctions,\n  IGatsbyState,\n  IDefinitionMeta,\n  ISetGraphQLDefinitionsAction,\n  IQueryStartAction,\n  IApiFinishedAction,\n  IQueryClearDirtyQueriesListToEmitViaWebsocket,\n  ICreateJobV2FromInternalAction,\n} from \"../types\"\n\nimport { gatsbyConfigSchema } from \"../../joi-schemas/joi\"\nimport { didYouMean } from \"../../utils/did-you-mean\"\nimport {\n  enqueueJob,\n  InternalJob,\n  removeInProgressJob,\n  getInProcessJobPromise,\n} from \"../../utils/jobs/manager\"\nimport { getEngineContext } from \"../../utils/engine-context\"\n\n/**\n * Create a dependency between a page and data. Probably for\n * internal use only.\n * @private\n */\nexport const createPageDependencies = (\n  payload: Array<ICreatePageDependencyActionPayloadType>,\n  plugin = ``\n): ICreatePageDependencyAction => {\n  return {\n    type: `CREATE_COMPONENT_DEPENDENCY`,\n    plugin,\n    payload: payload.map(({ path, nodeId, connection }) => {\n      return {\n        path,\n        nodeId,\n        connection,\n      }\n    }),\n  }\n}\n\n/**\n * Create a dependency between a page and data. Probably for\n * internal use only.\n *\n * Shorthand for createPageDependencies.\n * @private\n */\nexport const createPageDependency = (\n  payload: ICreatePageDependencyActionPayloadType,\n  plugin = ``\n): ICreatePageDependencyAction => createPageDependencies([payload], plugin)\n\n/**\n * Delete dependencies between an array of pages and data. Probably for\n * internal use only. Used when deleting pages.\n * @private\n */\nexport const deleteComponentsDependencies = (\n  paths: Array<string>\n): IDeleteComponentDependenciesAction => {\n  return {\n    type: `DELETE_COMPONENTS_DEPENDENCIES`,\n    payload: {\n      paths,\n    },\n  }\n}\n\n/**\n * When the query watcher extracts a GraphQL query, it calls\n * this to store the query with its component.\n * @private\n */\nexport const replaceComponentQuery = ({\n  query,\n  componentPath,\n}: {\n  query: string\n  componentPath: string\n}): IReplaceComponentQueryAction => {\n  return {\n    type: `REPLACE_COMPONENT_QUERY`,\n    payload: {\n      query,\n      componentPath,\n    },\n  }\n}\n\nexport const apiFinished = (\n  payload: IApiFinishedAction[\"payload\"]\n): IApiFinishedAction => {\n  return {\n    type: `API_FINISHED`,\n    payload,\n  }\n}\n\n/**\n * When the query watcher extracts a \"static\" GraphQL query from <StaticQuery>\n * components, it calls this to store the query with its component.\n * @private\n */\nexport const replaceStaticQuery = (\n  args: {\n    name: string\n    componentPath: string\n    id: string\n    query: string\n    hash: string\n  },\n  plugin: IGatsbyPlugin | null | undefined = null\n): IReplaceStaticQueryAction => {\n  return {\n    type: `REPLACE_STATIC_QUERY`,\n    plugin,\n    payload: args,\n  }\n}\n\n/**\n *\n * Report that a query has been extracted from a component. Used by\n * query-compiler.js.\n * @private\n */\nexport const queryExtracted = (\n  { componentPath, query }: { componentPath: string; query: string },\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IQueryExtractedAction => {\n  return {\n    type: `QUERY_EXTRACTED`,\n    plugin,\n    traceId,\n    payload: { componentPath, query },\n  }\n}\n\n/**\n * Set Definitions for fragment extraction, etc.\n *\n * Used by developer tools such as vscode-graphql & graphiql\n *\n * query-compiler.js.\n * @private\n */\nexport const setGraphQLDefinitions = (\n  definitionsByName: Map<string, IDefinitionMeta>\n): ISetGraphQLDefinitionsAction => {\n  return {\n    type: `SET_GRAPHQL_DEFINITIONS`,\n    payload: definitionsByName,\n  }\n}\n\n/**\n *\n * Report that the Relay Compiler found a graphql error when attempting to extract a query\n * @private\n */\nexport const queryExtractionGraphQLError = (\n  { componentPath, error }: { componentPath: string; error: string },\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IQueryExtractionGraphQLErrorAction => {\n  return {\n    type: `QUERY_EXTRACTION_GRAPHQL_ERROR`,\n    plugin,\n    traceId,\n    payload: { componentPath, error },\n  }\n}\n\n/**\n *\n * Report that babel was able to extract the graphql query.\n * Indicates that the file is free of JS errors.\n * @private\n */\nexport const queryExtractedBabelSuccess = (\n  { componentPath },\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IQueryExtractedBabelSuccessAction => {\n  return {\n    type: `QUERY_EXTRACTION_BABEL_SUCCESS`,\n    plugin,\n    traceId,\n    payload: { componentPath },\n  }\n}\n\n/**\n *\n * Report that the Relay Compiler found a babel error when attempting to extract a query\n * @private\n */\nexport const queryExtractionBabelError = (\n  { componentPath, error }: { componentPath: string; error: Error },\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IQueryExtractionBabelErrorAction => {\n  return {\n    type: `QUERY_EXTRACTION_BABEL_ERROR`,\n    plugin,\n    traceId,\n    payload: { componentPath, error },\n  }\n}\n\n/**\n * Set overall program status e.g. `BOOTSTRAPING` or `BOOTSTRAP_FINISHED`.\n * @private\n */\nexport const setProgramStatus = (\n  status: ProgramStatus,\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): ISetProgramStatusAction => {\n  return {\n    type: `SET_PROGRAM_STATUS`,\n    plugin,\n    traceId,\n    payload: status,\n  }\n}\n\n/**\n * Broadcast that a page's query was run.\n * @private\n */\nexport const pageQueryRun = (\n  payload: IPageQueryRunAction[\"payload\"],\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IPageQueryRunAction => {\n  return {\n    type: `PAGE_QUERY_RUN`,\n    plugin,\n    traceId,\n    payload,\n  }\n}\n\nexport const queryStart = (\n  { path, componentPath, isPage },\n  plugin: IGatsbyPlugin,\n  traceId?: string\n): IQueryStartAction => {\n  return {\n    type: `QUERY_START`,\n    plugin,\n    traceId,\n    payload: { path, componentPath, isPage },\n  }\n}\n\nexport const clearDirtyQueriesListToEmitViaWebsocket =\n  (): IQueryClearDirtyQueriesListToEmitViaWebsocket => {\n    return {\n      type: `QUERY_CLEAR_DIRTY_QUERIES_LIST_TO_EMIT_VIA_WEBSOCKET`,\n    }\n  }\n\n/**\n * Remove jobs which are marked as stale (inputPath doesn't exists)\n * @private\n */\nexport const removeStaleJob = (\n  contentDigest: string,\n  plugin?: IGatsbyPlugin,\n  traceId?: string\n): IRemoveStaleJobAction => {\n  return {\n    type: `REMOVE_STALE_JOB_V2`,\n    plugin,\n    traceId,\n    payload: {\n      contentDigest,\n    },\n  }\n}\n\n/**\n * Set gatsby config\n * @private\n */\nexport const setSiteConfig = (config?: unknown): ISetSiteConfig => {\n  const result = gatsbyConfigSchema.validate(config || {})\n  const normalizedPayload: IGatsbyConfig = result.value\n\n  if (result.error) {\n    const hasUnknownKeys = result.error.details.filter(\n      details => details.type === `object.unknown`\n    )\n\n    if (Array.isArray(hasUnknownKeys) && hasUnknownKeys.length) {\n      const errorMessages = hasUnknownKeys.map(unknown => {\n        const { context, message } = unknown\n        const key = context?.key\n        const suggestion = key && didYouMean(key)\n\n        if (suggestion) {\n          return `${message}. ${suggestion}`\n        }\n\n        return message\n      })\n\n      reporter.panic({\n        id: `10122`,\n        context: {\n          sourceMessage: errorMessages.join(`\\n`),\n        },\n      })\n    }\n\n    reporter.panic({\n      id: `10122`,\n      context: {\n        sourceMessage: result.error.message,\n      },\n    })\n  }\n\n  return {\n    type: `SET_SITE_CONFIG`,\n    payload: normalizedPayload,\n  }\n}\n\n/**\n * Set gatsby functions\n * @private\n */\nexport const setFunctions = (\n  functions: IGatsbyState[\"functions\"]\n): ISetSiteFunctions => {\n  return {\n    type: `SET_SITE_FUNCTIONS`,\n    payload: functions,\n  }\n}\n\nexport const deleteNodeManifests = (): IDeleteNodeManifests => {\n  return {\n    type: `DELETE_NODE_MANIFESTS`,\n  }\n}\n\nexport const createJobV2FromInternalJob =\n  (internalJob: InternalJob): ICreateJobV2FromInternalAction =>\n  (dispatch, getState): Promise<Record<string, unknown>> => {\n    const jobContentDigest = internalJob.contentDigest\n    const currentState = getState()\n\n    // Check if we already ran this job before, if yes we return the result\n    // We have an inflight (in progress) queue inside the jobs manager to make sure\n    // we don't waste resources twice during the process\n    if (\n      currentState.jobsV2 &&\n      currentState.jobsV2.complete.has(jobContentDigest)\n    ) {\n      return Promise.resolve(\n        currentState.jobsV2.complete.get(jobContentDigest)!.result\n      )\n    }\n    const engineContext = getEngineContext()\n\n    // Always set context, even if engineContext is undefined.\n    // We do this because the final list of jobs for a given engine request includes both:\n    //  - jobs with the same requestId\n    //  - jobs without requestId (technically with requestId === \"\")\n    //\n    // See https://nodejs.org/dist/latest-v16.x/docs/api/async_context.html#async_context_troubleshooting_context_loss\n    // on cases when async context could be lost.\n    dispatch({\n      type: `SET_JOB_V2_CONTEXT`,\n      payload: {\n        job: internalJob,\n        requestId: engineContext?.requestId ?? ``,\n      },\n    })\n\n    const inProgressJobPromise = getInProcessJobPromise(jobContentDigest)\n    if (inProgressJobPromise) {\n      return inProgressJobPromise\n    }\n\n    dispatch({\n      type: `CREATE_JOB_V2`,\n      payload: {\n        job: internalJob,\n      },\n      plugin: { name: internalJob.plugin.name },\n    })\n\n    const enqueuedJobPromise = enqueueJob(internalJob)\n    return enqueuedJobPromise.then(result => {\n      // store the result in redux so we have it for the next run\n      dispatch({\n        type: `END_JOB_V2`,\n        plugin: { name: internalJob.plugin.name },\n        payload: {\n          jobContentDigest,\n          result,\n        },\n      })\n\n      // remove the job from our inProgressJobQueue as it's available in our done state.\n      // this is a perf optimisations so we don't grow our memory too much when using gatsby preview\n      removeInProgressJob(jobContentDigest)\n\n      return result\n    })\n  }\n"],"file":"internal.js"}