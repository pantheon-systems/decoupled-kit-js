{"version":3,"sources":["../../src/services/calculate-dirty-queries.ts"],"names":["calculateDirtyQueries","store","websocketManager","currentlyHandledPendingQueryRuns","state","getState","queryIds","queriesToRun","process","env","gatsby_executing_command","GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND","pagePathFilter","Set","activePaths","activePath","add","pendingQuery","filter","queryId","startsWith","has"],"mappings":";;;;;AAAA;;AAGA;;AAEO,eAAeA,qBAAf,CAAqC;AAC1CC,EAAAA,KAD0C;AAE1CC,EAAAA,gBAF0C;AAG1CC,EAAAA;AAH0C,CAArC,EAMJ;AACD,gCAAYF,KAAZ;AACA,QAAMG,KAAK,GAAGH,KAAK,CAACI,QAAN,EAAd;AACA,QAAMC,QAAuB,GAAG,8BAAkBF,KAAlB,CAAhC;AAEA,MAAIG,YAAY,GAAGD,QAAnB;;AAEA,MACEE,OAAO,CAACC,GAAR,CAAYC,wBAAZ,KAA0C,SAA1C,IACAF,OAAO,CAACC,GAAR,CAAYE,mCAFd,EAGE;AACA;AACA;AACA,UAAMC,cAAc,GAAG,IAAIC,GAAJ,CAAQ,CAAE,WAAF,EAAe,gBAAf,CAAR,CAAvB,CAHA,CAKA;AACA;;AACA,QAAIX,gBAAJ,aAAIA,gBAAJ,eAAIA,gBAAgB,CAAEY,WAAtB,EAAmC;AACjC,WAAK,MAAMC,UAAX,IAAyBb,gBAAgB,CAACY,WAA1C,EAAuD;AACrDF,QAAAA,cAAc,CAACI,GAAf,CAAmBD,UAAnB;AACD;AACF,KAXD,CAaA;AACA;;;AACA,QAAIZ,gCAAJ,EAAsC;AACpC,WAAK,MAAMc,YAAX,IAA2Bd,gCAA3B,EAA6D;AAC3DS,QAAAA,cAAc,CAACI,GAAf,CAAmBC,YAAnB;AACD;AACF,KAnBD,CAqBA;;;AACAV,IAAAA,YAAY,GAAGD,QAAQ,CAACY,MAAT,CACbC,OAAO,IAAIA,OAAO,CAACC,UAAR,CAAoB,MAApB,KAA8BR,cAAc,CAACS,GAAf,CAAmBF,OAAnB,CAD5B,CAAf;AAGD;;AAED,SAAO;AACLb,IAAAA,QAAQ,EAAE,0BAAcC,YAAd;AADL,GAAP;AAGD","sourcesContent":["import { calcDirtyQueryIds, groupQueryIds } from \"../query\"\nimport { IGroupedQueryIds } from \"./\"\nimport { IQueryRunningContext } from \"../state-machines/query-running/types\"\nimport { assertStore } from \"../utils/assert-store\"\n\nexport async function calculateDirtyQueries({\n  store,\n  websocketManager,\n  currentlyHandledPendingQueryRuns,\n}: Partial<IQueryRunningContext>): Promise<{\n  queryIds: IGroupedQueryIds\n}> {\n  assertStore(store)\n  const state = store.getState()\n  const queryIds: Array<string> = calcDirtyQueryIds(state)\n\n  let queriesToRun = queryIds\n\n  if (\n    process.env.gatsby_executing_command === `develop` &&\n    process.env.GATSBY_EXPERIMENTAL_QUERY_ON_DEMAND\n  ) {\n    // 404 are special cases in our runtime that ideally use\n    // generic things to work, but for now they have special handling\n    const pagePathFilter = new Set([`/404.html`, `/dev-404-page/`])\n\n    // we want to make sure we run queries for pages that user currently\n    // view in the browser\n    if (websocketManager?.activePaths) {\n      for (const activePath of websocketManager.activePaths) {\n        pagePathFilter.add(activePath)\n      }\n    }\n\n    // we also want to make sure we include pages that were requested from\n    // via `page-data` fetches or websocket requests\n    if (currentlyHandledPendingQueryRuns) {\n      for (const pendingQuery of currentlyHandledPendingQueryRuns) {\n        pagePathFilter.add(pendingQuery)\n      }\n    }\n\n    // static queries are also not on demand\n    queriesToRun = queryIds.filter(\n      queryId => queryId.startsWith(`sq--`) || pagePathFilter.has(queryId)\n    )\n  }\n\n  return {\n    queryIds: groupQueryIds(queriesToRun),\n  }\n}\n"],"file":"calculate-dirty-queries.js"}