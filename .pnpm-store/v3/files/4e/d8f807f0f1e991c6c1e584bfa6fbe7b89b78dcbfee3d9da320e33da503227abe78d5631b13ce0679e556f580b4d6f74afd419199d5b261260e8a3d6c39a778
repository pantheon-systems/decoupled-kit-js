{
  "version": 3,
  "sources": ["../../src/types.ts"],
  "sourcesContent": ["import type {\n  BundlerState,\n  ListenerFunction,\n  ReactDevToolsMode,\n  SandpackBundlerFiles,\n  SandpackClient,\n  SandpackError,\n  SandpackMessage,\n  UnsubscribeFunction,\n} from \"@codesandbox/sandpack-client\";\n\nimport type { CodeEditorProps } from \".\";\n\nexport type SandpackClientDispatch = (\n  msg: SandpackMessage,\n  clientId?: string\n) => void;\n\nexport type SandpackClientListen = (\n  listener: ListenerFunction,\n  clientId?: string\n) => UnsubscribeFunction;\n\nexport type SandpackContext = SandpackState & {\n  dispatch: SandpackClientDispatch;\n  listen: SandpackClientListen;\n};\n\nexport interface SandpackState {\n  bundlerState: BundlerState | undefined;\n  openPaths: string[];\n  activePath: string;\n  startRoute?: string;\n\n  /**\n   * Returns the current state of the editor, meaning that any\n   * changes from the original `files` must return a `dirty` value;\n   * otherwise, it'll return `pristine`\n   */\n  editorState: EditorState;\n  error: SandpackError | null;\n  files: SandpackBundlerFiles;\n  environment?: SandboxEnvironment;\n  status: SandpackStatus;\n  initMode: SandpackInitMode;\n  clients: Record<string, SandpackClient>;\n\n  runSandpack: () => void;\n  registerBundler: (iframe: HTMLIFrameElement, clientId: string) => void;\n  unregisterBundler: (clientId: string) => void;\n  updateFile: (path: string, newCode: string) => void;\n  updateCurrentFile: (newCode: string) => void;\n  openFile: (path: string) => void;\n  closeFile: (path: string) => void;\n  deleteFile: (path: string) => void;\n  setActiveFile: (path: string) => void;\n  resetFile: (path: string) => void;\n  resetAllFiles: () => void;\n  registerReactDevTools: (value: ReactDevToolsMode) => void;\n\n  /**\n   * Element refs\n   * Different components inside the SandpackProvider might register certain elements of interest for sandpack\n   * eg: lazy anchor - if no component registers this, then the sandpack runs on mount, without lazy mode\n   */\n  lazyAnchorRef: React.RefObject<HTMLDivElement>;\n\n  /**\n   * eg: error screen - if no component registers this, the bundler needs to show the custom error screen\n   * When the value is boolean, we only care if the components have the responsibility to render the elements,\n   * we don't need the actual element reference\n   */\n  errorScreenRegisteredRef: React.MutableRefObject<boolean>;\n  openInCSBRegisteredRef: React.MutableRefObject<boolean>;\n  loadingScreenRegisteredRef: React.MutableRefObject<boolean>;\n}\n\nexport type SandpackStatus =\n  | \"initial\"\n  | \"idle\"\n  | \"running\"\n  | \"timeout\"\n  | \"done\";\nexport type EditorState = \"pristine\" | \"dirty\";\n\nexport interface SandboxTemplate {\n  files: Record<string, SandpackFile>;\n  dependencies: Record<string, string>;\n  devDependencies?: Record<string, string>;\n  entry: string;\n  main: string;\n  environment: SandboxEnvironment;\n}\n\nexport interface SandpackFile {\n  code: string;\n  hidden?: boolean;\n  active?: boolean;\n  readOnly?: boolean;\n}\n\nexport type SandpackFiles = Record<string, string | SandpackFile>;\n\nexport interface SandpackSetup {\n  /**\n   * Examples:\n   * ```js\n   * {\n   *  \"react\": \"latest\",\n   *  \"@material-ui/core\": \"4.12.3\",\n   * }\n   * ```\n   */\n  dependencies?: Record<string, string>;\n\n  /**\n   * The entry file is the starting point of the bundle process.\n   *\n   * If you change the path of the entry file, make sure you control all the files that go into the bundle process, as prexisting settings in the template might not work anymore.\n   */\n  entry?: string;\n  main?: string;\n  files?: SandpackFiles;\n  environment?: SandboxEnvironment;\n}\n\n/**\n * `immediate`: It immediately mounts all components, such as the code-editor\n * and the preview - this option might overload the memory usage\n * and resource from the browser on a page with multiple instances;\n *\n * `lazy`: Only initialize the components when the user is about to scroll\n * them to the viewport and keep these components mounted until the user\n * leaves the page - this is the default value;\n *\n * `user-visible`: Only initialize the components when the user is about\n * to scroll them to the viewport, but differently from lazy, this option\n * unmounts those components once it's no longer in the viewport.\n */\nexport type SandpackInitMode = \"immediate\" | \"lazy\" | \"user-visible\";\n\nexport type SandboxEnvironment =\n  | \"angular-cli\"\n  | \"create-react-app\"\n  | \"create-react-app-typescript\"\n  | \"svelte\"\n  | \"parcel\"\n  | \"vue-cli\"\n  | \"static\";\n\nexport type SandpackPredefinedTemplate =\n  | \"angular\"\n  | \"react\"\n  | \"react-ts\"\n  | \"vanilla\"\n  | \"vanilla-ts\"\n  | \"vue\"\n  | \"vue3\"\n  | \"svelte\";\n\nexport type SandpackPredefinedTheme =\n  | \"light\"\n  | \"dark\"\n  | \"sandpack-dark\"\n  | \"night-owl\"\n  | \"aqua-blue\"\n  | \"github-light\"\n  | \"monokai-pro\";\n\nexport interface SandpackSyntaxStyle {\n  color?: string;\n  fontStyle?: \"normal\" | \"italic\";\n  fontWeight?:\n    | \"normal\"\n    | \"bold\"\n    | \"100\"\n    | \"200\"\n    | \"300\"\n    | \"400\"\n    | \"500\"\n    | \"600\"\n    | \"700\"\n    | \"800\"\n    | \"900\";\n  textDecoration?:\n    | \"none\"\n    | \"underline\"\n    | \"line-through\"\n    | \"underline line-through\";\n}\n\nexport interface SandpackTheme {\n  palette: {\n    activeText: string;\n    defaultText: string;\n    inactiveText: string;\n    activeBackground: string;\n    defaultBackground: string;\n    inputBackground: string;\n    accent: string;\n    errorBackground: string;\n    errorForeground: string;\n  };\n  syntax: {\n    plain: string | SandpackSyntaxStyle;\n    comment: string | SandpackSyntaxStyle;\n    keyword: string | SandpackSyntaxStyle;\n    definition: string | SandpackSyntaxStyle;\n    punctuation: string | SandpackSyntaxStyle;\n    property: string | SandpackSyntaxStyle;\n    tag: string | SandpackSyntaxStyle;\n    static: string | SandpackSyntaxStyle;\n    string?: string | SandpackSyntaxStyle; // use static as fallback\n  };\n  typography: {\n    bodyFont: string;\n    monoFont: string;\n    fontSize: string;\n    lineHeight: string;\n  };\n}\n\nexport type SandpackPartialTheme = DeepPartial<SandpackTheme>;\n\nexport type SandpackThemeProp =\n  | SandpackPredefinedTheme\n  | SandpackPartialTheme\n  | \"auto\";\n\n/**\n * Custom properties to be used in the SandpackCodeEditor component,\n * some of which are exclusive to customize the CodeMirror instance.\n */\nexport interface SandpackCodeOptions {\n  /**\n   * CodeMirror extensions for the editor state, which can\n   * provide extra features and functionalities to the editor component.\n   */\n  extensions?: CodeEditorProps[\"extensions\"];\n  /**\n   * Property to register CodeMirror extension keymap.\n   */\n  extensionsKeymap?: CodeEditorProps[\"extensionsKeymap\"];\n}\n\n/**\n * @hidden\n */\nexport type DeepPartial<Type> = {\n  [Property in keyof Type]?: DeepPartial<Type[Property]>;\n};\n\nexport interface FileResolver {\n  isFile: (path: string) => Promise<boolean>;\n  readFile: (path: string) => Promise<string>;\n}\n"],
  "mappings": ";;;;AAAA;",
  "names": []
}
