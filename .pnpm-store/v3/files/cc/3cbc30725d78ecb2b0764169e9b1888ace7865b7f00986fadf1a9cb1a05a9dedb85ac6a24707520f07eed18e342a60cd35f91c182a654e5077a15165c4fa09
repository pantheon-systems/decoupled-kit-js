{"version":3,"sources":["../../src/utils/stack-trace-utils.ts"],"names":["fs","require","path","chalk","isNodeInternalModulePath","getDirName","arg","dirname","gatsbyLocation","resolve","reduxThunkLocation","reduxLocation","getNonGatsbyCallSite","stackTrace","get","find","callSite","getFileName","includes","getNonGatsbyCodeFrame","highlightCode","stack","parse","name","message","fileName","line","getLineNumber","column","getColumnNumber","code","readFileSync","encoding","codeFrame","start","getNonGatsbyCodeFrameFormatted","possibleCodeFrame","bold","findOriginalSourcePositionAndContent","webpackSource","position","SourceMapConsumer","with","consumer","sourcePosition","originalPositionFor","source","sourceContent","sourceContentFor"],"mappings":"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","sourcesContent":["import stackTrace, { StackFrame } from \"stack-trace\"\nimport { codeFrameColumns } from \"@babel/code-frame\"\nimport {\n  NullableMappedPosition,\n  SourceMapConsumer,\n  RawSourceMap,\n  RawIndexMap,\n} from \"source-map\"\n\nconst fs = require(`fs-extra`)\nconst path = require(`path`)\nconst chalk = require(`chalk`)\nconst { isNodeInternalModulePath } = require(`gatsby-core-utils`)\n\nconst getDirName = (arg: unknown): string => {\n  // Caveat related to executing in engines:\n  // After webpack bundling we would get number here (webpack module id) and that would crash when doing\n  // path.dirname(number).\n  if (typeof arg === `string`) {\n    return path.dirname(arg)\n  }\n  return `-cant-resolve-`\n}\n\nconst gatsbyLocation = getDirName(require.resolve(`gatsby/package.json`))\nconst reduxThunkLocation = getDirName(\n  require.resolve(`redux-thunk/package.json`)\n)\nconst reduxLocation = getDirName(require.resolve(`redux/package.json`))\n\nconst getNonGatsbyCallSite = (): StackFrame | undefined =>\n  stackTrace\n    .get()\n    .find(\n      callSite =>\n        callSite &&\n        callSite.getFileName() &&\n        !callSite.getFileName().includes(gatsbyLocation) &&\n        !callSite.getFileName().includes(reduxLocation) &&\n        !callSite.getFileName().includes(reduxThunkLocation) &&\n        !isNodeInternalModulePath(callSite.getFileName())\n    )\n\ninterface ICodeFrame {\n  fileName: string\n  line: number\n  column: number\n  codeFrame: string\n}\n\nexport const getNonGatsbyCodeFrame = ({\n  highlightCode = true,\n  stack,\n}: {\n  highlightCode?: boolean\n  stack?: string\n} = {}): null | ICodeFrame => {\n  let callSite\n  if (stack) {\n    callSite = stackTrace.parse({ stack, name: ``, message: `` })[0]\n  } else {\n    callSite = getNonGatsbyCallSite()\n  }\n\n  if (!callSite) {\n    return null\n  }\n\n  const fileName = callSite.getFileName()\n  const line = callSite.getLineNumber()\n  const column = callSite.getColumnNumber()\n\n  const code = fs.readFileSync(fileName, { encoding: `utf-8` })\n  return {\n    fileName,\n    line,\n    column,\n    codeFrame: codeFrameColumns(\n      code,\n      {\n        start: {\n          line,\n          column,\n        },\n      },\n      {\n        highlightCode,\n      }\n    ),\n  }\n}\n\nexport const getNonGatsbyCodeFrameFormatted = ({\n  highlightCode = true,\n  stack,\n}: {\n  highlightCode?: boolean\n  stack?: string\n} = {}): null | string => {\n  const possibleCodeFrame = getNonGatsbyCodeFrame({\n    highlightCode,\n    stack,\n  })\n\n  if (!possibleCodeFrame) {\n    return null\n  }\n\n  const { fileName, line, column, codeFrame } = possibleCodeFrame\n  return `File ${chalk.bold(`${fileName}:${line}:${column}`)}\\n${codeFrame}`\n}\n\ninterface IOriginalSourcePositionAndContent {\n  sourcePosition: NullableMappedPosition | null\n  sourceContent: string | null\n}\n\nexport async function findOriginalSourcePositionAndContent(\n  webpackSource: RawSourceMap | RawIndexMap | string,\n  position: { line: number; column: number | null }\n): Promise<IOriginalSourcePositionAndContent> {\n  return await SourceMapConsumer.with(webpackSource, null, consumer => {\n    const sourcePosition = consumer.originalPositionFor({\n      line: position.line,\n      column: position.column ?? 0,\n    })\n\n    if (!sourcePosition.source) {\n      return {\n        sourcePosition: null,\n        sourceContent: null,\n      }\n    }\n\n    const sourceContent: string | null =\n      consumer.sourceContentFor(sourcePosition.source, true) ?? null\n\n    return {\n      sourcePosition,\n      sourceContent,\n    }\n  })\n}\n"],"file":"stack-trace-utils.js"}