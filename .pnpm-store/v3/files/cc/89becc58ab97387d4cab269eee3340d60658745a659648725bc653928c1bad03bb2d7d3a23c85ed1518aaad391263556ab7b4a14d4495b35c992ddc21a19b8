{"version":3,"sources":["../../../src/steps/ingest-remote-schema/write-queries-to-disk.js"],"names":["writeQueriesToDisk","reporter","pluginOptions","debug","graphql","remoteSchema","store","getState","schemaWasChanged","activity","activityTimer","start","wordPressGraphQLDirectory","process","cwd","fs","remove","nodeListQueries","nodeQuery","previewQuery","typeInfo","Object","values","nodeQueries","directory","nodesTypeName","ensureDir","writeFile","prettier","format","parser","nonNodeQuery","end"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEO,MAAMA,kBAAkB,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,EAAqBC,aAArB,KAAuC;AAAA;;AACvE,MAAI,EAACA,aAAD,aAACA,aAAD,uCAACA,aAAa,CAAEC,KAAhB,0EAAC,qBAAsBC,OAAvB,kDAAC,sBAA+BJ,kBAAhC,CAAJ,EAAwD;AACtD;AACD;;AAED,QAAM;AAAEK,IAAAA;AAAF,MAAmBC,eAAMC,QAAN,EAAzB,CALuE,CAOvE;AACA;;;AACA,MAAI,CAACF,YAAY,CAACG,gBAAlB,EAAoC;AAClC;AACD;;AAED,QAAMC,QAAQ,GAAGR,QAAQ,CAACS,aAAT,CACf,wCAAkB,yDAAlB,CADe,CAAjB;AAIAD,EAAAA,QAAQ,CAACE,KAAT;AACA,QAAMC,yBAAyB,GAAI,GAAEC,OAAO,CAACC,GAAR,EAAc,oBAAnD,CAlBuE,CAoBvE;;AACA,QAAMC,iBAAGC,MAAH,CAAUJ,yBAAV,CAAN;;AAEA,OAAK,MAAM;AACTK,IAAAA,eADS;AAETC,IAAAA,SAFS;AAGTC,IAAAA,YAHS;AAITC,IAAAA;AAJS,GAAX,IAKKC,MAAM,CAACC,MAAP,CAAcjB,YAAY,CAACkB,WAA3B,CALL,EAK8C;AAC5C,UAAMC,SAAS,GAAI,GAAEZ,yBAA0B,IAAGQ,QAAQ,CAACK,aAAc,EAAzE;AAEA,UAAMV,iBAAGW,SAAH,CAAaF,SAAb,CAAN;AAEA,UAAMT,iBAAGY,SAAH,CACH,GAAEH,SAAU,0BADT,EAEJI,kBAASC,MAAT,CAAgBZ,eAAe,CAAC,CAAD,CAA/B,EAAoC;AAAEa,MAAAA,MAAM,EAAG;AAAX,KAApC,CAFI,EAGH,MAHG,CAAN;AAMA,UAAMf,iBAAGY,SAAH,CACH,GAAEH,SAAU,4BADT,EAEJI,kBAASC,MAAT,CAAgBX,SAAhB,EAA2B;AAAEY,MAAAA,MAAM,EAAG;AAAX,KAA3B,CAFI,EAGH,MAHG,CAAN;AAMA,UAAMf,iBAAGY,SAAH,CACH,GAAEH,SAAU,6BADT,EAEJI,kBAASC,MAAT,CAAgBV,YAAhB,EAA8B;AAAEW,MAAAA,MAAM,EAAG;AAAX,KAA9B,CAFI,EAGH,MAHG,CAAN;AAKD;;AAED,QAAMN,SAAS,GAAI,GAAEZ,yBAA0B,YAA/C;AAEA,QAAMG,iBAAGW,SAAH,CAAaF,SAAb,CAAN;AAEA,QAAMT,iBAAGY,SAAH,CACH,GAAEH,SAAU,8BADT,EAEJI,kBAASC,MAAT,CAAgBxB,YAAY,CAAC0B,YAA7B,EAA2C;AAAED,IAAAA,MAAM,EAAG;AAAX,GAA3C,CAFI,CAAN;AAKArB,EAAAA,QAAQ,CAACuB,GAAT;AACD,CA9DM","sourcesContent":["import fs from \"fs-extra\"\nimport store from \"~/store\"\nimport prettier from \"prettier\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\n\nexport const writeQueriesToDisk = async ({ reporter }, pluginOptions) => {\n  if (!pluginOptions?.debug?.graphql?.writeQueriesToDisk) {\n    return\n  }\n\n  const { remoteSchema } = store.getState()\n\n  // the queries only change when the remote schema changes\n  // no need to write them to disk in that case\n  if (!remoteSchema.schemaWasChanged) {\n    return\n  }\n\n  const activity = reporter.activityTimer(\n    formatLogMessage(`writing GraphQL queries to disk at ./WordPress/GraphQL/`)\n  )\n\n  activity.start()\n  const wordPressGraphQLDirectory = `${process.cwd()}/WordPress/GraphQL`\n\n  // remove before writing in case there are old types\n  await fs.remove(wordPressGraphQLDirectory)\n\n  for (const {\n    nodeListQueries,\n    nodeQuery,\n    previewQuery,\n    typeInfo,\n  } of Object.values(remoteSchema.nodeQueries)) {\n    const directory = `${wordPressGraphQLDirectory}/${typeInfo.nodesTypeName}`\n\n    await fs.ensureDir(directory)\n\n    await fs.writeFile(\n      `${directory}/node-list-query.graphql`,\n      prettier.format(nodeListQueries[0], { parser: `graphql` }),\n      `utf8`\n    )\n\n    await fs.writeFile(\n      `${directory}/node-single-query.graphql`,\n      prettier.format(nodeQuery, { parser: `graphql` }),\n      `utf8`\n    )\n\n    await fs.writeFile(\n      `${directory}/node-preview-query.graphql`,\n      prettier.format(previewQuery, { parser: `graphql` }),\n      `utf8`\n    )\n  }\n\n  const directory = `${wordPressGraphQLDirectory}/RootQuery`\n\n  await fs.ensureDir(directory)\n\n  await fs.writeFile(\n    `${directory}/non-node-root-query.graphql`,\n    prettier.format(remoteSchema.nonNodeQuery, { parser: `graphql` })\n  )\n\n  activity.end()\n}\n"],"file":"write-queries-to-disk.js"}