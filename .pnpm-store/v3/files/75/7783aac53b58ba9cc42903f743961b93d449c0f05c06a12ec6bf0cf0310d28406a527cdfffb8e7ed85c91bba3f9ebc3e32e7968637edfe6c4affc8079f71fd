{"version":3,"sources":["../../../src/schema/graphql-engine/print-plugins.ts"],"names":["schemaCustomizationAPIs","Set","excludePlugins","includePlugins","schemaCustomizationPluginsPath","process","cwd","printQueryEnginePlugins","fs","remove","e","writeFile","renderQueryEnginePlugins","flattenedPlugins","store","getState","usedPlugins","filter","p","has","name","nodeAPIs","some","api","usedSubPlugins","findSubPlugins","render","relativePluginPath","resolve","path","relative","dirname","uniqGatsbyNode","uniq","uniqSubPlugins","sanitizedUsedPlugins","map","plugin","pluginFilepath","subPluginPaths","undefined","pluginsWithWorkers","filterPluginsWithWorkers","subPluginModuleToImportNameMapping","Map","imports","i","importName","set","modulePath","gatsbyNodeExports","gatsbyWorkerExports","output","join","JSON","stringify","pluginOptions","_","cloneDeepWith","value","module","subPlugin","get","replace","plugins","Boolean","err","getSubpluginsByPluginPath","parentPlugin","segments","split","roots","segment","flat","root","allFlattenedPlugins","usedSubPluginResolves","flatMap","subPlugins","subPluginPath","push","Array","from","values"],"mappings":"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","sourcesContent":["/* eslint @typescript-eslint/no-unused-vars: [\"error\", { \"ignoreRestSiblings\": true }] */\nimport * as fs from \"fs-extra\"\nimport * as path from \"path\"\nimport * as _ from \"lodash\"\nimport { slash } from \"gatsby-core-utils\"\nimport { store } from \"../../redux\"\nimport { IGatsbyState } from \"../../redux/types\"\nimport { requireGatsbyPlugin } from \"../../utils/require-gatsby-plugin\"\n\nexport const schemaCustomizationAPIs = new Set([\n  `setFieldsOnGraphQLNodeType`,\n  `createSchemaCustomization`,\n  `createResolvers`,\n])\n\nconst excludePlugins = new Set([`internal-data-bridge`])\nconst includePlugins = new Set([`gatsby-plugin-sharp`])\n\n// Emit file that imports required node APIs\nconst schemaCustomizationPluginsPath =\n  process.cwd() + `/.cache/query-engine-plugins.js`\n\nexport async function printQueryEnginePlugins(): Promise<void> {\n  try {\n    await fs.remove(schemaCustomizationPluginsPath)\n  } catch (e) {\n    // no-op\n  }\n  return await fs.writeFile(\n    schemaCustomizationPluginsPath,\n    renderQueryEnginePlugins()\n  )\n}\n\nfunction renderQueryEnginePlugins(): string {\n  const { flattenedPlugins } = store.getState()\n  const usedPlugins = flattenedPlugins.filter(\n    p =>\n      includePlugins.has(p.name) ||\n      (!excludePlugins.has(p.name) &&\n        p.nodeAPIs.some(api => schemaCustomizationAPIs.has(api)))\n  )\n  const usedSubPlugins = findSubPlugins(usedPlugins, flattenedPlugins)\n  return render(usedPlugins, usedSubPlugins)\n}\n\nfunction relativePluginPath(resolve: string): string {\n  return slash(\n    path.relative(path.dirname(schemaCustomizationPluginsPath), resolve)\n  )\n}\n\nfunction render(\n  usedPlugins: IGatsbyState[\"flattenedPlugins\"],\n  usedSubPlugins: IGatsbyState[\"flattenedPlugins\"]\n): string {\n  const uniqGatsbyNode = uniq(usedPlugins)\n  const uniqSubPlugins = uniq(usedSubPlugins)\n\n  const sanitizedUsedPlugins = usedPlugins.map(plugin => {\n    // TODO: We don't support functions in pluginOptions here\n    return {\n      ...plugin,\n      resolve: ``,\n      pluginFilepath: ``,\n      subPluginPaths: undefined,\n    }\n  })\n\n  const pluginsWithWorkers = filterPluginsWithWorkers(uniqGatsbyNode)\n\n  const subPluginModuleToImportNameMapping = new Map<string, string>()\n  const imports: Array<string> = [\n    ...uniqGatsbyNode.map(\n      (plugin, i) =>\n        `import * as pluginGatsbyNode${i} from \"gatsby/dist/schema/graphql-engine/webpack-remove-apis-loader!${relativePluginPath(\n          plugin.resolve\n        )}/gatsby-node\"`\n    ),\n    ...pluginsWithWorkers.map(\n      (plugin, i) =>\n        `import * as pluginGatsbyWorker${i} from \"${relativePluginPath(\n          plugin.resolve\n        )}/gatsby-worker\"`\n    ),\n    ...uniqSubPlugins.map((plugin, i) => {\n      const importName = `subPlugin${i}`\n      subPluginModuleToImportNameMapping.set(plugin.modulePath!, importName)\n      return `import * as ${importName} from \"${relativePluginPath(\n        plugin.modulePath!\n      )}\"`\n    }),\n  ]\n  const gatsbyNodeExports = uniqGatsbyNode.map(\n    (plugin, i) => `\"${plugin.name}\": pluginGatsbyNode${i},`\n  )\n  const gatsbyWorkerExports = pluginsWithWorkers.map(\n    (plugin, i) => `\"${plugin.name}\": pluginGatsbyWorker${i},`\n  )\n  const output = `\n${imports.join(`\\n`)}\n\nexport const gatsbyNodes = {\n${gatsbyNodeExports.join(`\\n`)}\n}\n\nexport const gatsbyWorkers = {\n${gatsbyWorkerExports.join(`\\n`)}\n}\n\nexport const flattenedPlugins =\n  ${JSON.stringify(\n    sanitizedUsedPlugins.map(plugin => {\n      return {\n        ...plugin,\n        pluginOptions: _.cloneDeepWith(\n          plugin.pluginOptions,\n          (value: any): any => {\n            if (\n              typeof value === `object` &&\n              value !== null &&\n              value.module &&\n              value.modulePath\n            ) {\n              const { module, modulePath, ...subPlugin } = value\n              return {\n                ...subPlugin,\n                module: `_SKIP_START_${subPluginModuleToImportNameMapping.get(\n                  modulePath\n                )}_SKIP_END_`,\n                resolve: ``,\n                pluginFilepath: ``,\n              }\n            }\n            return undefined\n          }\n        ),\n      }\n    }),\n    null,\n    2\n  ).replace(/\"_SKIP_START_|_SKIP_END_\"/g, ``)}\n`\n  return output\n}\n\nfunction filterPluginsWithWorkers(\n  plugins: IGatsbyState[\"flattenedPlugins\"]\n): IGatsbyState[\"flattenedPlugins\"] {\n  return plugins.filter(plugin => {\n    try {\n      return Boolean(requireGatsbyPlugin(plugin, `gatsby-worker`))\n    } catch (err) {\n      return false\n    }\n  })\n}\n\ntype ArrayElement<ArrayType extends Array<unknown>> = ArrayType extends Array<\n  infer ElementType\n>\n  ? ElementType\n  : never\n\nfunction getSubpluginsByPluginPath(\n  parentPlugin: ArrayElement<IGatsbyState[\"flattenedPlugins\"]>,\n  path: string\n): IGatsbyState[\"flattenedPlugins\"] {\n  const segments = path.split(`.`)\n  let roots: Array<any> = [parentPlugin.pluginOptions]\n\n  for (const segment of segments) {\n    if (segment === `[]`) {\n      roots = roots.flat()\n    } else {\n      roots = roots.map(root => root[segment])\n    }\n  }\n  roots = roots.flat()\n\n  return roots\n}\n\nfunction findSubPlugins(\n  plugins: IGatsbyState[\"flattenedPlugins\"],\n  allFlattenedPlugins: IGatsbyState[\"flattenedPlugins\"]\n): IGatsbyState[\"flattenedPlugins\"] {\n  const usedSubPluginResolves = new Set<string>(\n    plugins\n      .flatMap(plugin => {\n        if (plugin.subPluginPaths) {\n          const subPlugins: IGatsbyState[\"flattenedPlugins\"] = []\n          for (const subPluginPath of plugin.subPluginPaths) {\n            subPlugins.push(...getSubpluginsByPluginPath(plugin, subPluginPath))\n          }\n          return subPlugins\n        }\n\n        return []\n      })\n      .map(plugin => plugin[`resolve`])\n      .filter((p: unknown): p is string => typeof p === `string`)\n  )\n  return allFlattenedPlugins.filter(\n    p => usedSubPluginResolves.has(p.resolve) && !!p.modulePath\n  )\n}\n\nfunction uniq(\n  plugins: IGatsbyState[\"flattenedPlugins\"]\n): IGatsbyState[\"flattenedPlugins\"] {\n  return Array.from(new Map(plugins.map(p => [p.resolve, p])).values())\n}\n"],"file":"print-plugins.js"}