{"version":3,"sources":["../../../../src/datastore/lmdb/query/suggest-index.ts"],"names":["suggestIndex","filter","sort","maxFields","filterQueries","filterQueriesThatCanUseIndex","getQueriesThatCanUseIndex","sortFields","getSortFieldsThatCanUseIndex","length","dedupeAndTrim","toIndexFields","sortDirection","eqFilterQueries","getEqQueries","eqFilterFields","overlap","findOverlappingFields","name","has","canUseIndex","Set","DbComparator","EQ","IN","GTE","LTE","GT","LT","NIN","NE","all","q","comparator","querySortArg","fields","order","initialOrder","i","field","push","fieldName","filterQuery","find","add","queries","map","Map","slice"],"mappings":"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","sourcesContent":["import { IRunQueryArgs } from \"../../types\"\nimport {\n  createDbQueriesFromObject,\n  DbComparator,\n  DbQuery,\n  dbQueryToDottedField,\n  getFilterStatement,\n  prepareQueryArgs,\n  sortBySpecificity,\n} from \"../../common/query\"\nimport { isDesc } from \"./common\"\n\ninterface ISelectIndexArgs {\n  filter: IRunQueryArgs[\"queryArgs\"][\"filter\"]\n  sort: IRunQueryArgs[\"queryArgs\"][\"sort\"]\n  maxFields?: number\n}\n\ntype IndexField = [fieldName: string, orderDirection: number]\ntype IndexFields = Array<IndexField>\n\n/**\n * Suggest index fields for this combination of filter and sort.\n *\n * Prioritizes sort fields over filter fields when can't use index\n * for both because sorting is expensive both CPU and memory-wise.\n */\nexport function suggestIndex({\n  filter,\n  sort,\n  maxFields = 6,\n}: ISelectIndexArgs): Array<IndexField> {\n  const filterQueries = createDbQueriesFromObject(prepareQueryArgs(filter))\n  const filterQueriesThatCanUseIndex = getQueriesThatCanUseIndex(filterQueries)\n  const sortFields: Array<IndexField> = getSortFieldsThatCanUseIndex(sort)\n\n  if (!sortFields.length && !filterQueriesThatCanUseIndex.length) {\n    return []\n  }\n  if (!filterQueriesThatCanUseIndex.length) {\n    return dedupeAndTrim(sortFields, maxFields)\n  }\n  if (!sortFields.length) {\n    return dedupeAndTrim(toIndexFields(filterQueriesThatCanUseIndex), maxFields)\n  }\n\n  // Combined index for filter+sort only makes sense when all prefix fields have `eq` predicate\n  // Same as https://docs.mongodb.com/manual/tutorial/sort-results-with-indexes/#sort-and-non-prefix-subset-of-an-index\n  const sortDirection = sortFields[0][1]\n  const eqFilterQueries = getEqQueries(filterQueriesThatCanUseIndex)\n  const eqFilterFields = toIndexFields(eqFilterQueries, sortDirection)\n\n  // Index prefix should not contain eq filters overlapping with sort fields\n  const overlap = findOverlappingFields(eqFilterQueries, sortFields)\n\n  return dedupeAndTrim(\n    [\n      ...eqFilterFields.filter(([name]) => !overlap.has(name)),\n      ...sortFields,\n      // Still append other filter fields to the tail of the index to leverage additional filtering\n      //  of results using data stored in the index (without loading full node object)\n      //  Note: fields previously listed in eqFilterFields and sortFields will be removed in dedupeAndTrim\n      ...toIndexFields(filterQueriesThatCanUseIndex, sortDirection),\n    ],\n    maxFields\n  )\n}\n\nconst canUseIndex = new Set([\n  DbComparator.EQ,\n  DbComparator.IN,\n  DbComparator.GTE,\n  DbComparator.LTE,\n  DbComparator.GT,\n  DbComparator.LT,\n  DbComparator.NIN,\n  DbComparator.NE,\n])\n\n/**\n * Returns queries that can potentially use index.\n * Returned list is sorted by query specificity\n */\nfunction getQueriesThatCanUseIndex(all: Array<DbQuery>): Array<DbQuery> {\n  return sortBySpecificity(\n    all.filter(q => canUseIndex.has(getFilterStatement(q).comparator))\n  )\n}\n\nfunction getSortFieldsThatCanUseIndex(\n  querySortArg: IRunQueryArgs[\"queryArgs\"][\"sort\"]\n): Array<IndexField> {\n  const sort = querySortArg || { fields: [], order: [] }\n  const initialOrder = isDesc(sort?.order[0]) ? -1 : 1\n\n  const sortFields: Array<IndexField> = []\n  for (let i = 0; i < sort.fields.length; i++) {\n    const field = sort.fields[i]\n    const order = isDesc(sort.order[i]) ? -1 : 1\n    if (order !== initialOrder) {\n      // Mixed sort order is not supported by our indexes yet :/\n      // See https://github.com/DoctorEvidence/lmdb-store/discussions/62#discussioncomment-898949\n      break\n    }\n    sortFields.push([field, order])\n  }\n  return sortFields\n}\n\nfunction findOverlappingFields(\n  filterQueries: Array<DbQuery>,\n  sortFields: Array<IndexField>\n): Set<string> {\n  const overlap = new Set<string>()\n\n  for (const [fieldName] of sortFields) {\n    const filterQuery = filterQueries.find(\n      q => dbQueryToDottedField(q) === fieldName\n    )\n    if (!filterQuery) {\n      break\n    }\n    overlap.add(fieldName)\n  }\n  return overlap\n}\n\nfunction getEqQueries(filterQueries: Array<DbQuery>): Array<DbQuery> {\n  return filterQueries.filter(\n    filterQuery =>\n      getFilterStatement(filterQuery).comparator === DbComparator.EQ\n  )\n}\n\nfunction toIndexFields(\n  queries: Array<DbQuery>,\n  sortDirection: number = 1\n): IndexFields {\n  return queries.map(\n    (q): IndexField => [dbQueryToDottedField(q), sortDirection]\n  )\n}\n\nfunction dedupeAndTrim(fields: IndexFields, maxFields: number): IndexFields {\n  return [...new Map(fields)].slice(0, maxFields)\n}\n"],"file":"suggest-index.js"}