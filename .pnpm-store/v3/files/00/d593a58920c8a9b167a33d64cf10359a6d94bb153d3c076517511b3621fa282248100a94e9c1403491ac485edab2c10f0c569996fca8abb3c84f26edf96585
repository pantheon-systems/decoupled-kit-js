{"version":3,"sources":["../../src/services/start-webpack-server.ts"],"names":["startWebpackServer","program","app","workerPool","store","report","panic","compiler","webpackActivity","websocketManager","webpackWatching","hooks","invalid","tap","pendingActivity","id","watchRun","tapAsync","_","done","activityTimer","start","isFirstCompile","Promise","resolve","stats","suspend","urls","https","host","proxyPort","isSuccessful","hasErrors","sitePackageJson","name","open","localUrlForBrowser","console","log","chalk","yellow","hasWarnings","rawMessages","toJson","moduleTrace","warnings","errors","Stage","Develop","compilation","panicOnBuild","end","emitter","emit"],"mappings":"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","sourcesContent":["import openurl from \"better-opn\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport chalk from \"chalk\"\nimport { Compiler } from \"webpack\"\nimport { Stage } from \"../commands/types\"\n\nimport {\n  reportWebpackWarnings,\n  structureWebpackErrors,\n} from \"../utils/webpack-error-utils\"\n\nimport { printDeprecationWarnings } from \"../utils/print-deprecation-warnings\"\nimport { showExperimentNotices } from \"../utils/show-experiment-notice\"\nimport { printInstructions } from \"../utils/print-instructions\"\nimport { prepareUrls } from \"../utils/prepare-urls\"\nimport { startServer, IWebpackWatchingPauseResume } from \"../utils/start-server\"\nimport { WebsocketManager } from \"../utils/websocket-manager\"\nimport { IBuildContext } from \"./\"\nimport {\n  markWebpackStatusAsPending,\n  markWebpackStatusAsDone,\n} from \"../utils/webpack-status\"\nimport { emitter } from \"../redux\"\n\nexport async function startWebpackServer({\n  program,\n  app,\n  workerPool,\n  store,\n}: Partial<IBuildContext>): Promise<{\n  compiler: Compiler\n  websocketManager: WebsocketManager\n  webpackWatching: IWebpackWatchingPauseResume\n}> {\n  if (!program || !app || !store) {\n    report.panic(`Missing required params`)\n  }\n  let { compiler, webpackActivity, websocketManager, webpackWatching } =\n    await startServer(program, app, workerPool)\n\n  compiler.hooks.invalid.tap(`log compiling`, function () {\n    if (!webpackActivity) {\n      // mark webpack as pending if we are not in the middle of compilation already\n      // when input is invalidated during compilation, webpack will automatically\n      // run another compilation round before triggering `done` event\n      report.pendingActivity({ id: `webpack-develop` })\n      markWebpackStatusAsPending()\n    }\n  })\n\n  compiler.hooks.watchRun.tapAsync(`log compiling`, function (_, done) {\n    if (!webpackActivity) {\n      // there can be multiple `watchRun` events before receiving single `done` event\n      // webpack will not emit assets or `done` event until all pending invalidated\n      // inputs were compiled\n      webpackActivity = report.activityTimer(`Re-building development bundle`, {\n        id: `webpack-develop`,\n      })\n      webpackActivity.start()\n    }\n\n    done()\n  })\n\n  let isFirstCompile = true\n\n  return new Promise(resolve => {\n    compiler.hooks.done.tapAsync(\n      `print gatsby instructions`,\n      async function (stats, done) {\n        if (isFirstCompile) {\n          webpackWatching.suspend()\n        }\n\n        const urls = prepareUrls(\n          program.https ? `https` : `http`,\n          program.host,\n          program.proxyPort\n        )\n        const isSuccessful = !stats.hasErrors()\n\n        if (isSuccessful && isFirstCompile) {\n          // Show notices to users about potential experiments/feature flags they could\n          // try.\n          showExperimentNotices()\n          printInstructions(\n            program.sitePackageJson.name || `(Unnamed package)`,\n            urls\n          )\n          printDeprecationWarnings()\n          if (program.open) {\n            try {\n              await openurl(urls.localUrlForBrowser)\n            } catch {\n              console.log(\n                `${chalk.yellow(\n                  `warn`\n                )} Browser not opened because no browser was found`\n              )\n            }\n          }\n        }\n\n        isFirstCompile = false\n\n        if (webpackActivity) {\n          if (stats.hasWarnings()) {\n            const rawMessages = stats.toJson({ moduleTrace: false })\n            reportWebpackWarnings(rawMessages.warnings, report)\n          }\n\n          if (!isSuccessful) {\n            const errors = structureWebpackErrors(\n              Stage.Develop,\n              stats.compilation.errors\n            )\n            webpackActivity.panicOnBuild(errors)\n          }\n          webpackActivity.end()\n          webpackActivity = null\n        }\n\n        markWebpackStatusAsDone()\n        done()\n        emitter.emit(`COMPILATION_DONE`, stats)\n        resolve({ compiler, websocketManager, webpackWatching })\n      }\n    )\n  })\n}\n"],"file":"start-webpack-server.js"}