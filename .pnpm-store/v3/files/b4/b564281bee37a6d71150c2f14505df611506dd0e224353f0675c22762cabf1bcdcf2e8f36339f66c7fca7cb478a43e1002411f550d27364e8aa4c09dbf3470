{"version":3,"sources":["../../src/utils/state-machine-logging.ts"],"names":["isInterpreter","actor","logTransitions","service","listeners","WeakSet","last","onTransition","state","changed","matches","process","env","gatsby_log_level","reporter","verbose","JSON","stringify","value","children","forEach","child","has","sublast","substate","add"],"mappings":";;;;;;;AAOA;;AAEA,MAAMA,aAAa,GACjBC,KADoB,IAES,SAAD,IAAaA,KAF3C;;AAIO,SAASC,cAAT,CACLC,OADK,EAEC;AACN,QAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACA,MAAIC,IAAJ;AAEAH,EAAAA,OAAO,CAACI,YAAR,CAAqBC,KAAK,IAAI;AAAA;;AAC5B,QAAI,CAACF,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAGE,KAAP;AACD,KAFD,MAEO,IAAI,CAACA,KAAK,CAACC,OAAP,IAAkBH,IAAI,CAACI,OAAL,CAAaF,KAAb,CAAtB,EAA2C;AAChD;AACD;;AACDF,IAAAA,IAAI,GAAGE,KAAP;;AACA,QAAIG,OAAO,CAACC,GAAR,CAAYC,gBAAZ,KAAkC,SAAtC,EAAgD;AAC9CC,wBAASC,OAAT,CAAkB,iBAAgBC,IAAI,CAACC,SAAL,CAAeT,KAAK,CAACU,KAArB,CAA4B,EAA9D;AACD,KAT2B,CAU5B;;;AACA,yBAAAf,OAAO,CAACgB,QAAR,wEAAkBC,OAAlB,CAA0BC,KAAK,IAAI;AACjC;AACA;AACA;AAEA;AACA,UAAIrB,aAAa,CAACqB,KAAD,CAAb,IAAwB,CAACjB,SAAS,CAACkB,GAAV,CAAcD,KAAd,CAA7B,EAAmD;AACjD,YAAIE,OAAO,GAAGF,KAAK,CAACb,KAApB;AACAa,QAAAA,KAAK,CAACd,YAAN,CAAmBiB,QAAQ,IAAI;AAC7B,cAAI,CAACD,OAAL,EAAc;AACZA,YAAAA,OAAO,GAAGC,QAAV;AACD,WAFD,MAEO,IAAI,CAACA,QAAQ,CAACf,OAAV,IAAqBc,OAAO,CAACb,OAAR,CAAgBc,QAAhB,CAAzB,EAAoD;AACzD;AACD;;AACDD,UAAAA,OAAO,GAAGC,QAAV;;AACA,cAAIb,OAAO,CAACC,GAAR,CAAYC,gBAAZ,KAAkC,SAAtC,EAAgD;AAC9CC,8BAASC,OAAT,CACG,iBAAgBC,IAAI,CAACC,SAAL,CAAeT,KAAK,CAACU,KAArB,CAA4B,MAAKF,IAAI,CAACC,SAAL,CAChDO,QAAQ,CAACN,KADuC,CAEhD,EAHJ;AAKD;AACF,SAdD;AAeAd,QAAAA,SAAS,CAACqB,GAAV,CAAcJ,KAAd;AACD;AACF,KAzBD;AA0BD,GArCD;AAsCD","sourcesContent":["import {\n  DefaultContext,\n  Interpreter,\n  Actor,\n  State,\n  AnyEventObject,\n} from \"xstate\"\nimport reporter from \"gatsby-cli/lib/reporter\"\n\nconst isInterpreter = <T>(\n  actor: Actor<T> | Interpreter<T>\n): actor is Interpreter<T> => `machine` in actor\n\nexport function logTransitions<T = DefaultContext>(\n  service: Interpreter<T>\n): void {\n  const listeners = new WeakSet()\n  let last: State<T, AnyEventObject, any, any>\n\n  service.onTransition(state => {\n    if (!last) {\n      last = state\n    } else if (!state.changed || last.matches(state)) {\n      return\n    }\n    last = state\n    if (process.env.gatsby_log_level === `verbose`) {\n      reporter.verbose(`Transition to ${JSON.stringify(state.value)}`)\n    }\n    // eslint-disable-next-line no-unused-expressions\n    service.children?.forEach(child => {\n      // We want to ensure we don't attach a listener to the same\n      // actor. We don't need to worry about detaching the listener\n      // because xstate handles that for us when the actor is stopped.\n\n      // @ts-ignore - TODO: Fix it\n      if (isInterpreter(child) && !listeners.has(child)) {\n        let sublast = child.state\n        child.onTransition(substate => {\n          if (!sublast) {\n            sublast = substate\n          } else if (!substate.changed || sublast.matches(substate)) {\n            return\n          }\n          sublast = substate\n          if (process.env.gatsby_log_level === `verbose`) {\n            reporter.verbose(\n              `Transition to ${JSON.stringify(state.value)} > ${JSON.stringify(\n                substate.value\n              )}`\n            )\n          }\n        })\n        listeners.add(child)\n      }\n    })\n  })\n}\n"],"file":"state-machine-logging.js"}