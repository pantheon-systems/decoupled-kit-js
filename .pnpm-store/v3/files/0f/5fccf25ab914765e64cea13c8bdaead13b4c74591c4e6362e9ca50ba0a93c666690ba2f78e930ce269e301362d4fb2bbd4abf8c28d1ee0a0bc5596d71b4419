{"version":3,"sources":["../../src/schema/node-model.js"],"names":["_","require","isAbstractType","GraphQLOutputType","GraphQLUnionType","GraphQLList","getNamedType","getNullableType","isCompositeType","invariant","reporter","LocalNodeModel","constructor","schema","schemaComposer","createPageDependency","_rootNodeMap","_trackedRootNodes","createPageDependencyActionCreator","WeakMap","WeakSet","_prepareNodesQueues","_prepareNodesPromises","_preparedNodesCache","Map","replaceFiltersCache","createPageDependencyArgs","connection","nodeTypeNames","toNodeTypeNames","forEach","typeName","map","_filtersCache","withContext","context","ContextualNodeModel","getNodeById","args","pageDependencies","id","type","node","result","includes","internal","trackInlineObjectsInRootNode","trackPageDependencies","getNodesByIds","ids","nodes","Array","isArray","filter","Boolean","length","getAllNodes","nodesByType","concat","connectionType","name","runQuery","firstOnly","findOne","skip","limit","query","findAll","from","entries","_query","stats","tracer","gqlType","getType","runQueryActivity","eq","Object","keys","phantomActivity","parentSpan","getParentActivity","span","start","nodeFoundById","end","GatsbyIterable","totalCount","materializationActivity","fields","getQueryFields","sort","group","distinct","max","min","sum","fieldsToResolve","determineResolvableFields","nodeTypeName","gqlNodeType","prepareNodes","queryArgs","gqlSchema","gqlComposer","resolvedFields","filtersCache","Error","undefined","first","queryFields","push","Promise","resolve","process","nextTick","_doResolvePrepareNodesQueue","queue","reduce","nextQueryFields","nextFieldsToResolve","merge","actualFieldsToResolve","deepObjectDifference","get","isEmpty","resolvedNodes","iterateNodesByType","resolveRecursive","__gatsby_resolved","set","size","saveResolvedNodes","getTypes","has","addRootNodeToInlineObject","Set","add","findRootNodeAncestor","obj","predicate","iterations","parent","trackedParent","isMatchingRoot","error","path","track","nodeId","rootNodeModel","nodeModel","_getFullDependencies","gqlTypeName","possibleTypes","getPossibleTypes","getInterfaces","some","iface","filterFields","dropQueryOperators","sortFields","pathToObject","split","reduceRight","acc","key","value","k","v","isPlainObject","getFields","concreteType","resolveType","gqlFields","fieldName","fieldToResolve","queryField","gqlField","gqlNonNullType","gqlFieldType","innerValue","resolveField","isObject","all","item","pickBy","withResolverContext","arg","defaultValue","returnType","isNestedType","field","typeComposer","getAnyTC","possibleTCs","needsResolve","tc","getFieldExtension","innerResolved","rootNodeMap","data","isNode","each","o","store","dispatch","payload","to","toValue","deepResult","module","exports"],"mappings":";;AAcA;;AACA;;AAOA;;AACA;;AACA;;AAtBA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAM;AACJC,EAAAA,cADI;AAEJC,EAAAA,iBAFI;AAGJC,EAAAA,gBAHI;AAIJC,EAAAA,WAJI;AAKJC,EAAAA,YALI;AAMJC,EAAAA,eANI;AAOJC,EAAAA;AAPI,IAQFP,OAAO,CAAE,SAAF,CARX;;AASA,MAAMQ,SAAS,GAAGR,OAAO,CAAE,WAAF,CAAzB;;AACA,MAAMS,QAAQ,GAAGT,OAAO,CAAE,yBAAF,CAAxB;;AA2DA,MAAMU,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAAC;AACVC,IAAAA,MADU;AAEVC,IAAAA,cAFU;AAGVC,IAAAA,oBAHU;AAIVC,IAAAA,YAJU;AAKVC,IAAAA;AALU,GAAD,EAMR;AACD,SAAKJ,MAAL,GAAcA,MAAd;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKI,iCAAL,GAAyCH,oBAAzC;AACA,SAAKC,YAAL,GAAoBA,YAAY,IAAI,IAAIG,OAAJ,EAApC;AACA,SAAKF,iBAAL,GAAyBA,iBAAiB,IAAI,IAAIG,OAAJ,EAA9C;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACA,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,mBAAL,GAA2B,IAAIC,GAAJ,EAA3B;AACA,SAAKC,mBAAL;AACD;;AAEDV,EAAAA,oBAAoB,CAACW,wBAAD,EAA2B;AAC7C,QAAIA,wBAAwB,CAACC,UAA7B,EAAyC;AACvC,YAAMC,aAAa,GAAGC,eAAe,CACnC,KAAKhB,MAD8B,EAEnCa,wBAAwB,CAACC,UAFU,CAArC;;AAIA,UAAIC,aAAJ,EAAmB;AACjBA,QAAAA,aAAa,CAACE,OAAd,CAAsBC,QAAQ,IAAI;AAChC,eAAKb,iCAAL,CAAuC,EACrC,GAAGQ,wBADkC;AAErCC,YAAAA,UAAU,EAAEI;AAFyB,WAAvC;AAID,SALD;AAMA;AACD;AACF;;AAED,SAAKb,iCAAL,CAAuCQ,wBAAvC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACED,EAAAA,mBAAmB,CAACO,GAAG,GAAG,IAAIR,GAAJ,EAAP,EAAkB;AACnC,SAAKS,aAAL,GAAqBD,GAArB,CADmC,CACV;AAC1B;;AAEDE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,WAAO,IAAIC,mBAAJ,CAAwB,IAAxB,EAA8BD,OAA9B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,WAAW,CAACC,IAAD,EAAOC,gBAAP,EAAyB;AAClC,UAAM;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAeH,IAAI,IAAI,EAA7B;AAEA,UAAMI,IAAI,GAAGL,WAAW,CAACG,EAAD,CAAxB;AAEA,QAAIG,MAAJ;;AACA,QAAI,CAACD,IAAL,EAAW;AACTC,MAAAA,MAAM,GAAG,IAAT;AACD,KAFD,MAEO,IAAI,CAACF,IAAL,EAAW;AAChBE,MAAAA,MAAM,GAAGD,IAAT;AACD,KAFM,MAEA;AACL,YAAMd,aAAa,GAAGC,eAAe,CAAC,KAAKhB,MAAN,EAAc4B,IAAd,CAArC;AACAE,MAAAA,MAAM,GAAGf,aAAa,CAACgB,QAAd,CAAuBF,IAAI,CAACG,QAAL,CAAcJ,IAArC,IAA6CC,IAA7C,GAAoD,IAA7D;AACD;;AAED,QAAIC,MAAJ,EAAY;AACV,WAAKG,4BAAL,CAAkCJ,IAAlC;AACD;;AAED,WAAO,mCAAS,KAAKK,qBAAL,CAA2BJ,MAA3B,EAAmCJ,gBAAnC,CAAT,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACES,EAAAA,aAAa,CAACV,IAAD,EAAOC,gBAAP,EAAyB;AACpC,UAAM;AAAEU,MAAAA,GAAF;AAAOR,MAAAA;AAAP,QAAgBH,IAAI,IAAI,EAA9B;AAEA,UAAMY,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,GAAd,IACVA,GAAG,CAACjB,GAAJ,CAAQQ,EAAE,IAAIH,WAAW,CAACG,EAAD,CAAzB,EAA+Ba,MAA/B,CAAsCC,OAAtC,CADU,GAEV,EAFJ;AAIA,QAAIX,MAAJ;;AACA,QAAI,CAACO,KAAK,CAACK,MAAP,IAAiB,CAACd,IAAtB,EAA4B;AAC1BE,MAAAA,MAAM,GAAGO,KAAT;AACD,KAFD,MAEO;AACL,YAAMtB,aAAa,GAAGC,eAAe,CAAC,KAAKhB,MAAN,EAAc4B,IAAd,CAArC;AACAE,MAAAA,MAAM,GAAGO,KAAK,CAACG,MAAN,CAAaX,IAAI,IAAId,aAAa,CAACgB,QAAd,CAAuBF,IAAI,CAACG,QAAL,CAAcJ,IAArC,CAArB,CAAT;AACD;;AAED,QAAIE,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACb,OAAP,CAAeY,IAAI,IAAI,KAAKI,4BAAL,CAAkCJ,IAAlC,CAAvB;AACD;;AAED,WAAO,oCAAU,KAAKK,qBAAL,CAA2BJ,MAA3B,EAAmCJ,gBAAnC,CAAV,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEiB,EAAAA,WAAW,CAAClB,IAAD,EAAOC,gBAAgB,GAAG,EAA1B,EAA8B;AACvC;AACA,gCACG,6FADH;AAGA,UAAM;AAAEE,MAAAA,IAAI,GAAI;AAAV,QAAoBH,IAAI,IAAI,EAAlC;AAEA,QAAIK,MAAJ;;AACA,QAAIF,IAAI,KAAM,MAAd,EAAqB;AACnBE,MAAAA,MAAM,GAAG,0BAAT;AACD,KAFD,MAEO;AACL,YAAMf,aAAa,GAAGC,eAAe,CAAC,KAAKhB,MAAN,EAAc4B,IAAd,CAArC;AACA,YAAMgB,WAAW,GAAG7B,aAAa,CAACI,GAAd,CAAkBD,QAAQ,IAC5C,+BAAeA,QAAf,CADkB,CAApB;AAGA,YAAMmB,KAAK,GAAG,GAAGQ,MAAH,CAAU,GAAGD,WAAb,CAAd;AACAd,MAAAA,MAAM,GAAGO,KAAK,CAACG,MAAN,CAAaC,OAAb,CAAT;AACD;;AAED,QAAIX,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACb,OAAP,CAAeY,IAAI,IAAI,KAAKI,4BAAL,CAAkCJ,IAAlC,CAAvB;AACD;;AAED,QAAI,OAAOH,gBAAgB,CAACoB,cAAxB,KAA4C,WAAhD,EAA4D;AAC1DpB,MAAAA,gBAAgB,CAACoB,cAAjB,GACE,OAAOlB,IAAP,KAAiB,QAAjB,GAA2BA,IAA3B,GAAkCA,IAAI,CAACmB,IADzC;AAED;;AAED,WAAO,oCAAU,KAAKb,qBAAL,CAA2BJ,MAA3B,EAAmCJ,gBAAnC,CAAV,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACgB,QAARsB,QAAQ,CAACvB,IAAD,EAAOC,gBAAgB,GAAG,EAA1B,EAA8B;AAC1C;AACA,gCACG,6FADH;;AAGA,QAAID,IAAI,CAACwB,SAAT,EAAoB;AAClB,aAAO,KAAKC,OAAL,CAAazB,IAAb,EAAmBC,gBAAnB,CAAP;AACD;;AACD,UAAM;AAAEyB,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAe,SAAGC;AAAlB,QAA4B5B,IAAI,CAAC4B,KAAvC;AACA,UAAMvB,MAAM,GAAG,MAAM,KAAKwB,OAAL,CAAa,EAAE,GAAG7B,IAAL;AAAW4B,MAAAA;AAAX,KAAb,EAAiC3B,gBAAjC,CAArB;AACA,WAAOY,KAAK,CAACiB,IAAN,CAAWzB,MAAM,CAAC0B,OAAlB,CAAP;AACD;;AAEW,QAANC,MAAM,CAAChC,IAAD,EAAO;AAAA;;AACjB,UAAM;AAAE4B,MAAAA,KAAK,GAAG,EAAV;AAAczB,MAAAA,IAAd;AAAoB8B,MAAAA,KAApB;AAA2BC,MAAAA;AAA3B,QAAsClC,IAAI,IAAI,EAApD,CADiB,CAGjB;AACA;;AACA,UAAMmC,OAAO,GAAG,OAAOhC,IAAP,KAAiB,QAAjB,GAA2B,KAAK5B,MAAL,CAAY6D,OAAZ,CAAoBjC,IAApB,CAA3B,GAAuDA,IAAvE;AACAhC,IAAAA,SAAS,CACP,EAAEgE,OAAO,YAAYrE,gBAArB,CADO,EAEN,+CAFM,CAAT;AAKA,UAAMwB,aAAa,GAAGC,eAAe,CAAC,KAAKhB,MAAN,EAAc4D,OAAd,CAArC;AAEA,QAAIE,gBAAJ,CAbiB,CAejB;AACA;;AACA,QACE,QAAOT,KAAP,aAAOA,KAAP,wCAAOA,KAAK,CAAEb,MAAd,sEAAO,cAAeb,EAAtB,qDAAO,iBAAmBoC,EAA1B,MAAkC,WAAlC,IACAC,MAAM,CAACC,IAAP,CAAYZ,KAAK,CAACb,MAAlB,EAA0BE,MAA1B,KAAqC,CADrC,IAEAsB,MAAM,CAACC,IAAP,CAAYZ,KAAK,CAACb,MAAN,CAAab,EAAzB,EAA6Be,MAA7B,KAAwC,CAH1C,EAIE;AACA,UAAIiB,MAAJ,EAAY;AACVG,QAAAA,gBAAgB,GAAGjE,QAAQ,CAACqE,eAAT,CAA0B,oBAA1B,EAA+C;AAChEC,UAAAA,UAAU,EAAER,MAAM,CAACS,iBAAP,GAA2BC;AADyB,SAA/C,CAAnB;AAGAP,QAAAA,gBAAgB,CAACQ,KAAjB;AACD;;AACD,YAAMC,aAAa,GAAG,KAAK/C,WAAL,CAAiB;AACrCG,QAAAA,EAAE,EAAE0B,KAAK,CAACb,MAAN,CAAab,EAAb,CAAgBoC,EADiB;AAErCnC,QAAAA,IAAI,EAAEgC;AAF+B,OAAjB,CAAtB;;AAKA,UAAIE,gBAAJ,EAAsB;AACpBA,QAAAA,gBAAgB,CAACU,GAAjB;AACD;;AAED,aAAO;AACLZ,QAAAA,OADK;AAELJ,QAAAA,OAAO,EAAE,IAAIiB,wBAAJ,CAAmBF,aAAa,GAAG,CAACA,aAAD,CAAH,GAAqB,EAArD,CAFJ;AAGLG,QAAAA,UAAU,EAAE,YAAaH,aAAa,GAAG,CAAH,GAAO;AAHxC,OAAP;AAKD;;AAED,QAAII,uBAAJ;;AACA,QAAIhB,MAAJ,EAAY;AACVgB,MAAAA,uBAAuB,GAAG9E,QAAQ,CAACqE,eAAT,CAA0B,iBAA1B,EAA4C;AACpEC,QAAAA,UAAU,EAAER,MAAM,CAACS,iBAAP,GAA2BC;AAD6B,OAA5C,CAA1B;AAGAM,MAAAA,uBAAuB,CAACL,KAAxB;AACD;;AACD,UAAMM,MAAM,GAAGC,cAAc,CAAC;AAC5BrC,MAAAA,MAAM,EAAEa,KAAK,CAACb,MADc;AAE5BsC,MAAAA,IAAI,EAAEzB,KAAK,CAACyB,IAFgB;AAG5BC,MAAAA,KAAK,EAAE1B,KAAK,CAAC0B,KAHe;AAI5BC,MAAAA,QAAQ,EAAE3B,KAAK,CAAC2B,QAJY;AAK5BC,MAAAA,GAAG,EAAE5B,KAAK,CAAC4B,GALiB;AAM5BC,MAAAA,GAAG,EAAE7B,KAAK,CAAC6B,GANiB;AAO5BC,MAAAA,GAAG,EAAE9B,KAAK,CAAC8B;AAPiB,KAAD,CAA7B;AAUA,UAAMC,eAAe,GAAGC,yBAAyB,CAC/C,KAAKpF,cAD0C,EAE/C,KAAKD,MAF0C,EAG/C4D,OAH+C,EAI/CgB,MAJ+C,EAK/C7D,aAL+C,CAAjD;;AAQA,SAAK,MAAMuE,YAAX,IAA2BvE,aAA3B,EAA0C;AACxC,YAAMwE,WAAW,GAAG,KAAKvF,MAAL,CAAY6D,OAAZ,CAAoByB,YAApB,CAApB;AACA,YAAM,KAAKE,YAAL,CAAkBD,WAAlB,EAA+BX,MAA/B,EAAuCQ,eAAvC,CAAN;AACD;;AAED,QAAIT,uBAAJ,EAA6B;AAC3BA,MAAAA,uBAAuB,CAACH,GAAxB;AACD;;AAED,QAAIb,MAAJ,EAAY;AACVG,MAAAA,gBAAgB,GAAGjE,QAAQ,CAACqE,eAAT,CAA0B,UAA1B,EAAqC;AACtDC,QAAAA,UAAU,EAAER,MAAM,CAACS,iBAAP,GAA2BC;AADe,OAArC,CAAnB;AAGAP,MAAAA,gBAAgB,CAACQ,KAAjB;AACD;;AAED,UAAM;AAAEd,MAAAA,OAAF;AAAWkB,MAAAA;AAAX,QAA0B,MAAM,+BAAe1B,QAAf,CAAwB;AAC5DyC,MAAAA,SAAS,EAAEpC,KADiD;AAE5DqC,MAAAA,SAAS,EAAE,KAAK1F,MAF4C;AAG5D2F,MAAAA,WAAW,EAAE,KAAK1F,cAH0C;AAI5D2D,MAAAA,OAJ4D;AAK5DgC,MAAAA,cAAc,EAAER,eAL4C;AAM5DrE,MAAAA,aAN4D;AAO5D8E,MAAAA,YAAY,EAAE,KAAKzE,aAPyC;AAQ5DsC,MAAAA;AAR4D,KAAxB,CAAtC;;AAWA,QAAII,gBAAJ,EAAsB;AACpBA,MAAAA,gBAAgB,CAACU,GAAjB;AACD;;AAED,WAAO;AACLZ,MAAAA,OADK;AAELJ,MAAAA,OAAO,EAAEA,OAAO,CAACrC,GAAR,CAAYU,IAAI,IAAI;AAC3B;AACA,aAAKI,4BAAL,CAAkCJ,IAAlC;AACA,eAAOA,IAAP;AACD,OAJQ,CAFJ;AAOL6C,MAAAA;AAPK,KAAP;AASD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,QAAPpB,OAAO,CAAC7B,IAAD,EAAOC,gBAAgB,GAAG,EAA1B,EAA8B;AACzC,UAAM;AAAEkC,MAAAA,OAAF;AAAW,SAAG9B;AAAd,QAAyB,MAAM,KAAK2B,MAAL,CAAYhC,IAAZ,EAAkBC,gBAAlB,CAArC,CADyC,CAGzC;;AACA,QAAI,OAAOA,gBAAgB,CAACoB,cAAxB,KAA4C,WAAhD,EAA4D;AAC1DpB,MAAAA,gBAAgB,CAACoB,cAAjB,GAAkCc,OAAO,CAACb,IAA1C;AACD;;AACD,SAAKb,qBAAL,CAA2BJ,MAAM,CAAC0B,OAAlC,EAA2C9B,gBAA3C;AACA,WAAO;AACL8B,MAAAA,OAAO,EAAE,oCAAU1B,MAAM,CAAC0B,OAAjB,CADJ;AAELkB,MAAAA,UAAU,EAAE5C,MAAM,CAAC4C;AAFd,KAAP;AAID;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,QAAPxB,OAAO,CAACzB,IAAD,EAAOC,gBAAgB,GAAG,EAA1B,EAA8B;AAAA;;AACzC,UAAM;AAAE2B,MAAAA,KAAK,GAAG;AAAV,QAAiB5B,IAAvB;;AACA,QAAI,gBAAA4B,KAAK,CAACyB,IAAN,kFAAYF,MAAZ,0EAAoBlC,MAApB,IAA6B,CAAjC,EAAoC;AAClC;AACA;AACA,YAAM,IAAIoD,KAAJ,CACH,uGADG,CAAN;AAGD;;AACD,UAAM;AAAElC,MAAAA,OAAF;AAAWJ,MAAAA;AAAX,QAAuB,MAAM,KAAKC,MAAL,CAAY,EAC7C,GAAGhC,IAD0C;AAE7C4B,MAAAA,KAAK,EAAE,EAAE,GAAGA,KAAL;AAAYF,QAAAA,IAAI,EAAE,CAAlB;AAAqBC,QAAAA,KAAK,EAAE,CAA5B;AAA+B0B,QAAAA,IAAI,EAAEiB;AAArC;AAFsC,KAAZ,CAAnC;AAIA,UAAMjE,MAAM,GAAGQ,KAAK,CAACiB,IAAN,CAAWC,OAAX,CAAf;AACA,UAAMwC,KAAK,eAAGlE,MAAM,CAAC,CAAD,CAAT,+CAAgB,IAA3B;;AAEA,QAAI,CAACkE,KAAL,EAAY;AACV;AACA;AACA;AACA;AACA;AACA;AACAtE,MAAAA,gBAAgB,CAACoB,cAAjB,GAAkCc,OAAO,CAACb,IAA1C;AACD;;AACD,WAAO,mCAAS,KAAKb,qBAAL,CAA2B8D,KAA3B,EAAkCtE,gBAAlC,CAAT,CAAP;AACD;;AAED8D,EAAAA,YAAY,CAAC5D,IAAD,EAAOqE,WAAP,EAAoBb,eAApB,EAAqC;AAC/C,UAAMlE,QAAQ,GAAGU,IAAI,CAACmB,IAAtB;;AACA,QAAI,CAAC,KAAKvC,mBAAL,CAAyBU,QAAzB,CAAL,EAAyC;AACvC,WAAKV,mBAAL,CAAyBU,QAAzB,IAAqC,EAArC;AACD;;AAED,SAAKV,mBAAL,CAAyBU,QAAzB,EAAmCgF,IAAnC,CAAwC;AACtCD,MAAAA,WADsC;AAEtCb,MAAAA;AAFsC,KAAxC;;AAKA,QAAI,CAAC,KAAK3E,qBAAL,CAA2BS,QAA3B,CAAL,EAA2C;AACzC,WAAKT,qBAAL,CAA2BS,QAA3B,IAAuC,IAAIiF,OAAJ,CAAYC,OAAO,IAAI;AAC5DC,QAAAA,OAAO,CAACC,QAAR,CAAiB,YAAY;AAC3B,gBAAM,KAAKC,2BAAL,CAAiC3E,IAAjC,CAAN;AACAwE,UAAAA,OAAO;AACR,SAHD;AAID,OALsC,CAAvC;AAMD;;AAED,WAAO,KAAK3F,qBAAL,CAA2BS,QAA3B,CAAP;AACD;;AAEgC,QAA3BqF,2BAA2B,CAAC3E,IAAD,EAAO;AACtC,UAAMV,QAAQ,GAAGU,IAAI,CAACmB,IAAtB;AACA,UAAMyD,KAAK,GAAG,KAAKhG,mBAAL,CAAyBU,QAAzB,CAAd;AACA,SAAKV,mBAAL,CAAyBU,QAAzB,IAAqC,EAArC;AACA,SAAKT,qBAAL,CAA2BS,QAA3B,IAAuC,IAAvC;AAEA,UAAM;AAAE+E,MAAAA,WAAF;AAAeb,MAAAA;AAAf,QAAmCoB,KAAK,CAACC,MAAN,CACvC,CACE;AAAER,MAAAA,WAAF;AAAeb,MAAAA;AAAf,KADF,EAEE;AAAEa,MAAAA,WAAW,EAAES,eAAf;AAAgCtB,MAAAA,eAAe,EAAEuB;AAAjD,KAFF,KAGK;AACH,aAAO;AACLV,QAAAA,WAAW,EAAE9G,CAAC,CAACyH,KAAF,CAAQX,WAAR,EAAqBS,eAArB,CADR;AAELtB,QAAAA,eAAe,EAAEjG,CAAC,CAACyH,KAAF,CAAQxB,eAAR,EAAyBuB,mBAAzB;AAFZ,OAAP;AAID,KATsC,EAUvC;AACEV,MAAAA,WAAW,EAAE,EADf;AAEEb,MAAAA,eAAe,EAAE;AAFnB,KAVuC,CAAzC;AAgBA,UAAMyB,qBAAqB,GAAGC,oBAAoB,CAChD1B,eADgD,EAEhD,KAAK1E,mBAAL,CAAyBqG,GAAzB,CAA6B7F,QAA7B,KAA0C,EAFM,CAAlD;;AAKA,QAAI,CAAC/B,CAAC,CAAC6H,OAAF,CAAUH,qBAAV,CAAL,EAAuC;AACrC,YAAMI,aAAa,GAAG,IAAItG,GAAJ,EAAtB;;AACA,WAAK,MAAMkB,IAAX,IAAmB,+BAAeqF,kBAAf,CAAkChG,QAAlC,CAAnB,EAAgE;AAC9D,aAAKe,4BAAL,CAAkCJ,IAAlC;AACA,cAAM+D,cAAc,GAAG,MAAMuB,gBAAgB,CAC3C,IAD2C,EAE3C,KAAKlH,cAFsC,EAG3C,KAAKD,MAHsC,EAI3C6B,IAJ2C,EAK3CD,IAL2C,EAM3CqE,WAN2C,EAO3CY,qBAP2C,CAA7C;;AASA,YAAI,CAAChF,IAAI,CAACuF,iBAAV,EAA6B;AAC3BvF,UAAAA,IAAI,CAACuF,iBAAL,GAAyB,EAAzB;AACD;;AACDH,QAAAA,aAAa,CAACI,GAAd,CACExF,IAAI,CAACF,EADP,EAEExC,CAAC,CAACyH,KAAF,CAAQ/E,IAAI,CAACuF,iBAAb,EAAgCxB,cAAhC,CAFF;AAID;;AACD,UAAIqB,aAAa,CAACK,IAAlB,EAAwB;AACtB,cAAMC,iBAAiB,CAACrG,QAAD,EAAW+F,aAAX,CAAvB;AACD;;AACD,WAAKvG,mBAAL,CAAyB2G,GAAzB,CACEnG,QADF,EAEE/B,CAAC,CAACyH,KAAF,CACE,EADF,EAEE,KAAKlG,mBAAL,CAAyBqG,GAAzB,CAA6B7F,QAA7B,KAA0C,EAF5C,EAGE2F,qBAHF,CAFF;AAQD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEW,EAAAA,QAAQ,GAAG;AACT,WAAO,0BAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEvF,EAAAA,4BAA4B,CAACJ,IAAD,EAAO;AACjC,QAAI,CAAC,KAAKzB,iBAAL,CAAuBqH,GAAvB,CAA2B5F,IAA3B,CAAL,EAAuC;AACrC6F,MAAAA,yBAAyB,CACvB,KAAKvH,YADkB,EAEvB0B,IAFuB,EAGvBA,IAAI,CAACF,EAHkB,EAIvB,IAJuB,EAKvB,IAAIgG,GAAJ,EALuB,CAAzB;;AAOA,WAAKvH,iBAAL,CAAuBwH,GAAvB,CAA2B/F,IAA3B;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEgG,EAAAA,oBAAoB,CAACC,GAAD,EAAMC,SAAS,GAAG,IAAlB,EAAwB;AAC1C,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAInG,IAAI,GAAGiG,GAAX;;AAEA,WAAOE,UAAU,KAAK,GAAtB,EAA2B;AACzB,UAAID,SAAS,IAAIA,SAAS,CAAClG,IAAD,CAA1B,EAAkC,OAAOA,IAAP;AAElC,YAAMoG,MAAM,GAAGzG,WAAW,CAACK,IAAI,CAACoG,MAAN,CAA1B;;AACA,YAAMtG,EAAE,GAAG,KAAKxB,YAAL,CAAkB4G,GAAlB,CAAsBlF,IAAtB,CAAX;;AACA,YAAMqG,aAAa,GAAG1G,WAAW,CAACG,EAAD,CAAjC;;AAEA,UAAI,CAACsG,MAAD,IAAW,CAACC,aAAhB,EAA+B;AAC7B,cAAMC,cAAc,GAAG,CAACJ,SAAD,IAAcA,SAAS,CAAClG,IAAD,CAA9C;AACA,eAAOsG,cAAc,GAAGtG,IAAH,GAAU,IAA/B;AACD;;AAEDA,MAAAA,IAAI,GAAGoG,MAAM,IAAIC,aAAjB;AACD;;AAEDrI,IAAAA,QAAQ,CAACuI,KAAT,CACG,oEAAD,GACEvG,IAFJ;AAIA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,qBAAqB,CAACJ,MAAD,EAASJ,gBAAgB,GAAG,EAA5B,EAAgC;AACnD,UAAM;AAAE2G,MAAAA,IAAF;AAAQvF,MAAAA,cAAR;AAAwBwF,MAAAA,KAAK,GAAG;AAAhC,QAAyC5G,gBAA/C;;AACA,QAAI2G,IAAI,IAAIC,KAAZ,EAAmB;AACjB,UAAIxF,cAAJ,EAAoB;AAClB,aAAK5C,oBAAL,CAA0B;AAAEmI,UAAAA,IAAF;AAAQvH,UAAAA,UAAU,EAAEgC;AAApB,SAA1B;AACD,OAFD,MAEO;AACL,cAAMT,KAAK,GAAG,0BAAWP,MAAX,IAAqBA,MAArB,GAA8B,CAACA,MAAD,CAA5C;;AACA,aAAK,MAAMD,IAAX,IAAmBQ,KAAnB,EAA0B;AACxB,cAAIR,IAAJ,EAAU;AACR,iBAAK3B,oBAAL,CAA0B;AAAEmI,cAAAA,IAAF;AAAQE,cAAAA,MAAM,EAAE1G,IAAI,CAACF;AAArB,aAA1B;AACD;AACF;AACF;AACF;;AAED,WAAOG,MAAP;AACD;;AA9gBkB;;AAihBrB,MAAMP,mBAAN,CAA0B;AACxBxB,EAAAA,WAAW,CAACyI,aAAD,EAAgBlH,OAAhB,EAAyB;AAClC,SAAKmH,SAAL,GAAiBD,aAAjB;AACA,SAAKlH,OAAL,GAAeA,OAAf;AACD;;AAEDD,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,WAAO,IAAIC,mBAAJ,CAAwB,KAAKkH,SAA7B,EAAwC,EAC7C,GAAG,KAAKnH,OADqC;AAE7C,SAAGA;AAF0C,KAAxC,CAAP;AAID;;AAEDoH,EAAAA,oBAAoB,CAAChH,gBAAD,EAAmB;AACrC,WAAO;AACL2G,MAAAA,IAAI,EAAE,KAAK/G,OAAL,CAAa+G,IADd;AAEL,UAAI3G,gBAAgB,IAAI,EAAxB;AAFK,KAAP;AAID;;AAEDF,EAAAA,WAAW,CAACC,IAAD,EAAOC,gBAAP,EAAyB;AAClC,WAAO,KAAK+G,SAAL,CAAejH,WAAf,CACLC,IADK,EAEL,KAAKiH,oBAAL,CAA0BhH,gBAA1B,CAFK,CAAP;AAID;;AAEDS,EAAAA,aAAa,CAACV,IAAD,EAAOC,gBAAP,EAAyB;AACpC,WAAO,KAAK+G,SAAL,CAAetG,aAAf,CACLV,IADK,EAEL,KAAKiH,oBAAL,CAA0BhH,gBAA1B,CAFK,CAAP;AAID;;AAEDiB,EAAAA,WAAW,CAAClB,IAAD,EAAOC,gBAAP,EAAyB;AAClC,WAAO,KAAK+G,SAAL,CAAe9F,WAAf,CACLlB,IADK,EAEL,KAAKiH,oBAAL,CAA0BhH,gBAA1B,CAFK,CAAP;AAID;;AAEDsB,EAAAA,QAAQ,CAACvB,IAAD,EAAOC,gBAAP,EAAyB;AAC/B,WAAO,KAAK+G,SAAL,CAAezF,QAAf,CACLvB,IADK,EAEL,KAAKiH,oBAAL,CAA0BhH,gBAA1B,CAFK,CAAP;AAID;;AAEDwB,EAAAA,OAAO,CAACzB,IAAD,EAAOC,gBAAP,EAAyB;AAC9B,WAAO,KAAK+G,SAAL,CAAevF,OAAf,CACLzB,IADK,EAEL,KAAKiH,oBAAL,CAA0BhH,gBAA1B,CAFK,CAAP;AAID;;AAED4B,EAAAA,OAAO,CAAC7B,IAAD,EAAOC,gBAAP,EAAyB;AAC9B,WAAO,KAAK+G,SAAL,CAAenF,OAAf,CACL7B,IADK,EAEL,KAAKiH,oBAAL,CAA0BhH,gBAA1B,CAFK,CAAP;AAID;;AAED8D,EAAAA,YAAY,CAAC,GAAG/D,IAAJ,EAAU;AACpB,WAAO,KAAKgH,SAAL,CAAejD,YAAf,CAA4B,GAAG/D,IAA/B,CAAP;AACD;;AAED+F,EAAAA,QAAQ,CAAC,GAAG/F,IAAJ,EAAU;AAChB,WAAO,KAAKgH,SAAL,CAAejB,QAAf,CAAwB,GAAG/F,IAA3B,CAAP;AACD;;AAEDQ,EAAAA,4BAA4B,CAAC,GAAGR,IAAJ,EAAU;AACpC,WAAO,KAAKgH,SAAL,CAAexG,4BAAf,CAA4C,GAAGR,IAA/C,CAAP;AACD;;AAEDoG,EAAAA,oBAAoB,CAAC,GAAGpG,IAAJ,EAAU;AAC5B,WAAO,KAAKgH,SAAL,CAAeZ,oBAAf,CAAoC,GAAGpG,IAAvC,CAAP;AACD;;AAEDvB,EAAAA,oBAAoB,CAAC,GAAGuB,IAAJ,EAAU;AAC5B,WAAO,KAAKgH,SAAL,CAAevI,oBAAf,CAAoC,GAAGuB,IAAvC,CAAP;AACD;;AAEDS,EAAAA,qBAAqB,CAACJ,MAAD,EAASJ,gBAAT,EAA2B;AAC9C,WAAO,KAAK+G,SAAL,CAAevG,qBAAf,CACLJ,MADK,EAEL,KAAK4G,oBAAL,CAA0BhH,gBAA1B,CAFK,CAAP;AAID;;AAvFuB;;AA0F1B,MAAMF,WAAW,GAAGG,EAAE,IAAKA,EAAE,IAAI,IAAN,GAAa,wBAAQA,EAAR,CAAb,GAA2B,IAAtD;;AAEA,MAAMX,eAAe,GAAG,CAAChB,MAAD,EAAS2I,WAAT,KAAyB;AAC/C,QAAM/E,OAAO,GACX,OAAO+E,WAAP,KAAwB,QAAxB,GAAkC3I,MAAM,CAAC6D,OAAP,CAAe8E,WAAf,CAAlC,GAAgEA,WADlE;AAGA,MAAI,CAAC/E,OAAL,EAAc,OAAO,EAAP;AAEd,QAAMgF,aAAa,GAAGvJ,cAAc,CAACuE,OAAD,CAAd,GAClB5D,MAAM,CAAC6I,gBAAP,CAAwBjF,OAAxB,CADkB,GAElB,CAACA,OAAD,CAFJ;AAIA,SAAOgF,aAAa,CACjBpG,MADI,CACGZ,IAAI,IAAIA,IAAI,CAACkH,aAAL,GAAqBC,IAArB,CAA0BC,KAAK,IAAIA,KAAK,CAACjG,IAAN,KAAgB,MAAnD,CADX,EAEJ5B,GAFI,CAEAS,IAAI,IAAIA,IAAI,CAACmB,IAFb,CAAP;AAGD,CAbD;;AAeA,MAAM8B,cAAc,GAAG,CAAC;AAAErC,EAAAA,MAAF;AAAUsC,EAAAA,IAAV;AAAgBC,EAAAA,KAAhB;AAAuBC,EAAAA,QAAvB;AAAiCC,EAAAA,GAAjC;AAAsCC,EAAAA,GAAtC;AAA2CC,EAAAA;AAA3C,CAAD,KAAsD;AAC3E,QAAM8D,YAAY,GAAGzG,MAAM,GAAG0G,kBAAkB,CAAC1G,MAAD,CAArB,GAAgC,EAA3D;AACA,QAAM2G,UAAU,GAAIrE,IAAI,IAAIA,IAAI,CAACF,MAAd,IAAyB,EAA5C;;AAEA,MAAIG,KAAK,IAAI,CAACzC,KAAK,CAACC,OAAN,CAAcwC,KAAd,CAAd,EAAoC;AAClCA,IAAAA,KAAK,GAAG,CAACA,KAAD,CAAR;AACD,GAFD,MAEO,IAAIA,KAAK,IAAI,IAAb,EAAmB;AACxBA,IAAAA,KAAK,GAAG,EAAR;AACD;;AAED,MAAIC,QAAQ,IAAI,CAAC1C,KAAK,CAACC,OAAN,CAAcyC,QAAd,CAAjB,EAA0C;AACxCA,IAAAA,QAAQ,GAAG,CAACA,QAAD,CAAX;AACD,GAFD,MAEO,IAAIA,QAAQ,IAAI,IAAhB,EAAsB;AAC3BA,IAAAA,QAAQ,GAAG,EAAX;AACD;;AAED,MAAIC,GAAG,IAAI,CAAC3C,KAAK,CAACC,OAAN,CAAc0C,GAAd,CAAZ,EAAgC;AAC9BA,IAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD,GAFD,MAEO,IAAIA,GAAG,IAAI,IAAX,EAAiB;AACtBA,IAAAA,GAAG,GAAG,EAAN;AACD;;AAED,MAAIC,GAAG,IAAI,CAAC5C,KAAK,CAACC,OAAN,CAAc2C,GAAd,CAAZ,EAAgC;AAC9BA,IAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD,GAFD,MAEO,IAAIA,GAAG,IAAI,IAAX,EAAiB;AACtBA,IAAAA,GAAG,GAAG,EAAN;AACD;;AAED,MAAIC,GAAG,IAAI,CAAC7C,KAAK,CAACC,OAAN,CAAc4C,GAAd,CAAZ,EAAgC;AAC9BA,IAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD,GAFD,MAEO,IAAIA,GAAG,IAAI,IAAX,EAAiB;AACtBA,IAAAA,GAAG,GAAG,EAAN;AACD;;AAED,SAAOhG,CAAC,CAACyH,KAAF,CACLqC,YADK,EAEL,GAAGE,UAAU,CAAChI,GAAX,CAAeiI,YAAf,CAFE,EAGL,GAAGrE,KAAK,CAAC5D,GAAN,CAAUiI,YAAV,CAHE,EAIL,GAAGpE,QAAQ,CAAC7D,GAAT,CAAaiI,YAAb,CAJE,EAKL,GAAGnE,GAAG,CAAC9D,GAAJ,CAAQiI,YAAR,CALE,EAML,GAAGlE,GAAG,CAAC/D,GAAJ,CAAQiI,YAAR,CANE,EAOL,GAAGjE,GAAG,CAAChE,GAAJ,CAAQiI,YAAR,CAPE,CAAP;AASD,CA3CD;;AA6CA,MAAMA,YAAY,GAAGf,IAAI,IAAI;AAC3B,MAAIA,IAAI,IAAI,OAAOA,IAAP,KAAiB,QAA7B,EAAsC;AACpC,WAAOA,IAAI,CAACgB,KAAL,CAAY,GAAZ,EAAgBC,WAAhB,CAA4B,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/C,aAAO;AAAE,SAACA,GAAD,GAAOD;AAAT,OAAP;AACD,KAFM,EAEJ,IAFI,CAAP;AAGD;;AACD,SAAO,EAAP;AACD,CAPD;;AASA,MAAML,kBAAkB,GAAG1G,MAAM,IAC/BwB,MAAM,CAACC,IAAP,CAAYzB,MAAZ,EAAoBiE,MAApB,CAA2B,CAAC8C,GAAD,EAAMC,GAAN,KAAc;AACvC,QAAMC,KAAK,GAAGjH,MAAM,CAACgH,GAAD,CAApB;AACA,QAAME,CAAC,GAAG1F,MAAM,CAACC,IAAP,CAAYwF,KAAZ,EAAmB,CAAnB,CAAV;AACA,QAAME,CAAC,GAAGF,KAAK,CAACC,CAAD,CAAf;;AACA,MAAIvK,CAAC,CAACyK,aAAF,CAAgBH,KAAhB,KAA0BtK,CAAC,CAACyK,aAAF,CAAgBD,CAAhB,CAA9B,EAAkD;AAChDJ,IAAAA,GAAG,CAACC,GAAD,CAAH,GACEE,CAAC,KAAM,WAAP,GAAoBR,kBAAkB,CAACS,CAAD,CAAtC,GAA4CT,kBAAkB,CAACO,KAAD,CADhE;AAED,GAHD,MAGO;AACLF,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAW,IAAX;AACD;;AACD,SAAOD,GAAP;AACD,CAXD,EAWG,EAXH,CADF;;AAcA,MAAMM,SAAS,GAAG,CAAC7J,MAAD,EAAS4B,IAAT,EAAeC,IAAf,KAAwB;AACxC,MAAI,CAACxC,cAAc,CAACuC,IAAD,CAAnB,EAA2B;AACzB,WAAOA,IAAI,CAACiI,SAAL,EAAP;AACD;;AAED,QAAMC,YAAY,GAAGlI,IAAI,CAACmI,WAAL,CAAiBlI,IAAjB,CAArB;AACA,SAAO7B,MAAM,CAAC6D,OAAP,CAAeiG,YAAf,EAA6BD,SAA7B,EAAP;AACD,CAPD;;AASA,eAAe1C,gBAAf,CACEsB,SADF,EAEExI,cAFF,EAGED,MAHF,EAIE6B,IAJF,EAKED,IALF,EAMEqE,WANF,EAOEb,eAPF,EAQE;AACA,QAAM4E,SAAS,GAAGH,SAAS,CAAC7J,MAAD,EAAS4B,IAAT,EAAeC,IAAf,CAA3B;AACA,QAAM+D,cAAc,GAAG,EAAvB;;AACA,OAAK,MAAMqE,SAAX,IAAwBjG,MAAM,CAACC,IAAP,CAAYmB,eAAZ,CAAxB,EAAsD;AACpD,UAAM8E,cAAc,GAAG9E,eAAe,CAAC6E,SAAD,CAAtC;AACA,UAAME,UAAU,GAAGlE,WAAW,CAACgE,SAAD,CAA9B;AACA,UAAMG,QAAQ,GAAGJ,SAAS,CAACC,SAAD,CAA1B;AACA,UAAMI,cAAc,GAAG3K,eAAe,CAAC0K,QAAQ,CAACxI,IAAV,CAAtC;AACA,UAAM0I,YAAY,GAAG7K,YAAY,CAAC2K,QAAQ,CAACxI,IAAV,CAAjC;AACA,QAAI2I,UAAU,GAAG,MAAMC,YAAY,CACjC/B,SADiC,EAEjCxI,cAFiC,EAGjCD,MAHiC,EAIjC6B,IAJiC,EAKjCuI,QALiC,EAMjCH,SANiC,CAAnC;;AAQA,QAAIG,QAAQ,IAAIG,UAAU,IAAI,IAA9B,EAAoC;AAClC,UACE5K,eAAe,CAAC2K,YAAD,CAAf,IACA,EAAED,cAAc,YAAY7K,WAA5B,CAFF,EAGE;AACA+K,QAAAA,UAAU,GAAG,MAAMpD,gBAAgB,CACjCsB,SADiC,EAEjCxI,cAFiC,EAGjCD,MAHiC,EAIjCuK,UAJiC,EAKjCD,YALiC,EAMjCH,UANiC,EAOjChL,CAAC,CAACsL,QAAF,CAAWP,cAAX,IAA6BA,cAA7B,GAA8CC,UAPb,CAAnC;AASD,OAbD,MAaO,IACLxK,eAAe,CAAC2K,YAAD,CAAf,KACCnL,CAAC,CAACoD,OAAF,CAAUgI,UAAV,KAAyBA,UAAU,YAAY9F,wBADhD,KAEA4F,cAAc,YAAY7K,WAHrB,EAIL;AACA+K,QAAAA,UAAU,GAAG,MAAMpE,OAAO,CAACuE,GAAR,CACjBH,UAAU,CAACpJ,GAAX,CAAewJ,IAAI,IACjBA,IAAI,IAAI,IAAR,GACIA,IADJ,GAEIxD,gBAAgB,CACdsB,SADc,EAEdxI,cAFc,EAGdD,MAHc,EAId2K,IAJc,EAKdL,YALc,EAMdH,UANc,EAOdhL,CAAC,CAACsL,QAAF,CAAWP,cAAX,IAA6BA,cAA7B,GAA8CC,UAPhC,CAHtB,CADiB,CAAnB;AAeD;AACF;;AACD,QAAII,UAAU,IAAI,IAAlB,EAAwB;AACtB3E,MAAAA,cAAc,CAACqE,SAAD,CAAd,GAA4BM,UAA5B;AACD;AACF;;AAED,OAAK,MAAMN,SAAX,IAAwBjG,MAAM,CAACC,IAAP,CAAYgC,WAAZ,CAAxB,EAAkD;AAChD,QAAI,CAACb,eAAe,CAAC6E,SAAD,CAAhB,IAA+BpI,IAAI,CAACoI,SAAD,CAAvC,EAAoD;AAClD;AACA;AACArE,MAAAA,cAAc,CAACqE,SAAD,CAAd,GAA4B,MAAMO,YAAY,CAC5C/B,SAD4C,EAE5CxI,cAF4C,EAG5CD,MAH4C,EAI5C6B,IAJ4C,EAK5CmI,SAAS,CAACC,SAAD,CALmC,EAM5CA,SAN4C,CAA9C;AAQD;AACF;;AAED,SAAO9K,CAAC,CAACyL,MAAF,CAAShF,cAAT,EAAyB,CAAC6D,KAAD,EAAQD,GAAR,KAAgBvD,WAAW,CAACuD,GAAD,CAApD,CAAP;AACD;;AAED,SAASgB,YAAT,CACE/B,SADF,EAEExI,cAFF,EAGED,MAHF,EAIE6B,IAJF,EAKEuI,QALF,EAMEH,SANF,EAOE;AACA,MAAI,EAACG,QAAD,aAACA,QAAD,eAACA,QAAQ,CAAEhE,OAAX,CAAJ,EAAwB;AACtB,WAAOvE,IAAI,CAACoI,SAAD,CAAX;AACD;;AACD,QAAMY,mBAAmB,GAAGzL,OAAO,CAAE,WAAF,CAAnC;;AACA,SAAOgL,QAAQ,CAAChE,OAAT,CACLvE,IADK,EAELuI,QAAQ,CAAC3I,IAAT,CAAcgF,MAAd,CAAqB,CAAC8C,GAAD,EAAMuB,GAAN,KAAc;AACjCvB,IAAAA,GAAG,CAACuB,GAAG,CAAC/H,IAAL,CAAH,GAAgB+H,GAAG,CAACC,YAApB;AACA,WAAOxB,GAAP;AACD,GAHD,EAGG,EAHH,CAFK,EAMLsB,mBAAmB,CAAC;AAClB7K,IAAAA,MADkB;AAElBC,IAAAA,cAFkB;AAGlBwI,IAAAA;AAHkB,GAAD,CANd,EAWL;AACEwB,IAAAA,SADF;AAEEjK,IAAAA,MAFF;AAGEgL,IAAAA,UAAU,EAAEZ,QAAQ,CAACxI;AAHvB,GAXK,CAAP;AAiBD;;AAED,MAAMyD,yBAAyB,GAAG,CAChCpF,cADgC,EAEhCD,MAFgC,EAGhC4B,IAHgC,EAIhCgD,MAJgC,EAKhC7D,aALgC,EAMhCkK,YAAY,GAAG,KANiB,KAO7B;AACH,QAAM7F,eAAe,GAAG,EAAxB;AACA,QAAM4E,SAAS,GAAGpI,IAAI,CAACiI,SAAL,EAAlB;AACA7F,EAAAA,MAAM,CAACC,IAAP,CAAYW,MAAZ,EAAoB3D,OAApB,CAA4BgJ,SAAS,IAAI;AACvC,UAAMiB,KAAK,GAAGtG,MAAM,CAACqF,SAAD,CAApB;AACA,UAAMG,QAAQ,GAAGJ,SAAS,CAACC,SAAD,CAA1B;AACA,UAAMK,YAAY,GAAG7K,YAAY,CAAC2K,QAAQ,CAACxI,IAAV,CAAjC;AACA,UAAMuJ,YAAY,GAAGlL,cAAc,CAACmL,QAAf,CAAwBxJ,IAAI,CAACmB,IAA7B,CAArB;AACA,UAAMsI,WAAW,GAAG,CAClBF,YADkB,EAElB,GAAGpK,aAAa,CAACI,GAAd,CAAkB4B,IAAI,IAAI9C,cAAc,CAACmL,QAAf,CAAwBrI,IAAxB,CAA1B,CAFe,CAApB;AAIA,QAAIuI,YAAY,GAAG,KAAnB;;AACA,SAAK,MAAMC,EAAX,IAAiBF,WAAjB,EAA8B;AAC5BC,MAAAA,YAAY,GAAGC,EAAE,CAACC,iBAAH,CAAqBvB,SAArB,EAAiC,cAAjC,KAAmD,KAAlE;;AACA,UAAIqB,YAAJ,EAAkB;AAChB;AACD;AACF;;AAED,QAAInM,CAAC,CAACsL,QAAF,CAAWS,KAAX,KAAqBd,QAAzB,EAAmC;AACjC,YAAMqB,aAAa,GAAGpG,yBAAyB,CAC7CpF,cAD6C,EAE7CD,MAF6C,EAG7CsK,YAH6C,EAI7CY,KAJ6C,EAK7ClK,eAAe,CAAChB,MAAD,EAASsK,YAAT,CAL8B,EAM7C,IAN6C,CAA/C;;AAQA,UAAI,CAACnL,CAAC,CAAC6H,OAAF,CAAUyE,aAAV,CAAL,EAA+B;AAC7BrG,QAAAA,eAAe,CAAC6E,SAAD,CAAf,GAA6BwB,aAA7B;AACD;AACF;;AAED,QAAI,CAACrG,eAAe,CAAC6E,SAAD,CAAhB,IAA+BqB,YAAnC,EAAiD;AAC/ClG,MAAAA,eAAe,CAAC6E,SAAD,CAAf,GAA6B,IAA7B;AACD;;AACD,QAAI,CAAC7E,eAAe,CAAC6E,SAAD,CAAhB,IAA+BgB,YAAnC,EAAiD;AAC/C;AACA;AACA7F,MAAAA,eAAe,CAAC6E,SAAD,CAAf,GAA6B,IAA7B;AACD;AACF,GAvCD;AAwCA,SAAO7E,eAAP;AACD,CAnDD;;AAqDA,MAAMsC,yBAAyB,GAAG,CAChCgE,WADgC,EAEhCC,IAFgC,EAGhCpD,MAHgC,EAIhCqD;AAAO;AAJyB,EAKhCvD;AAAK;AAL2B,KAMhB;AAChB,QAAMuB,aAAa,GAAGzK,CAAC,CAACyK,aAAF,CAAgB+B,IAAhB,CAAtB;;AAEA,MAAI/B,aAAa,IAAIzK,CAAC,CAACoD,OAAF,CAAUoJ,IAAV,CAArB,EAAsC;AACpC,QAAItD,IAAI,CAACZ,GAAL,CAASkE,IAAT,CAAJ,EAAoB;AACpBtD,IAAAA,IAAI,CAACT,GAAL,CAAS+D,IAAT;;AAEAxM,IAAAA,CAAC,CAAC0M,IAAF,CAAOF,IAAP,EAAa,CAACG,CAAD,EAAItC,GAAJ,KAAY;AACvB,UAAI,CAACoC,MAAD,IAAWpC,GAAG,KAAM,UAAxB,EAAmC;AACjC9B,QAAAA,yBAAyB,CAACgE,WAAD,EAAcI,CAAd,EAAiBvD,MAAjB,EAAyB,KAAzB,EAAgCF,IAAhC,CAAzB;AACD;AACF,KAJD,EAJoC,CAUpC;;;AACA,QAAI,CAACuD,MAAL,EAAa;AACXF,MAAAA,WAAW,CAACrE,GAAZ,CAAgBsE,IAAhB,EAAsBpD,MAAtB;AACD;AACF;AACF,CAxBD;;AA0BA,MAAMhB,iBAAiB,GAAG,OAAOrG,QAAP,EAAiB+F,aAAjB,KAAmC;AAC3D8E,eAAMC,QAAN,CAAe;AACbpK,IAAAA,IAAI,EAAG,oBADM;AAEbqK,IAAAA,OAAO,EAAE;AACPzC,MAAAA,GAAG,EAAEtI,QADE;AAEPmB,MAAAA,KAAK,EAAE4E;AAFA;AAFI,GAAf;AAOD,CARD;;AAUA,MAAMH,oBAAoB,GAAG,CAACvD,IAAD,EAAO2I,EAAP,KAAc;AACzC,QAAMpK,MAAM,GAAG,EAAf;AACAkC,EAAAA,MAAM,CAACC,IAAP,CAAYV,IAAZ,EAAkBtC,OAAlB,CAA0BuI,GAAG,IAAI;AAC/B,UAAM2C,OAAO,GAAGD,EAAE,CAAC1C,GAAD,CAAlB;;AACA,QAAI2C,OAAJ,EAAa;AACX,UAAIhN,CAAC,CAACyK,aAAF,CAAgBuC,OAAhB,CAAJ,EAA8B;AAC5B,cAAMC,UAAU,GAAGtF,oBAAoB,CAACvD,IAAI,CAACiG,GAAD,CAAL,EAAY2C,OAAZ,CAAvC;;AACA,YAAI,CAAChN,CAAC,CAAC6H,OAAF,CAAUoF,UAAV,CAAL,EAA4B;AAC1BtK,UAAAA,MAAM,CAAC0H,GAAD,CAAN,GAAc4C,UAAd;AACD;AACF;AACF,KAPD,MAOO;AACLtK,MAAAA,MAAM,CAAC0H,GAAD,CAAN,GAAcjG,IAAI,CAACiG,GAAD,CAAlB;AACD;AACF,GAZD;AAaA,SAAO1H,MAAP;AACD,CAhBD;;AAkBAuK,MAAM,CAACC,OAAP,GAAiB;AACfxM,EAAAA;AADe,CAAjB","sourcesContent":["// @flow\n\nconst _ = require(`lodash`)\nconst {\n  isAbstractType,\n  GraphQLOutputType,\n  GraphQLUnionType,\n  GraphQLList,\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n} = require(`graphql`)\nconst invariant = require(`invariant`)\nconst reporter = require(`gatsby-cli/lib/reporter`)\nimport { store } from \"../redux\"\nimport {\n  getDataStore,\n  getNode,\n  getNodes,\n  getNodesByType,\n  getTypes,\n} from \"../datastore\"\nimport { GatsbyIterable, isIterable } from \"../datastore/common/iterable\"\nimport { reportOnce } from \"../utils/report-once\"\nimport { wrapNode, wrapNodes } from \"../utils/detect-node-mutations\"\n\ntype TypeOrTypeName = string | GraphQLOutputType\n\n/**\n * Optional page dependency information.\n *\n * @typedef {Object} PageDependencies\n * @property {string} path The path of the page that depends on the retrieved nodes' data\n * @property {string} [connectionType] Mark this dependency as a connection\n */\ninterface PageDependencies {\n  path: string;\n  connectionType?: string;\n}\n\ninterface QueryArguments {\n  type: TypeOrTypeName;\n  query: { filter: Object, sort?: Object };\n  firstOnly?: boolean;\n}\n\nexport interface NodeModel {\n  getNodeById(\n    { id: string, type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): any | null;\n  getNodesByIds(\n    { ids: Array<string>, type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): Array<any>;\n  getAllNodes(\n    { type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): Array<any>;\n  runQuery(\n    args: QueryArguments,\n    pageDependencies?: PageDependencies\n  ): Promise<any>;\n  getTypes(): Array<string>;\n  trackPageDependencies<nodeOrNodes: Node | Node[]>(\n    result: nodeOrNodes,\n    pageDependencies?: PageDependencies\n  ): nodesOrNodes;\n  findRootNodeAncestor(obj: any, predicate: () => boolean): Node | null;\n  trackInlineObjectsInRootNode(node: Node, sanitize: boolean): Node;\n}\n\nclass LocalNodeModel {\n  constructor({\n    schema,\n    schemaComposer,\n    createPageDependency,\n    _rootNodeMap,\n    _trackedRootNodes,\n  }) {\n    this.schema = schema\n    this.schemaComposer = schemaComposer\n    this.createPageDependencyActionCreator = createPageDependency\n    this._rootNodeMap = _rootNodeMap || new WeakMap()\n    this._trackedRootNodes = _trackedRootNodes || new WeakSet()\n    this._prepareNodesQueues = {}\n    this._prepareNodesPromises = {}\n    this._preparedNodesCache = new Map()\n    this.replaceFiltersCache()\n  }\n\n  createPageDependency(createPageDependencyArgs) {\n    if (createPageDependencyArgs.connection) {\n      const nodeTypeNames = toNodeTypeNames(\n        this.schema,\n        createPageDependencyArgs.connection\n      )\n      if (nodeTypeNames) {\n        nodeTypeNames.forEach(typeName => {\n          this.createPageDependencyActionCreator({\n            ...createPageDependencyArgs,\n            connection: typeName,\n          })\n        })\n        return\n      }\n    }\n\n    this.createPageDependencyActionCreator(createPageDependencyArgs)\n  }\n\n  /**\n   * Replace the cache either with the value passed on (mainly for tests) or\n   * an empty new Map.\n   *\n   * @param {undefined | null | FiltersCache} map\n   *   (This cached is used in redux/nodes.js and caches a set of buckets (Sets)\n   *   of Nodes based on filter and tracks this for each set of types which are\n   *   actually queried. If the filter targets `id` directly, only one Node is\n   *   cached instead of a Set of Nodes. If null, don't create or use a cache.\n   */\n  replaceFiltersCache(map = new Map()) {\n    this._filtersCache = map // See redux/nodes.js for usage\n  }\n\n  withContext(context) {\n    return new ContextualNodeModel(this, context)\n  }\n\n  /**\n   * Get a node from the store by ID and optional type.\n   *\n   * @param {Object} args\n   * @param {string} args.id ID of the requested node\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the node\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {(Node|null)}\n   */\n  getNodeById(args, pageDependencies) {\n    const { id, type } = args || {}\n\n    const node = getNodeById(id)\n\n    let result\n    if (!node) {\n      result = null\n    } else if (!type) {\n      result = node\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      result = nodeTypeNames.includes(node.internal.type) ? node : null\n    }\n\n    if (result) {\n      this.trackInlineObjectsInRootNode(node)\n    }\n\n    return wrapNode(this.trackPageDependencies(result, pageDependencies))\n  }\n\n  /**\n   * Get nodes from the store by IDs and optional type.\n   *\n   * @param {Object} args\n   * @param {string[]} args.ids IDs of the requested nodes\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node[]}\n   */\n  getNodesByIds(args, pageDependencies) {\n    const { ids, type } = args || {}\n\n    const nodes = Array.isArray(ids)\n      ? ids.map(id => getNodeById(id)).filter(Boolean)\n      : []\n\n    let result\n    if (!nodes.length || !type) {\n      result = nodes\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      result = nodes.filter(node => nodeTypeNames.includes(node.internal.type))\n    }\n\n    if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    return wrapNodes(this.trackPageDependencies(result, pageDependencies))\n  }\n\n  /**\n   * Get all nodes in the store, or all nodes of a specified type. Note that\n   * this adds connectionType tracking by default if type is passed.\n   *\n   * @deprecated Since version 4.0 - Use nodeModel.findAll() instead\n   * @param {Object} args\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node[]}\n   */\n  getAllNodes(args, pageDependencies = {}) {\n    // TODO(v5): Remove API\n    reportOnce(\n      `nodeModel.getAllNodes() is deprecated. Use nodeModel.findAll() with an empty query instead.`\n    )\n    const { type = `Node` } = args || {}\n\n    let result\n    if (type === `Node`) {\n      result = getNodes()\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      const nodesByType = nodeTypeNames.map(typeName =>\n        getNodesByType(typeName)\n      )\n      const nodes = [].concat(...nodesByType)\n      result = nodes.filter(Boolean)\n    }\n\n    if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    if (typeof pageDependencies.connectionType === `undefined`) {\n      pageDependencies.connectionType =\n        typeof type === `string` ? type : type.name\n    }\n\n    return wrapNodes(this.trackPageDependencies(result, pageDependencies))\n  }\n\n  /**\n   * Get nodes of a type matching the specified query.\n   *\n   * @deprecated Since version 4.0 - Use nodeModel.findAll() or nodeModel.findOne() instead\n   * @param {Object} args\n   * @param {Object} args.query Query arguments (`filter` and `sort`)\n   * @param {(string|GraphQLOutputType)} args.type Type\n   * @param {boolean} [args.firstOnly] If true, return only first match\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Promise<Node[]>}\n   */\n  async runQuery(args, pageDependencies = {}) {\n    // TODO(v5): Remove API\n    reportOnce(\n      `nodeModel.runQuery() is deprecated. Use nodeModel.findAll() or nodeModel.findOne() instead.`\n    )\n    if (args.firstOnly) {\n      return this.findOne(args, pageDependencies)\n    }\n    const { skip, limit, ...query } = args.query\n    const result = await this.findAll({ ...args, query }, pageDependencies)\n    return Array.from(result.entries)\n  }\n\n  async _query(args) {\n    const { query = {}, type, stats, tracer } = args || {}\n\n    // We don't support querying union types (yet?), because the combined types\n    // need not have any fields in common.\n    const gqlType = typeof type === `string` ? this.schema.getType(type) : type\n    invariant(\n      !(gqlType instanceof GraphQLUnionType),\n      `Querying GraphQLUnion types is not supported.`\n    )\n\n    const nodeTypeNames = toNodeTypeNames(this.schema, gqlType)\n\n    let runQueryActivity\n\n    // check if we can get node by id and skip\n    // more expensive query pipeline\n    if (\n      typeof query?.filter?.id?.eq !== `undefined` &&\n      Object.keys(query.filter).length === 1 &&\n      Object.keys(query.filter.id).length === 1\n    ) {\n      if (tracer) {\n        runQueryActivity = reporter.phantomActivity(`runQuerySimpleIdEq`, {\n          parentSpan: tracer.getParentActivity().span,\n        })\n        runQueryActivity.start()\n      }\n      const nodeFoundById = this.getNodeById({\n        id: query.filter.id.eq,\n        type: gqlType,\n      })\n\n      if (runQueryActivity) {\n        runQueryActivity.end()\n      }\n\n      return {\n        gqlType,\n        entries: new GatsbyIterable(nodeFoundById ? [nodeFoundById] : []),\n        totalCount: async () => (nodeFoundById ? 1 : 0),\n      }\n    }\n\n    let materializationActivity\n    if (tracer) {\n      materializationActivity = reporter.phantomActivity(`Materialization`, {\n        parentSpan: tracer.getParentActivity().span,\n      })\n      materializationActivity.start()\n    }\n    const fields = getQueryFields({\n      filter: query.filter,\n      sort: query.sort,\n      group: query.group,\n      distinct: query.distinct,\n      max: query.max,\n      min: query.min,\n      sum: query.sum,\n    })\n\n    const fieldsToResolve = determineResolvableFields(\n      this.schemaComposer,\n      this.schema,\n      gqlType,\n      fields,\n      nodeTypeNames\n    )\n\n    for (const nodeTypeName of nodeTypeNames) {\n      const gqlNodeType = this.schema.getType(nodeTypeName)\n      await this.prepareNodes(gqlNodeType, fields, fieldsToResolve)\n    }\n\n    if (materializationActivity) {\n      materializationActivity.end()\n    }\n\n    if (tracer) {\n      runQueryActivity = reporter.phantomActivity(`runQuery`, {\n        parentSpan: tracer.getParentActivity().span,\n      })\n      runQueryActivity.start()\n    }\n\n    const { entries, totalCount } = await getDataStore().runQuery({\n      queryArgs: query,\n      gqlSchema: this.schema,\n      gqlComposer: this.schemaComposer,\n      gqlType,\n      resolvedFields: fieldsToResolve,\n      nodeTypeNames,\n      filtersCache: this._filtersCache,\n      stats,\n    })\n\n    if (runQueryActivity) {\n      runQueryActivity.end()\n    }\n\n    return {\n      gqlType,\n      entries: entries.map(node => {\n        // With GatsbyIterable it happens lazily as we iterate\n        this.trackInlineObjectsInRootNode(node)\n        return node\n      }),\n      totalCount,\n    }\n  }\n\n  /**\n   * Get all nodes in the store, or all nodes of a specified type (optionally with limit/skip).\n   * Returns slice of result as iterable and total count of nodes.\n   *\n   * @param {*} args\n   * @param {Object} args.query Query arguments (e.g. `limit` and `skip`)\n   * @param {(string|GraphQLOutputType)} args.type Type\n   * @param {PageDependencies} [pageDependencies]\n   * @return {Promise<Object>} Object containing `{ entries: GatsbyIterable, totalCount: () => Promise<number> }`\n   */\n  async findAll(args, pageDependencies = {}) {\n    const { gqlType, ...result } = await this._query(args, pageDependencies)\n\n    // Tracking connections by default:\n    if (typeof pageDependencies.connectionType === `undefined`) {\n      pageDependencies.connectionType = gqlType.name\n    }\n    this.trackPageDependencies(result.entries, pageDependencies)\n    return {\n      entries: wrapNodes(result.entries),\n      totalCount: result.totalCount,\n    }\n  }\n\n  /**\n   * Get one node in the store. Only returns the first result.\n   *\n   * @param {*} args\n   * @param {Object} args.query Query arguments (e.g. `filter`). Doesn't support `sort`, `limit`, `skip`.\n   * @param {(string|GraphQLOutputType)} args.type Type\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Promise<Node>}\n   */\n  async findOne(args, pageDependencies = {}) {\n    const { query = {} } = args\n    if (query.sort?.fields?.length > 0) {\n      // If we support sorting and return the first node based on sorting\n      // we'll have to always track connection not an individual node\n      throw new Error(\n        `nodeModel.findOne() does not support sorting. Use nodeModel.findAll({ query: { limit: 1 } }) instead.`\n      )\n    }\n    const { gqlType, entries } = await this._query({\n      ...args,\n      query: { ...query, skip: 0, limit: 1, sort: undefined },\n    })\n    const result = Array.from(entries)\n    const first = result[0] ?? null\n\n    if (!first) {\n      // Couldn't find matching node.\n      //  This leads to a state where data tracking for this query gets empty.\n      //  It means we will NEVER re-run this query on any data updates\n      //  (even if a new node matching this query is added at some point).\n      //  To workaround this, we have to add a connection tracking to re-run\n      //  the query whenever any node of this type changes.\n      pageDependencies.connectionType = gqlType.name\n    }\n    return wrapNode(this.trackPageDependencies(first, pageDependencies))\n  }\n\n  prepareNodes(type, queryFields, fieldsToResolve) {\n    const typeName = type.name\n    if (!this._prepareNodesQueues[typeName]) {\n      this._prepareNodesQueues[typeName] = []\n    }\n\n    this._prepareNodesQueues[typeName].push({\n      queryFields,\n      fieldsToResolve,\n    })\n\n    if (!this._prepareNodesPromises[typeName]) {\n      this._prepareNodesPromises[typeName] = new Promise(resolve => {\n        process.nextTick(async () => {\n          await this._doResolvePrepareNodesQueue(type)\n          resolve()\n        })\n      })\n    }\n\n    return this._prepareNodesPromises[typeName]\n  }\n\n  async _doResolvePrepareNodesQueue(type) {\n    const typeName = type.name\n    const queue = this._prepareNodesQueues[typeName]\n    this._prepareNodesQueues[typeName] = []\n    this._prepareNodesPromises[typeName] = null\n\n    const { queryFields, fieldsToResolve } = queue.reduce(\n      (\n        { queryFields, fieldsToResolve },\n        { queryFields: nextQueryFields, fieldsToResolve: nextFieldsToResolve }\n      ) => {\n        return {\n          queryFields: _.merge(queryFields, nextQueryFields),\n          fieldsToResolve: _.merge(fieldsToResolve, nextFieldsToResolve),\n        }\n      },\n      {\n        queryFields: {},\n        fieldsToResolve: {},\n      }\n    )\n\n    const actualFieldsToResolve = deepObjectDifference(\n      fieldsToResolve,\n      this._preparedNodesCache.get(typeName) || {}\n    )\n\n    if (!_.isEmpty(actualFieldsToResolve)) {\n      const resolvedNodes = new Map()\n      for (const node of getDataStore().iterateNodesByType(typeName)) {\n        this.trackInlineObjectsInRootNode(node)\n        const resolvedFields = await resolveRecursive(\n          this,\n          this.schemaComposer,\n          this.schema,\n          node,\n          type,\n          queryFields,\n          actualFieldsToResolve\n        )\n        if (!node.__gatsby_resolved) {\n          node.__gatsby_resolved = {}\n        }\n        resolvedNodes.set(\n          node.id,\n          _.merge(node.__gatsby_resolved, resolvedFields)\n        )\n      }\n      if (resolvedNodes.size) {\n        await saveResolvedNodes(typeName, resolvedNodes)\n      }\n      this._preparedNodesCache.set(\n        typeName,\n        _.merge(\n          {},\n          this._preparedNodesCache.get(typeName) || {},\n          actualFieldsToResolve\n        )\n      )\n    }\n  }\n\n  /**\n   * Get the names of all node types in the store.\n   *\n   * @returns {string[]}\n   */\n  getTypes() {\n    return getTypes()\n  }\n\n  /**\n   * Adds link between inline objects/arrays contained in Node object\n   * and that Node object.\n   * @param {Node} node Root Node\n   */\n  trackInlineObjectsInRootNode(node) {\n    if (!this._trackedRootNodes.has(node)) {\n      addRootNodeToInlineObject(\n        this._rootNodeMap,\n        node,\n        node.id,\n        true,\n        new Set()\n      )\n      this._trackedRootNodes.add(node)\n    }\n  }\n\n  /**\n   * Finds top most ancestor of node that contains passed Object or Array\n   * @param {(Object|Array)} obj Object/Array belonging to Node object or Node object\n   * @param {nodePredicate} [predicate] Optional callback to check if ancestor meets defined conditions\n   * @returns {Node} Top most ancestor if predicate is not specified\n   * or first node that meet predicate conditions if predicate is specified\n   */\n  findRootNodeAncestor(obj, predicate = null) {\n    let iterations = 0\n    let node = obj\n\n    while (iterations++ < 100) {\n      if (predicate && predicate(node)) return node\n\n      const parent = getNodeById(node.parent)\n      const id = this._rootNodeMap.get(node)\n      const trackedParent = getNodeById(id)\n\n      if (!parent && !trackedParent) {\n        const isMatchingRoot = !predicate || predicate(node)\n        return isMatchingRoot ? node : null\n      }\n\n      node = parent || trackedParent\n    }\n\n    reporter.error(\n      `It looks like you have a node that's set its parent as itself:\\n\\n` +\n        node\n    )\n    return null\n  }\n\n  /**\n   * Given a result, that's either a single node or an array of them, track them\n   * using pageDependencies. Defaults to tracking according to current resolver\n   * path. Returns the result back.\n   *\n   * @param {Node | Node[]} result\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node | Node[]}\n   */\n  trackPageDependencies(result, pageDependencies = {}) {\n    const { path, connectionType, track = true } = pageDependencies\n    if (path && track) {\n      if (connectionType) {\n        this.createPageDependency({ path, connection: connectionType })\n      } else {\n        const nodes = isIterable(result) ? result : [result]\n        for (const node of nodes) {\n          if (node) {\n            this.createPageDependency({ path, nodeId: node.id })\n          }\n        }\n      }\n    }\n\n    return result\n  }\n}\n\nclass ContextualNodeModel {\n  constructor(rootNodeModel, context) {\n    this.nodeModel = rootNodeModel\n    this.context = context\n  }\n\n  withContext(context) {\n    return new ContextualNodeModel(this.nodeModel, {\n      ...this.context,\n      ...context,\n    })\n  }\n\n  _getFullDependencies(pageDependencies) {\n    return {\n      path: this.context.path,\n      ...(pageDependencies || {}),\n    }\n  }\n\n  getNodeById(args, pageDependencies) {\n    return this.nodeModel.getNodeById(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  getNodesByIds(args, pageDependencies) {\n    return this.nodeModel.getNodesByIds(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  getAllNodes(args, pageDependencies) {\n    return this.nodeModel.getAllNodes(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  runQuery(args, pageDependencies) {\n    return this.nodeModel.runQuery(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  findOne(args, pageDependencies) {\n    return this.nodeModel.findOne(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  findAll(args, pageDependencies) {\n    return this.nodeModel.findAll(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  prepareNodes(...args) {\n    return this.nodeModel.prepareNodes(...args)\n  }\n\n  getTypes(...args) {\n    return this.nodeModel.getTypes(...args)\n  }\n\n  trackInlineObjectsInRootNode(...args) {\n    return this.nodeModel.trackInlineObjectsInRootNode(...args)\n  }\n\n  findRootNodeAncestor(...args) {\n    return this.nodeModel.findRootNodeAncestor(...args)\n  }\n\n  createPageDependency(...args) {\n    return this.nodeModel.createPageDependency(...args)\n  }\n\n  trackPageDependencies(result, pageDependencies) {\n    return this.nodeModel.trackPageDependencies(\n      result,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n}\n\nconst getNodeById = id => (id != null ? getNode(id) : null)\n\nconst toNodeTypeNames = (schema, gqlTypeName) => {\n  const gqlType =\n    typeof gqlTypeName === `string` ? schema.getType(gqlTypeName) : gqlTypeName\n\n  if (!gqlType) return []\n\n  const possibleTypes = isAbstractType(gqlType)\n    ? schema.getPossibleTypes(gqlType)\n    : [gqlType]\n\n  return possibleTypes\n    .filter(type => type.getInterfaces().some(iface => iface.name === `Node`))\n    .map(type => type.name)\n}\n\nconst getQueryFields = ({ filter, sort, group, distinct, max, min, sum }) => {\n  const filterFields = filter ? dropQueryOperators(filter) : {}\n  const sortFields = (sort && sort.fields) || []\n\n  if (group && !Array.isArray(group)) {\n    group = [group]\n  } else if (group == null) {\n    group = []\n  }\n\n  if (distinct && !Array.isArray(distinct)) {\n    distinct = [distinct]\n  } else if (distinct == null) {\n    distinct = []\n  }\n\n  if (max && !Array.isArray(max)) {\n    max = [max]\n  } else if (max == null) {\n    max = []\n  }\n\n  if (min && !Array.isArray(min)) {\n    min = [min]\n  } else if (min == null) {\n    min = []\n  }\n\n  if (sum && !Array.isArray(sum)) {\n    sum = [sum]\n  } else if (sum == null) {\n    sum = []\n  }\n\n  return _.merge(\n    filterFields,\n    ...sortFields.map(pathToObject),\n    ...group.map(pathToObject),\n    ...distinct.map(pathToObject),\n    ...max.map(pathToObject),\n    ...min.map(pathToObject),\n    ...sum.map(pathToObject)\n  )\n}\n\nconst pathToObject = path => {\n  if (path && typeof path === `string`) {\n    return path.split(`.`).reduceRight((acc, key) => {\n      return { [key]: acc }\n    }, true)\n  }\n  return {}\n}\n\nconst dropQueryOperators = filter =>\n  Object.keys(filter).reduce((acc, key) => {\n    const value = filter[key]\n    const k = Object.keys(value)[0]\n    const v = value[k]\n    if (_.isPlainObject(value) && _.isPlainObject(v)) {\n      acc[key] =\n        k === `elemMatch` ? dropQueryOperators(v) : dropQueryOperators(value)\n    } else {\n      acc[key] = true\n    }\n    return acc\n  }, {})\n\nconst getFields = (schema, type, node) => {\n  if (!isAbstractType(type)) {\n    return type.getFields()\n  }\n\n  const concreteType = type.resolveType(node)\n  return schema.getType(concreteType).getFields()\n}\n\nasync function resolveRecursive(\n  nodeModel,\n  schemaComposer,\n  schema,\n  node,\n  type,\n  queryFields,\n  fieldsToResolve\n) {\n  const gqlFields = getFields(schema, type, node)\n  const resolvedFields = {}\n  for (const fieldName of Object.keys(fieldsToResolve)) {\n    const fieldToResolve = fieldsToResolve[fieldName]\n    const queryField = queryFields[fieldName]\n    const gqlField = gqlFields[fieldName]\n    const gqlNonNullType = getNullableType(gqlField.type)\n    const gqlFieldType = getNamedType(gqlField.type)\n    let innerValue = await resolveField(\n      nodeModel,\n      schemaComposer,\n      schema,\n      node,\n      gqlField,\n      fieldName\n    )\n    if (gqlField && innerValue != null) {\n      if (\n        isCompositeType(gqlFieldType) &&\n        !(gqlNonNullType instanceof GraphQLList)\n      ) {\n        innerValue = await resolveRecursive(\n          nodeModel,\n          schemaComposer,\n          schema,\n          innerValue,\n          gqlFieldType,\n          queryField,\n          _.isObject(fieldToResolve) ? fieldToResolve : queryField\n        )\n      } else if (\n        isCompositeType(gqlFieldType) &&\n        (_.isArray(innerValue) || innerValue instanceof GatsbyIterable) &&\n        gqlNonNullType instanceof GraphQLList\n      ) {\n        innerValue = await Promise.all(\n          innerValue.map(item =>\n            item == null\n              ? item\n              : resolveRecursive(\n                  nodeModel,\n                  schemaComposer,\n                  schema,\n                  item,\n                  gqlFieldType,\n                  queryField,\n                  _.isObject(fieldToResolve) ? fieldToResolve : queryField\n                )\n          )\n        )\n      }\n    }\n    if (innerValue != null) {\n      resolvedFields[fieldName] = innerValue\n    }\n  }\n\n  for (const fieldName of Object.keys(queryFields)) {\n    if (!fieldsToResolve[fieldName] && node[fieldName]) {\n      // It is possible that this field still has a custom resolver\n      // See https://github.com/gatsbyjs/gatsby/issues/27368\n      resolvedFields[fieldName] = await resolveField(\n        nodeModel,\n        schemaComposer,\n        schema,\n        node,\n        gqlFields[fieldName],\n        fieldName\n      )\n    }\n  }\n\n  return _.pickBy(resolvedFields, (value, key) => queryFields[key])\n}\n\nfunction resolveField(\n  nodeModel,\n  schemaComposer,\n  schema,\n  node,\n  gqlField,\n  fieldName\n) {\n  if (!gqlField?.resolve) {\n    return node[fieldName]\n  }\n  const withResolverContext = require(`./context`)\n  return gqlField.resolve(\n    node,\n    gqlField.args.reduce((acc, arg) => {\n      acc[arg.name] = arg.defaultValue\n      return acc\n    }, {}),\n    withResolverContext({\n      schema,\n      schemaComposer,\n      nodeModel,\n    }),\n    {\n      fieldName,\n      schema,\n      returnType: gqlField.type,\n    }\n  )\n}\n\nconst determineResolvableFields = (\n  schemaComposer,\n  schema,\n  type,\n  fields,\n  nodeTypeNames,\n  isNestedType = false\n) => {\n  const fieldsToResolve = {}\n  const gqlFields = type.getFields()\n  Object.keys(fields).forEach(fieldName => {\n    const field = fields[fieldName]\n    const gqlField = gqlFields[fieldName]\n    const gqlFieldType = getNamedType(gqlField.type)\n    const typeComposer = schemaComposer.getAnyTC(type.name)\n    const possibleTCs = [\n      typeComposer,\n      ...nodeTypeNames.map(name => schemaComposer.getAnyTC(name)),\n    ]\n    let needsResolve = false\n    for (const tc of possibleTCs) {\n      needsResolve = tc.getFieldExtension(fieldName, `needsResolve`) || false\n      if (needsResolve) {\n        break\n      }\n    }\n\n    if (_.isObject(field) && gqlField) {\n      const innerResolved = determineResolvableFields(\n        schemaComposer,\n        schema,\n        gqlFieldType,\n        field,\n        toNodeTypeNames(schema, gqlFieldType),\n        true\n      )\n      if (!_.isEmpty(innerResolved)) {\n        fieldsToResolve[fieldName] = innerResolved\n      }\n    }\n\n    if (!fieldsToResolve[fieldName] && needsResolve) {\n      fieldsToResolve[fieldName] = true\n    }\n    if (!fieldsToResolve[fieldName] && isNestedType) {\n      // If parent field needs to be resolved - all nested fields should be added as well\n      // See https://github.com/gatsbyjs/gatsby/issues/26056\n      fieldsToResolve[fieldName] = true\n    }\n  })\n  return fieldsToResolve\n}\n\nconst addRootNodeToInlineObject = (\n  rootNodeMap,\n  data,\n  nodeId,\n  isNode /* : boolean */,\n  path /* : Set<mixed> */\n) /* : void */ => {\n  const isPlainObject = _.isPlainObject(data)\n\n  if (isPlainObject || _.isArray(data)) {\n    if (path.has(data)) return\n    path.add(data)\n\n    _.each(data, (o, key) => {\n      if (!isNode || key !== `internal`) {\n        addRootNodeToInlineObject(rootNodeMap, o, nodeId, false, path)\n      }\n    })\n\n    // don't need to track node itself\n    if (!isNode) {\n      rootNodeMap.set(data, nodeId)\n    }\n  }\n}\n\nconst saveResolvedNodes = async (typeName, resolvedNodes) => {\n  store.dispatch({\n    type: `SET_RESOLVED_NODES`,\n    payload: {\n      key: typeName,\n      nodes: resolvedNodes,\n    },\n  })\n}\n\nconst deepObjectDifference = (from, to) => {\n  const result = {}\n  Object.keys(from).forEach(key => {\n    const toValue = to[key]\n    if (toValue) {\n      if (_.isPlainObject(toValue)) {\n        const deepResult = deepObjectDifference(from[key], toValue)\n        if (!_.isEmpty(deepResult)) {\n          result[key] = deepResult\n        }\n      }\n    } else {\n      result[key] = from[key]\n    }\n  })\n  return result\n}\n\nmodule.exports = {\n  LocalNodeModel,\n}\n"],"file":"node-model.js"}