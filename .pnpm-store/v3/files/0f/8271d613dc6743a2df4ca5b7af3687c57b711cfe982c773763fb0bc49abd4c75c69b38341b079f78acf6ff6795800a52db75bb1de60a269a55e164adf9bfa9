{"version":3,"sources":["../../../../../src/steps/source-nodes/update-nodes/wp-actions/index.js"],"names":["getWpActions","variables","helpers","throwFetchErrors","throwGqlErrors","sourceTime","Date","now","actionMonitorActions","contentTypePlural","query","actionMonitorQuery","nodeTypeName","length","cache","set","LAST_COMPLETED_SOURCE_TIME","handleWpActions","api","cachedNodeIds","wpAction","actionType","refetchAll","fetchAndRunWpActions","pluginOptions","since","wpActions","didUpdate"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,YAAY,GAAG,OAAO;AACjCC,EAAAA,SADiC;AAEjCC,EAAAA,OAFiC;AAGjCC,EAAAA,gBAAgB,GAAG,KAHc;AAIjCC,EAAAA,cAAc,GAAG;AAJgB,CAAP,KAKtB;AACJ,QAAMC,UAAU,GAAGC,IAAI,CAACC,GAAL,EAAnB,CADI,CAGJ;;AACA,QAAMC,oBAAoB,GAAG,MAAM,+CAAqB;AACtDC,IAAAA,iBAAiB,EAAG,sBADkC;AAEtDC,IAAAA,KAAK,EAAEC,kCAF+C;AAGtDC,IAAAA,YAAY,EAAG,eAHuC;AAItDV,IAAAA,OAJsD;AAKtDC,IAAAA,gBALsD;AAMtDC,IAAAA,cANsD;AAOtD,OAAGH;AAPmD,GAArB,CAAnC;;AAUA,MAAI,CAACO,oBAAD,IAAyB,CAACA,oBAAoB,CAACK,MAAnD,EAA2D;AACzD,WAAO,EAAP;AACD;;AAED,QAAMX,OAAO,CAACY,KAAR,CAAcC,GAAd,CAAkBC,qCAAlB,EAA8CX,UAA9C,CAAN;AAEA,SAAOG,oBAAP;AACD,CA1BM;AA4BP;AACA;AACA;AACA;;;;;AACO,MAAMS,eAAe,GAAG,MAAMC,GAAN,IAAa;AAC1C,QAAM;AAAEC,IAAAA,aAAF;AAAiBjB,IAAAA;AAAjB,MAA6BgB,GAAnC;;AAEA,UAAQA,GAAG,CAACE,QAAJ,CAAaC,UAArB;AACE,SAAM,QAAN;AACE,YAAM,qBAAeH,GAAf,CAAN;AACA;;AACF,SAAM,QAAN;AACA,SAAM,QAAN;AACE,YAAM,qBAAeA,GAAf,CAAN;AACA;;AACF,SAAM,sBAAN;AACE,YAAM,+CAAN;AACA;;AACF,SAAM,aAAN;AACE,YAAM,mBAAY,EAAE,GAAGhB,OAAL;AAAcoB,QAAAA,UAAU,EAAE;AAA1B,OAAZ,EAA8C,EAA9C,CAAN;AAZJ;;AAeA,QAAM,+BAAmB;AAAEpB,IAAAA;AAAF,GAAnB,CAAN;AAEA,SAAOiB,aAAP;AACD,CArBM;AAuBP;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMI,oBAAoB,GAAG,OAAO;AACzCrB,EAAAA,OADyC;AAEzCsB,EAAAA,aAFyC;AAGzCC,EAAAA,KAHyC;AAIzCtB,EAAAA,gBAAgB,GAAG,KAJsB;AAKzCC,EAAAA,cAAc,GAAG;AALwB,CAAP,KAM9B;AACJ;AACA,QAAMsB,SAAS,GAAG,MAAM1B,YAAY,CAAC;AACnCC,IAAAA,SAAS,EAAE;AACTwB,MAAAA;AADS,KADwB;AAInCvB,IAAAA,OAJmC;AAKnCC,IAAAA,gBALmC;AAMnCC,IAAAA;AANmC,GAAD,CAApC;AASA,QAAMuB,SAAS,GAAG,CAAC,CAACD,SAAS,CAACb,MAA9B;;AAEA,MAAIc,SAAJ,EAAe;AACb,SAAK,MAAMP,QAAX,IAAuBM,SAAvB,EAAkC;AAChC;AACA,YAAMT,eAAe,CAAC;AACpBf,QAAAA,OADoB;AAEpBsB,QAAAA,aAFoB;AAGpBJ,QAAAA;AAHoB,OAAD,CAArB;AAKD;AACF;;AAED,SAAO;AACLM,IAAAA,SADK;AAELC,IAAAA;AAFK,GAAP;AAID,CAlCM","sourcesContent":["import { actionMonitorQuery } from \"~/utils/graphql-queries\"\nimport wpActionDELETE from \"./delete\"\nimport wpActionUPDATE from \"./update\"\nimport { LAST_COMPLETED_SOURCE_TIME } from \"~/constants\"\nimport { paginatedWpNodeFetch } from \"~/steps/source-nodes/fetch-nodes/fetch-nodes-paginated\"\n\nimport fetchAndCreateNonNodeRootFields from \"~/steps/source-nodes/create-nodes/fetch-and-create-non-node-root-fields\"\nimport { setHardCachedNodes } from \"~/utils/cache\"\nimport { sourceNodes } from \"~/steps/source-nodes\"\n\n/**\n * getWpActions\n *\n * pull the latest changes from WP and determine which of those changes\n * require updates in Gatsby, then return valid changes\n * An example of a non-valid change would be a post that was created\n * and then immediately deleted.\n */\nexport const getWpActions = async ({\n  variables,\n  helpers,\n  throwFetchErrors = false,\n  throwGqlErrors = false,\n}) => {\n  const sourceTime = Date.now()\n\n  // @todo add pagination in case there are more than 100 actions since the last build\n  const actionMonitorActions = await paginatedWpNodeFetch({\n    contentTypePlural: `actionMonitorActions`,\n    query: actionMonitorQuery,\n    nodeTypeName: `ActionMonitor`,\n    helpers,\n    throwFetchErrors,\n    throwGqlErrors,\n    ...variables,\n  })\n\n  if (!actionMonitorActions || !actionMonitorActions.length) {\n    return []\n  }\n\n  await helpers.cache.set(LAST_COMPLETED_SOURCE_TIME, sourceTime)\n\n  return actionMonitorActions\n}\n\n/**\n * Acts on changes in WordPress to call functions that sync Gatsby with\n * the latest WP changes\n */\nexport const handleWpActions = async api => {\n  const { cachedNodeIds, helpers } = api\n\n  switch (api.wpAction.actionType) {\n    case `DELETE`:\n      await wpActionDELETE(api)\n      break\n    case `UPDATE`:\n    case `CREATE`:\n      await wpActionUPDATE(api)\n      break\n    case `NON_NODE_ROOT_FIELDS`:\n      await fetchAndCreateNonNodeRootFields()\n      break\n    case `REFETCH_ALL`:\n      await sourceNodes({ ...helpers, refetchAll: true }, {})\n  }\n\n  await setHardCachedNodes({ helpers })\n\n  return cachedNodeIds\n}\n\n/**\n * fetchAndRunWpActions\n *\n * fetches a list of latest changes in WordPress\n * and then acts on those changes\n */\nexport const fetchAndRunWpActions = async ({\n  helpers,\n  pluginOptions,\n  since,\n  throwFetchErrors = false,\n  throwGqlErrors = false,\n}) => {\n  // check for new, edited, or deleted posts in WP \"Action Monitor\"\n  const wpActions = await getWpActions({\n    variables: {\n      since,\n    },\n    helpers,\n    throwFetchErrors,\n    throwGqlErrors,\n  })\n\n  const didUpdate = !!wpActions.length\n\n  if (didUpdate) {\n    for (const wpAction of wpActions) {\n      // Create, update, and delete nodes\n      await handleWpActions({\n        helpers,\n        pluginOptions,\n        wpAction,\n      })\n    }\n  }\n\n  return {\n    wpActions,\n    didUpdate,\n  }\n}\n"],"file":"index.js"}