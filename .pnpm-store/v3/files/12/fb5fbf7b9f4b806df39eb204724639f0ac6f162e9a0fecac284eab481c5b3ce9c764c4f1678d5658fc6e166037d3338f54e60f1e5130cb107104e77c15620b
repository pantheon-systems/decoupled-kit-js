{"version":3,"sources":["../../src/utils/client-assets-for-template.ts"],"names":["join","path","posix","inlineCssPromiseCache","Map","readWebpackStats","publicDir","filePath","rawPageData","fs","readFile","JSON","parse","getScriptsAndStylesForTemplate","componentChunkName","webpackStats","uniqScripts","uniqStyles","handleAsset","name","rel","uniqueAssetsMap","endsWith","existingAsset","get","set","chunkName","assets","assetsByChunkName","asset","childAssets","childAssetsByChunkName","Object","entries","scripts","scriptAsset","values","unshift","push","styles","styleAsset","getInlineCssPromise","process","cwd","content","reversedStyles","slice","reverse","reversedScripts","clearCache"],"mappings":"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","sourcesContent":["import * as path from \"path\"\nimport * as fs from \"fs-extra\"\n\n// we want to force posix-style joins, so Windows doesn't produce backslashes for urls\nconst { join } = path.posix\n\nexport interface IScriptsAndStyles {\n  scripts: Array<any>\n  styles: Array<any>\n  reversedStyles: Array<any>\n  reversedScripts: Array<any>\n}\n\ninterface IChunk {\n  name: string\n  rel: string\n  content?: string\n}\n\nconst inlineCssPromiseCache = new Map<string, Promise<string>>()\n\nexport async function readWebpackStats(publicDir: string): Promise<any> {\n  const filePath = join(publicDir, `webpack.stats.json`)\n  const rawPageData = await fs.readFile(filePath, `utf-8`)\n\n  return JSON.parse(rawPageData)\n}\n\nexport async function getScriptsAndStylesForTemplate(\n  componentChunkName,\n  webpackStats\n): Promise<IScriptsAndStyles> {\n  const uniqScripts = new Map<string, IChunk>()\n  const uniqStyles = new Map<string, IChunk>()\n\n  /**\n   * Add script or style to correct bucket. Make sure those are unique (no duplicates) and that \"preload\" will win over any other \"rel\"\n   */\n  function handleAsset(name: string, rel: string): void {\n    let uniqueAssetsMap: Map<string, IChunk> | undefined\n\n    // pick correct map depending on asset type\n    if (name.endsWith(`.js`)) {\n      uniqueAssetsMap = uniqScripts\n    } else if (name.endsWith(`.css`)) {\n      uniqueAssetsMap = uniqStyles\n    }\n\n    if (uniqueAssetsMap) {\n      const existingAsset = uniqueAssetsMap.get(name)\n\n      if (\n        existingAsset &&\n        rel === `preload` &&\n        existingAsset.rel !== `preload`\n      ) {\n        // if we already track this asset, but it's not preload - make sure we make it preload\n        // as it has higher priority\n        existingAsset.rel = `preload`\n      } else if (!existingAsset) {\n        uniqueAssetsMap.set(name, { name, rel })\n      }\n    }\n  }\n\n  // Pick up scripts and styles that are used by a template using webpack.stats.json\n  for (const chunkName of [`app`, componentChunkName]) {\n    const assets = webpackStats.assetsByChunkName[chunkName]\n    if (!assets) {\n      continue\n    }\n\n    for (const asset of assets) {\n      if (asset === `/`) {\n        continue\n      }\n\n      handleAsset(asset, `preload`)\n    }\n\n    // Handling for webpack magic comments, for example:\n    // import(/* webpackChunkName: \"<chunk_name>\", webpackPrefetch: true */ `<path_to_module>`)\n    // Shape of webpackStats.childAssetsByChunkName:\n    // {\n    //   childAssetsByChunkName: {\n    //     <name_of_top_level_chunk>: {\n    //       prefetch: [\n    //         \"<chunk_name>-<chunk_hash>.js\",\n    //       ]\n    //     }\n    //   }\n    // }\n    const childAssets = webpackStats.childAssetsByChunkName[chunkName]\n    if (!childAssets) {\n      continue\n    }\n\n    for (const [rel, assets] of Object.entries(childAssets)) {\n      // @ts-ignore TS doesn't like that assets is not typed and especially that it doesn't know that it's Iterable\n      for (const asset of assets) {\n        handleAsset(asset, rel)\n      }\n    }\n  }\n\n  // create scripts array, making sure \"preload\" scripts have priority\n  const scripts: Array<IChunk> = []\n  for (const scriptAsset of uniqScripts.values()) {\n    if (scriptAsset.rel === `preload`) {\n      // give priority to preload\n      scripts.unshift(scriptAsset)\n    } else {\n      scripts.push(scriptAsset)\n    }\n  }\n\n  // create styles array, making sure \"preload\" styles have priority and that we read .css content for non-prefetch \"rel\"s for inlining\n  const styles: Array<IChunk> = []\n  for (const styleAsset of uniqStyles.values()) {\n    if (styleAsset.rel !== `prefetch`) {\n      let getInlineCssPromise = inlineCssPromiseCache.get(styleAsset.name)\n      if (!getInlineCssPromise) {\n        getInlineCssPromise = fs.readFile(\n          join(process.cwd(), `public`, styleAsset.name),\n          `utf-8`\n        )\n\n        inlineCssPromiseCache.set(\n          styleAsset.name,\n          getInlineCssPromise as Promise<string>\n        )\n      }\n\n      styleAsset.content = await getInlineCssPromise\n    }\n\n    if (styleAsset.rel === `preload`) {\n      // give priority to preload\n      styles.unshift(styleAsset)\n    } else {\n      styles.push(styleAsset)\n    }\n  }\n\n  return {\n    scripts,\n    styles,\n    reversedStyles: styles.slice(0).reverse(),\n    reversedScripts: scripts.slice(0).reverse(),\n  }\n}\n\nexport function clearCache(): void {}\n"],"file":"client-assets-for-template.js"}