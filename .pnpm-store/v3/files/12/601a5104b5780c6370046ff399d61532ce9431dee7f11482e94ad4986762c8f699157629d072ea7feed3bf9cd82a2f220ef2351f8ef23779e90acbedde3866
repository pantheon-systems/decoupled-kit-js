{"version":3,"sources":["../../../../src/steps/create-schema-customization/transform-fields/transform-union.js"],"names":["transformUnion","field","fieldName","type","name","resolve","source","_","context","resolvedField","id","gatsbyNode","nodeModel","getNodeById","transformListOfUnions","typeName","ofType","length","reduce","accumulator","item","node","__typename","push"],"mappings":";;;;;AAAA;;AAEO,MAAMA,cAAc,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA0B;AACtD,SAAO;AACLC,IAAAA,IAAI,EAAE,4BAAcF,KAAK,CAACE,IAAN,CAAWC,IAAzB,CADD;AAELC,IAAAA,OAAO,EAAE,CAACC,MAAD,EAASC,CAAT,EAAYC,OAAZ,KAAwB;AAC/B,YAAMC,aAAa,GACjBH,MAAM,CAACJ,SAAD,CAAN,IACAI,MAAM,CAAE,GAAEL,KAAK,CAACG,IAAK,cAAaH,KAAK,CAACE,IAAN,CAAWC,IAAK,EAA5C,CAFR;;AAIA,UAAIK,aAAa,IAAIA,aAAa,CAACC,EAAnC,EAAuC;AACrC,cAAMC,UAAU,GAAGH,OAAO,CAACI,SAAR,CAAkBC,WAAlB,CAA8B;AAC/CH,UAAAA,EAAE,EAAED,aAAa,CAACC,EAD6B;AAE/CP,UAAAA,IAAI,EAAEM,aAAa,CAACN;AAF2B,SAA9B,CAAnB;;AAKA,YAAIQ,UAAJ,EAAgB;AACd,iBAAOA,UAAP;AACD;AACF;;AAED,aAAOF,aAAP,aAAOA,aAAP,cAAOA,aAAP,GAAwB,IAAxB;AACD;AAnBI,GAAP;AAqBD,CAtBM;;;;AAwBA,MAAMK,qBAAqB,GAAG,CAAC;AAAEb,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA0B;AAC7D,QAAMa,QAAQ,GAAG,4BAAcd,KAAK,CAACE,IAAN,CAAWa,MAAX,CAAkBZ,IAAhC,CAAjB;AAEA,SAAO;AACLD,IAAAA,IAAI,EAAG,IAAGY,QAAS,GADd;AAELV,IAAAA,OAAO,EAAE,CAACC,MAAD,EAASC,CAAT,EAAYC,OAAZ,KAAwB;AAAA;;AAC/B,YAAMC,aAAa,wBACjBH,MAAM,CAACJ,SAAD,CADW,iEAEjBI,MAAM,CAAE,GAAEL,KAAK,CAACG,IAAK,cAAaH,KAAK,CAACE,IAAN,CAAWC,IAAK,EAA5C,CAFR;;AAIA,UACG,CAACK,aAAD,IAAkBA,aAAa,KAAK,KAArC,IACA,CAACA,aAAa,CAACQ,MAFjB,EAGE;AACA,eAAO,IAAP;AACD;;AAED,aAAOR,aAAa,CAACS,MAAd,CAAqB,CAACC,WAAD,EAAcC,IAAd,KAAuB;AACjD;AACA;AACA,cAAMC,IAAI,GAAGD,IAAI,CAACV,EAAL,GACTF,OAAO,CAACI,SAAR,CAAkBC,WAAlB,CAA8B;AAC5BH,UAAAA,EAAE,EAAEU,IAAI,CAACV,EADmB;AAE5BP,UAAAA,IAAI,EAAE,4BAAciB,IAAI,CAACE,UAAnB;AAFsB,SAA9B,CADS,GAKT,IALJ;;AAOA,YAAID,IAAJ,EAAU;AACRF,UAAAA,WAAW,CAACI,IAAZ,CAAiBF,IAAjB;AACD,SAFD,MAEO,IAAI,CAACD,IAAI,CAACV,EAAV,EAAc;AACnBS,UAAAA,WAAW,CAACI,IAAZ,CAAiBH,IAAjB;AACD;;AAED,eAAOD,WAAP;AACD,OAjBM,EAiBJ,EAjBI,CAAP;AAkBD;AAhCI,GAAP;AAkCD,CArCM","sourcesContent":["import { buildTypeName } from \"~/steps/create-schema-customization/helpers\"\n\nexport const transformUnion = ({ field, fieldName }) => {\n  return {\n    type: buildTypeName(field.type.name),\n    resolve: (source, _, context) => {\n      const resolvedField =\n        source[fieldName] ||\n        source[`${field.name}__typename_${field.type.name}`]\n\n      if (resolvedField && resolvedField.id) {\n        const gatsbyNode = context.nodeModel.getNodeById({\n          id: resolvedField.id,\n          type: resolvedField.type,\n        })\n\n        if (gatsbyNode) {\n          return gatsbyNode\n        }\n      }\n\n      return resolvedField ?? null\n    },\n  }\n}\n\nexport const transformListOfUnions = ({ field, fieldName }) => {\n  const typeName = buildTypeName(field.type.ofType.name)\n\n  return {\n    type: `[${typeName}]`,\n    resolve: (source, _, context) => {\n      const resolvedField =\n        source[fieldName] ??\n        source[`${field.name}__typename_${field.type.name}`]\n\n      if (\n        (!resolvedField && resolvedField !== false) ||\n        !resolvedField.length\n      ) {\n        return null\n      }\n\n      return resolvedField.reduce((accumulator, item) => {\n        // @todo use our list of Gatsby node types to do a more performant check\n        // on wether this is a Gatsby node or not.\n        const node = item.id\n          ? context.nodeModel.getNodeById({\n              id: item.id,\n              type: buildTypeName(item.__typename),\n            })\n          : null\n\n        if (node) {\n          accumulator.push(node)\n        } else if (!item.id) {\n          accumulator.push(item)\n        }\n\n        return accumulator\n      }, [])\n    },\n  }\n}\n"],"file":"transform-union.js"}