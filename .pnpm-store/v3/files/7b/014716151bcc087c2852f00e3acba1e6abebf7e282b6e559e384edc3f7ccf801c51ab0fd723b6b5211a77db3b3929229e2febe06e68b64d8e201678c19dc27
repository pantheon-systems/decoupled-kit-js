{"version":3,"sources":["../../../src/steps/preview/index.ts"],"names":["inDevelopPreview","process","env","NODE_ENV","ENABLE_GATSBY_REFRESH_ENDPOINT","inPreviewRunner","RUNNER_TYPE","IS_GATSBY_PREVIEW","inPreviewMode","previewQueue","getPreviewQueue","previewRequestConcurrency","store","getState","gatsbyApi","pluginOptions","schema","PQueue","concurrency","carryoverConcurrencyCount","previewForIdIsAlreadyBeingProcessed","id","existingCallbacks","previewStore","nodePageCreatedCallbacks","alreadyProcessingThisPreview","writeDummyPageDataJsonIfNeeded","previewData","pageNode","isDraft","pageDataDirectory","path","join","cwd","fs","ensureDir","pageDataPath","pageDataExists","pathExists","writeJSON","createPreviewStatusCallback","reporter","passedNode","context","status","graphqlEndpoint","error","statusContext","message","data","url","query","variables","input","clientMutationId","modified","pagePath","parentDatabaseId","previewDatabaseId","errorContext","forceReportCriticalErrors","headers","WPGatsbyPreview","token","WPGatsbyPreviewUser","userDatabaseId","wpGatsbyRemotePreviewStatus","success","log","sourcePreview","actions","requiredProperties","missingProperties","filter","property","length","warn","info","JSON","stringify","sendPreviewStatus","dispatch","subscribeToPagesCreatedFromNodeById","nodeId","node","actionType","previewParentId","isPreview","manifestIds","forEach","manifestId","unstable_createNodeManifest","sourcePreviews","helpers","webhookBody","debug","preview","inPreviewDebugModeOption","remoteUrl","hostname","settingsHostname","urlUtil","parse","remoteHostname","databaseId","chalk","bold","inPreviewDebugMode","WP_GATSBY_PREVIEW_DEBUG","wpGatsbyPreviewNodeManifestsAreSupported","typeName","fieldName","previewActions","contentTypePlural","nodeTypeName","Date","now","queue","add","Promise","all","onEmpty","onIdle"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AAGA;;AAEA,MAAMA,gBAAgB,GACpBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAA0B,aAA1B,IACA,CAAC,CAACF,OAAO,CAACC,GAAR,CAAYE,8BAFhB;AAIA,MAAMC,eAAe,GACnBJ,OAAO,CAACC,GAAR,CAAYI,WAAZ,KAA6B,SAA7B,IACAL,OAAO,CAACC,GAAR,CAAYI,WAAZ,KAA6B,sBAD7B,IAEA,CAAC,CAACL,OAAO,CAACC,GAAR,CAAYK,iBAHhB,C,CAKA;AACA;;AACO,MAAMC,aAAa,GAAG,MAAeR,gBAAgB,IAAIK,eAAzD;;;AA4BP,IAAII,YAAJ;;AAEA,MAAMC,eAAe,GAAG,MAAc;AACpC,MAAI,CAACD,YAAL,EAAmB;AACjB,UAAM;AAAEE,MAAAA;AAAF,QACJC,eAAMC,QAAN,GAAiBC,SAAjB,CAA2BC,aAA3B,CAAyCC,MAD3C;;AAGAP,IAAAA,YAAY,GAAG,IAAIQ,eAAJ,CAAW;AACxBC,MAAAA,WAAW,EAAEP,yBADW;AAExBQ,MAAAA,yBAAyB,EAAE;AAFH,KAAX,CAAf;AAID;;AAED,SAAOV,YAAP;AACD,CAZD,C,CAcA;AACA;;;AACA,MAAMW,mCAAmC,GAAIC,EAAD,IAAyB;AACnE,MAAI,CAACA,EAAL,EAAS;AACP,WAAO,KAAP;AACD;;AAED,QAAMC,iBAAiB,GACrBV,eAAMC,QAAN,GAAiBU,YAAjB,CAA8BC,wBADhC;;AAGA,QAAMC,4BAA4B,GAAG,CAAC,EAACH,iBAAD,aAACA,iBAAD,eAACA,iBAAiB,CAAGD,EAAH,CAAlB,CAAtC;AAEA,SAAOI,4BAAP;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,8BAA8B,GAAG,OAAO;AAC5CC,EAAAA,WAD4C;AAE5CC,EAAAA;AAF4C,CAAP,KAMlB;AACnB,MAAI,CAACD,WAAW,CAACE,OAAjB,EAA0B;AACxB;AACD;;AAED,QAAMC,iBAAiB,GAAGC,cAAKC,IAAL,CACxB/B,OAAO,CAACgC,GAAR,EADwB,EAEvB,kBAFuB,EAGxBL,QAAQ,CAACG,IAHe,CAA1B;;AAMA,QAAMG,iBAAGC,SAAH,CAAaL,iBAAb,CAAN;;AAEA,QAAMM,YAAY,GAAGL,cAAKC,IAAL,CAAUF,iBAAV,EAA8B,gBAA9B,CAArB;;AAEA,QAAMO,cAAc,GAAG,MAAMH,iBAAGI,UAAH,CAAcF,YAAd,CAA7B;;AAEA,MAAI,CAACC,cAAL,EAAqB;AACnB,UAAMH,iBAAGK,SAAH,CAAaH,YAAb,EAA2B;AAC/BP,MAAAA,OAAO,EAAEF,WAAW,CAACE;AADU,KAA3B,CAAN;AAGD;AACF,CA5BD;;AA2CA,MAAMW,2BAA2B,GAC/B,CAAC;AACCb,EAAAA,WADD;AAECc,EAAAA;AAFD,CAAD,KAOA,OAAO;AACLC,EAAAA,UADK;AAELd,EAAAA,QAFK;AAGLe,EAAAA,OAHK;AAILC,EAAAA,MAJK;AAKLC,EAAAA,eALK;AAMLC,EAAAA;AANK,CAAP,KAO4C;AAAA;;AAC1C,MAAIF,MAAM,KAAM,iBAAhB,EAAkC;AAChC;AACA;AACA;AACA,UAAMlB,8BAA8B,CAAC;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,KAAD,CAApC;AACD;;AAED,QAAMmB,aAAa,GAAGD,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAEE,OAAP,GACjB,GAAEL,OAAQ,OAAMG,KAAK,CAACE,OAAQ,EADb,GAElBL,OAFJ;AAIA,QAAM;AAAEM,IAAAA;AAAF,MAAW,MAAM,2BAAa;AAClCC,IAAAA,GAAG,EAAEL,eAD6B;AAElCM,IAAAA,KAAK;AAAE;AAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAVwC;AAWlCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AACLC,QAAAA,gBAAgB,EAAG,mBADd;AAELC,QAAAA,QAAQ,EAAEb,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEa,QAFjB;AAGLC,QAAAA,QAAQ,EAAE5B,QAAF,aAAEA,QAAF,uBAAEA,QAAQ,CAAEG,IAHf;AAIL0B,QAAAA,gBAAgB,EACd9B,WAAW,CAAC8B,gBAAZ,IAAgC9B,WAAW,CAAC+B,iBALzC;AAK4D;AACjEd,QAAAA,MANK;AAOLG,QAAAA;AAPK;AADE,KAXuB;AAsBlCY,IAAAA,YAAY,EAAG,4DAtBmB;AAuBlCC,IAAAA,yBAAyB,EAAE,IAvBO;AAwBlCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,eAAe,EAAEnC,WAAW,CAACoC,KADtB;AAEPC,MAAAA,mBAAmB,EAAErC,WAAW,CAACsC;AAF1B;AAxByB,GAAb,CAAvB;;AA8BA,MAAIhB,IAAJ,aAAIA,IAAJ,wCAAIA,IAAI,CAAEiB,2BAAV,kDAAI,sBAAmCC,OAAvC,EAAgD;AAC9C1B,IAAAA,QAAQ,CAAC2B,GAAT,CACE,wCACG,2DAA0DzC,WAAW,CAACN,EAAG,WAAUsB,OAAQ,EAD9F,CADF;AAKD,GAND,MAMO;AACLF,IAAAA,QAAQ,CAAC2B,GAAT,CACE,wCACG,mCAAkCzC,WAAW,CAACN,EAAG,mBAAkBsB,OAAQ,oDAD9E,CADF;AAKD;AACF,CAtEH;AAwEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAM0B,aAAa,GAAG,OAAO;AAClC1C,EAAAA,WADkC;AAElCc,EAAAA,QAFkC;AAGlC6B,EAAAA;AAHkC,CAAP,KAQR;AAAA;;AACnB,MAAIlD,mCAAmC,CAACO,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEN,EAAd,CAAvC,EAA0D;AACxD;AACD;;AAED,QAAMkD,kBAAkB,GAAG,CACxB,mBADwB,EAExB,IAFwB,EAGxB,OAHwB,EAIxB,WAJwB,EAKxB,kBALwB,EAMxB,UANwB,EAOxB,gBAPwB,CAA3B;AAUA,QAAMC,iBAAiB,GAAGD,kBAAkB,CAACE,MAAnB,CACxBC,QAAQ,IAAI,EAAEA,QAAQ,IAAI/C,WAAd,CADY,CAA1B;;AAIA,MAAI,CAACA,WAAD,IAAgB6C,iBAAiB,CAACG,MAAtC,EAA8C;AAC5ClC,IAAAA,QAAQ,CAACmC,IAAT,CACE,wCACG,oFADH,CADF;AAKAnC,IAAAA,QAAQ,CAACoC,IAAT,CACE,wCACG,yBAAwBC,IAAI,CAACC,SAAL,CAAeP,iBAAf,EAAkC,IAAlC,EAAwC,CAAxC,CAA2C,EADtE,CADF;AAKA/B,IAAAA,QAAQ,CAAC2B,GAAT,CACE,wCAAkB,kBAAiBU,IAAI,CAACC,SAAL,CAAepD,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAAqC,EAAxE,CADF;AAGA;AACD;;AAED,QAAM,wCAAN;AAEA,QAAMqD,iBAAiB,GAAGxC,2BAA2B,CAAC;AACpDb,IAAAA,WADoD;AAEpDc,IAAAA;AAFoD,GAAD,CAArD,CAtCmB,CA2CnB;AACA;;AACA7B,iBAAMqE,QAAN,CAAe1D,YAAf,CAA4B2D,mCAA5B,CAAgE;AAC9DC,IAAAA,MAAM,EAAExD,WAAW,CAACN,EAD0C;AAE9DkC,IAAAA,QAAQ,EAAE5B,WAAW,CAAC4B,QAFwC;AAG9DyB,IAAAA;AAH8D,GAAhE;;AAMA,QAAM;AAAEI,IAAAA;AAAF,MAAW,MAAM,sCAAyB;AAC9CC,IAAAA,UAAU,EAAG,SADiC;AAE9C,OAAG1D,WAF2C;AAG9C2D,IAAAA,eAAe,EAAE3D,WAAW,CAAC8B,gBAHiB;AAI9C8B,IAAAA,SAAS,EAAE;AAJmC,GAAzB,CAAvB;;AAOA,MACE5D,WAAW,SAAX,IAAAA,WAAW,WAAX,6BAAAA,WAAW,CAAE6D,WAAb,wEAA0Bb,MAA1B,IACC,6BAAD,IAAiCL,OADjC,IAEAc,IAHF,EAIE;AACAzD,IAAAA,WAAW,CAAC6D,WAAZ,CAAwBC,OAAxB,CAAgCC,UAAU,IAAI;AAC5CpB,MAAAA,OAAO,CAACqB,2BAAR,CAAoC;AAClCD,QAAAA,UADkC;AAElCN,QAAAA;AAFkC,OAApC;AAID,KALD;AAMD;AACF,CA9EM;AAgFP;AACA;AACA;AACA;AACA;;;;;AACO,MAAMQ,cAAc,GAAG,MAAOC,OAAP,IAAiD;AAC7E,QAAM;AAAEC,IAAAA,WAAF;AAAerD,IAAAA,QAAf;AAAyB6B,IAAAA;AAAzB,MAAqCuB,OAA3C;AACA,QAAM;AACJE,IAAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAEC;AAAX,KADH;AAEJ/C,IAAAA;AAFI,MAGF,qCAHJ,CAF6E,CAO7E;AACA;;AACA,MAAI4C,WAAW,CAACI,SAAhB,EAA2B;AACzB;AACA,UAAM;AAAEC,MAAAA,QAAQ,EAAEC;AAAZ,QAAiCC,aAAQC,KAAR,CAAcpD,GAAd,CAAvC;;AACA,UAAM;AAAEiD,MAAAA,QAAQ,EAAEI;AAAZ,QAA+BF,aAAQC,KAAR,CAAcR,WAAW,CAACI,SAA1B,CAArC;;AAEA,QAAIE,gBAAgB,KAAKG,cAAzB,EAAyC;AACvC,YAAMvB,iBAAiB,GAAGxC,2BAA2B,CAAC;AACpDb,QAAAA,WAAW,EAAEmE,WADuC;AAEpDrD,QAAAA;AAFoD,OAAD,CAArD;AAKA,YAAMuC,iBAAiB,CAAC;AACtBpC,QAAAA,MAAM,EAAG,sCADa;AAEtBD,QAAAA,OAAO,EAAG,sDAFY;AAGtBD,QAAAA,UAAU,EAAE;AACVa,UAAAA,QAAQ,EAAEuC,WAAW,CAACvC,QADZ;AAEViD,UAAAA,UAAU,EAAEV,WAAW,CAACrC;AAFd,SAHU;AAOtBZ,QAAAA,eAAe,EAAEiD,WAAW,CAACI;AAPP,OAAD,CAAvB;AAUAzD,MAAAA,QAAQ,CAACmC,IAAT,CACE,wCACG,4MAA2M6B,eAAMC,IAAN,CACzM,aADyM,CAE1M,IAAGZ,WAAW,CAACI,SAAU,MAAKO,eAAMC,IAAN,CAC7B,qBAD6B,CAE9B,IAAGxD,GAAI,MALX,CADF;AAUA;AACD;AACF;;AAED,QAAMyD,kBAAkB,GACtBV,wBAAwB,IAAIhG,OAAO,CAACC,GAAR,CAAY0G,uBAD1C;;AAGA,MAAID,kBAAJ,EAAwB;AACtBlE,IAAAA,QAAQ,CAACoC,IAAT,CAAe,8CAAf;AACA,sBAAKiB,WAAL;AACD;;AAED,QAAMe,wCAAwC,GAC5C,MAAM,qEAAwC;AAC5CC,IAAAA,QAAQ,EAAG,mBADiC;AAE5CC,IAAAA,SAAS,EAAG;AAFgC,GAAxC,CADR;AAMA,QAAMC,cAAc,GAAG,MAAM,+CAAqB;AAChDC,IAAAA,iBAAiB,EAAG,sBAD4B;AAEhDC,IAAAA,YAAY,EAAG,eAFiC;AAGhDrD,IAAAA,OAAO,EAAE;AACPC,MAAAA,eAAe,EAAEgC,WAAW,CAAC/B,KADtB;AAEPC,MAAAA,mBAAmB,EAAE8B,WAAW,CAAC7B;AAF1B,KAHuC;AAOhD4B,IAAAA,OAPgD;AAQhD1C,IAAAA,KAAK;AAAE;AAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,8BACc;AACA;AACAgE,IAAAA,IAAI,CAACC,GAAL,KAAa,OAAO,EAAP,GAAY,EAC1B;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgBP,wCAAwC,GAAI,aAAJ,GAAoB,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CoD,GAArB,CAA7B;;AA8CA,MAAI,EAACG,cAAD,aAACA,cAAD,eAACA,cAAc,CAAErC,MAAjB,CAAJ,EAA6B;AAC3B,QAAIgC,kBAAJ,EAAwB;AACtBlE,MAAAA,QAAQ,CAACoC,IAAT,CACG,kBAAiBiB,WAAlB,aAAkBA,WAAlB,uBAAkBA,WAAW,CAAEzE,EAAG,sCADpC;AAGD;;AACD;AACD;;AAED,MAAIsF,kBAAJ,EAAwB;AACtBlE,IAAAA,QAAQ,CAACoC,IAAT,CACG,kBAAiBiB,WAAlB,aAAkBA,WAAlB,uBAAkBA,WAAW,CAAEzE,EAAG,kCADpC;AAGA,sBAAK2F,cAAL;AACD;;AAED,QAAMK,KAAK,GAAG3G,eAAe,EAA7B;;AAEA,OAAK,MAAM;AAAEiB,IAAAA;AAAF,GAAX,IAA8BqF,cAA9B,EAA8C;AAC5CK,IAAAA,KAAK,CAACC,GAAN,CAAU,MACRjD,aAAa,CAAC;AACZ1C,MAAAA,WAAW,EAAE,EAAE,GAAGA,WAAL;AAAkBoC,QAAAA,KAAK,EAAE+B,WAAW,CAAC/B;AAArC,OADD;AAEZtB,MAAAA,QAFY;AAGZ6B,MAAAA;AAHY,KAAD,CADf;AAOD;;AAED,QAAMiD,OAAO,CAACC,GAAR,CAAY,CAACH,KAAK,CAACI,OAAN,EAAD,EAAkBJ,KAAK,CAACK,MAAN,EAAlB,CAAZ,CAAN,CApI6E,CAsI7E;;AACA,QAAM,uDAAyC;AAC7C9E,IAAAA,MAAM,EAAG,8BADoC;AAE7CD,IAAAA,OAAO,EAAG;AAFmC,GAAzC,CAAN;AAID,CA3IM","sourcesContent":["import { getPluginOptions } from \"./../../utils/get-gatsby-api\"\nimport { GatsbyHelpers } from \"~/utils/gatsby-types\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport chalk from \"chalk\"\nimport urlUtil from \"url\"\nimport PQueue from \"p-queue\"\nimport { dump } from \"dumper.js\"\nimport { actions as gatsbyActions } from \"gatsby/dist/redux/actions/public\"\n\nimport { remoteSchemaSupportsFieldNameOnTypeName } from \"~/steps/ingest-remote-schema/introspect-remote-schema\"\nimport { paginatedWpNodeFetch } from \"~/steps/source-nodes/fetch-nodes/fetch-nodes-paginated\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\n\nimport store from \"~/store\"\n\nimport { fetchAndCreateSingleNode } from \"~/steps/source-nodes/update-nodes/wp-actions/update\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { touchValidNodes } from \"../source-nodes/update-nodes/fetch-node-updates\"\n\nimport { Reporter } from \"gatsby/reporter\"\nimport { invokeAndCleanupLeftoverPreviewCallbacks } from \"./cleanup\"\n\nconst inDevelopPreview =\n  process.env.NODE_ENV === `development` &&\n  !!process.env.ENABLE_GATSBY_REFRESH_ENDPOINT\n\nconst inPreviewRunner =\n  process.env.RUNNER_TYPE === `PREVIEW` ||\n  process.env.RUNNER_TYPE === `INCREMENTAL_PREVIEWS` ||\n  !!process.env.IS_GATSBY_PREVIEW\n\n// this is a function simply because many places in the code expect it to be.\n// it used to call store.getState() and check for some state to determine preview mode\nexport const inPreviewMode = (): boolean => inDevelopPreview || inPreviewRunner\n\nexport type PreviewStatusUnion =\n  | `PREVIEW_SUCCESS`\n  | `NO_PAGE_CREATED_FOR_PREVIEWED_NODE`\n  | `GATSBY_PREVIEW_PROCESS_ERROR`\n  | `RECEIVED_PREVIEW_DATA_FROM_WRONG_URL`\n\nexport interface IPreviewData {\n  previewDatabaseId: number\n  userDatabaseId: number\n  token: string\n  remoteUrl: string\n  modified: string\n  parentDatabaseId: number\n  id: string\n  isDraft: boolean\n  singleName: string\n  since?: number\n  refreshing?: boolean\n  preview?: boolean\n  manifestIds?: Array<string>\n}\n\ninterface IPageNode {\n  path: string\n}\n\nlet previewQueue: PQueue\n\nconst getPreviewQueue = (): PQueue => {\n  if (!previewQueue) {\n    const { previewRequestConcurrency } =\n      store.getState().gatsbyApi.pluginOptions.schema\n\n    previewQueue = new PQueue({\n      concurrency: previewRequestConcurrency,\n      carryoverConcurrencyCount: true,\n    })\n  }\n\n  return previewQueue\n}\n\n// This checks wether or not we're already currently processing a preview\n// for the passed preview id.\nconst previewForIdIsAlreadyBeingProcessed = (id: string): boolean => {\n  if (!id) {\n    return false\n  }\n\n  const existingCallbacks =\n    store.getState().previewStore.nodePageCreatedCallbacks\n\n  const alreadyProcessingThisPreview = !!existingCallbacks?.[id]\n\n  return alreadyProcessingThisPreview\n}\n\n/**\n * For previews of draft posts, gatsby develop will throw a bunch of 404 errors\n * while WPGatsby is trying to read page-data.json\n * So we can write a dummy page-data.json if one doesn't exist.\n * that way there will be no 404's and Gatsby will overwrite our dummy file when it\n * needs to.\n */\nconst writeDummyPageDataJsonIfNeeded = async ({\n  previewData,\n  pageNode,\n}: {\n  previewData: IPreviewData\n  pageNode: IPageNode\n}): Promise<void> => {\n  if (!previewData.isDraft) {\n    return\n  }\n\n  const pageDataDirectory = path.join(\n    process.cwd(),\n    `public/page-data`,\n    pageNode.path\n  )\n\n  await fs.ensureDir(pageDataDirectory)\n\n  const pageDataPath = path.join(pageDataDirectory, `page-data.json`)\n\n  const pageDataExists = await fs.pathExists(pageDataPath)\n\n  if (!pageDataExists) {\n    await fs.writeJSON(pageDataPath, {\n      isDraft: previewData.isDraft,\n    })\n  }\n}\n\ninterface IOnPreviewStatusInput {\n  status: PreviewStatusUnion\n  context?: string\n  nodeId?: string\n  passedNode?: {\n    modified?: string\n    databaseId: number\n  }\n  pageNode?: IPageNode\n  graphqlEndpoint?: string\n  error?: Error\n}\n\nconst createPreviewStatusCallback =\n  ({\n    previewData,\n    reporter,\n  }: {\n    previewData: IPreviewData\n    reporter: Reporter\n  }) =>\n  async ({\n    passedNode,\n    pageNode,\n    context,\n    status,\n    graphqlEndpoint,\n    error,\n  }: IOnPreviewStatusInput): Promise<void> => {\n    if (status === `PREVIEW_SUCCESS`) {\n      // we might need to write a dummy page-data.json so that\n      // Gatsby doesn't throw 404 errors when WPGatsby tries to read this file\n      // that maybe doesn't exist yet\n      await writeDummyPageDataJsonIfNeeded({ previewData, pageNode })\n    }\n\n    const statusContext = error?.message\n      ? `${context}\\n\\n${error.message}`\n      : context\n\n    const { data } = await fetchGraphql({\n      url: graphqlEndpoint,\n      query: /* GraphQL */ `\n        mutation MUTATE_PREVIEW_NODE(\n          $input: WpGatsbyRemotePreviewStatusInput!\n        ) {\n          wpGatsbyRemotePreviewStatus(input: $input) {\n            success\n          }\n        }\n      `,\n      variables: {\n        input: {\n          clientMutationId: `sendPreviewStatus`,\n          modified: passedNode?.modified,\n          pagePath: pageNode?.path,\n          parentDatabaseId:\n            previewData.parentDatabaseId || previewData.previewDatabaseId, // if the parentDatabaseId is 0 we want to use the previewDatabaseId\n          status,\n          statusContext,\n        },\n      },\n      errorContext: `Error occurred while mutating WordPress Preview node meta.`,\n      forceReportCriticalErrors: true,\n      headers: {\n        WPGatsbyPreview: previewData.token,\n        WPGatsbyPreviewUser: previewData.userDatabaseId,\n      },\n    })\n\n    if (data?.wpGatsbyRemotePreviewStatus?.success) {\n      reporter.log(\n        formatLogMessage(\n          `Successfully sent Preview status back to WordPress post ${previewData.id} during ${context}`\n        )\n      )\n    } else {\n      reporter.log(\n        formatLogMessage(\n          `failed to mutate WordPress post ${previewData.id} during Preview ${context}.\\nCheck your WP server logs for more information.`\n        )\n      )\n    }\n  }\n\n/**\n * This is called and passed the result from the ActionMonitor.previewData object along with a JWT token\n * It sources a single preview and creates the callback that's invoked to send preview status back to WPGatsby.\n * When the preview status is sent back to Gatsby, the preview action that this\n * logic is processing is deleted in the WP instance. That's why we call\n * previewForIdIsAlreadyBeingProcessed to see if another preview webhook\n * already started processing for this action\n */\nexport const sourcePreview = async ({\n  previewData,\n  reporter,\n  actions,\n}: {\n  previewData: IPreviewData\n  reporter: Reporter\n  actions: typeof gatsbyActions\n}): Promise<void> => {\n  if (previewForIdIsAlreadyBeingProcessed(previewData?.id)) {\n    return\n  }\n\n  const requiredProperties = [\n    `previewDatabaseId`,\n    `id`,\n    `token`,\n    `remoteUrl`,\n    `parentDatabaseId`,\n    `modified`,\n    `userDatabaseId`,\n  ]\n\n  const missingProperties = requiredProperties.filter(\n    property => !(property in previewData)\n  )\n\n  if (!previewData || missingProperties.length) {\n    reporter.warn(\n      formatLogMessage(\n        `sourcePreview was called but the required previewData properties weren't provided.`\n      )\n    )\n    reporter.info(\n      formatLogMessage(\n        `Missing properties: \\n${JSON.stringify(missingProperties, null, 2)}`\n      )\n    )\n    reporter.log(\n      formatLogMessage(`previewData: \\n${JSON.stringify(previewData, null, 2)}`)\n    )\n    return\n  }\n\n  await touchValidNodes()\n\n  const sendPreviewStatus = createPreviewStatusCallback({\n    previewData,\n    reporter,\n  })\n\n  // this callback will be invoked when the page is created/updated for this node\n  // then it'll send a mutation to WPGraphQL so that WP knows the preview is ready\n  store.dispatch.previewStore.subscribeToPagesCreatedFromNodeById({\n    nodeId: previewData.id,\n    modified: previewData.modified,\n    sendPreviewStatus,\n  })\n\n  const { node } = await fetchAndCreateSingleNode({\n    actionType: `PREVIEW`,\n    ...previewData,\n    previewParentId: previewData.parentDatabaseId,\n    isPreview: true,\n  })\n\n  if (\n    previewData?.manifestIds?.length &&\n    `unstable_createNodeManifest` in actions &&\n    node\n  ) {\n    previewData.manifestIds.forEach(manifestId => {\n      actions.unstable_createNodeManifest({\n        manifestId,\n        node,\n      })\n    })\n  }\n}\n\n/**\n * This is called when the /__refresh endpoint is posted to from WP previews.\n * It should only ever run in Preview mode, which is process.env.ENABLE_GATSBY_REFRESH_ENDPOINT = true\n * It first sources all pending preview actions, then calls sourcePreview() for each of them.\n */\nexport const sourcePreviews = async (helpers: GatsbyHelpers): Promise<void> => {\n  const { webhookBody, reporter, actions } = helpers\n  const {\n    debug: { preview: inPreviewDebugModeOption },\n    url,\n  } = getPluginOptions()\n\n  // some versions of WPGatsby don't send a remoteUrl on every webhook.\n  // if we check this for every webhookBody errors will occur!\n  if (webhookBody.remoteUrl) {\n    // check if we're receiving preview data fromt the right WP backend\n    const { hostname: settingsHostname } = urlUtil.parse(url)\n    const { hostname: remoteHostname } = urlUtil.parse(webhookBody.remoteUrl)\n\n    if (settingsHostname !== remoteHostname) {\n      const sendPreviewStatus = createPreviewStatusCallback({\n        previewData: webhookBody,\n        reporter,\n      })\n\n      await sendPreviewStatus({\n        status: `RECEIVED_PREVIEW_DATA_FROM_WRONG_URL`,\n        context: `check that the preview data came from the right URL.`,\n        passedNode: {\n          modified: webhookBody.modified,\n          databaseId: webhookBody.parentDatabaseId,\n        },\n        graphqlEndpoint: webhookBody.remoteUrl,\n      })\n\n      reporter.warn(\n        formatLogMessage(\n          `Received preview data from a different remote URL than the one specified in plugin options. Preview will not work. Please send preview requests from the WP instance configured in gatsby-config.js.\\n\\n ${chalk.bold(\n            `Remote URL:`\n          )} ${webhookBody.remoteUrl}\\n ${chalk.bold(\n            `Plugin options URL:`\n          )} ${url}\\n\\n`\n        )\n      )\n\n      return\n    }\n  }\n\n  const inPreviewDebugMode =\n    inPreviewDebugModeOption || process.env.WP_GATSBY_PREVIEW_DEBUG\n\n  if (inPreviewDebugMode) {\n    reporter.info(`Sourcing previews for the following webhook:`)\n    dump(webhookBody)\n  }\n\n  const wpGatsbyPreviewNodeManifestsAreSupported =\n    await remoteSchemaSupportsFieldNameOnTypeName({\n      typeName: `GatsbyPreviewData`,\n      fieldName: `manifestIds`,\n    })\n\n  const previewActions = await paginatedWpNodeFetch({\n    contentTypePlural: `actionMonitorActions`,\n    nodeTypeName: `ActionMonitor`,\n    headers: {\n      WPGatsbyPreview: webhookBody.token,\n      WPGatsbyPreviewUser: webhookBody.userDatabaseId,\n    },\n    helpers,\n    query: /* GraphQL */ `\n      query PREVIEW_ACTIONS($after: String) {\n        actionMonitorActions(\n          where: {\n            previewStream: true\n            status: PRIVATE\n            orderby: { field: MODIFIED, order: DESC }\n            sinceTimestamp: ${\n              // only source previews made in the last 60 minutes\n              // We delete every preview action we process so this accounts for very long cold builds between previews.\n              Date.now() - 1000 * 60 * 60\n            }\n          }\n          first: 100\n          after: $after\n        ) {\n          nodes {\n            previewData {\n              id\n              isDraft\n              modified\n              parentDatabaseId\n              previewDatabaseId\n              remoteUrl\n              singleName\n              userDatabaseId\n              ${wpGatsbyPreviewNodeManifestsAreSupported ? `manifestIds` : ``}\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    `,\n  })\n\n  if (!previewActions?.length) {\n    if (inPreviewDebugMode) {\n      reporter.info(\n        `Preview for id ${webhookBody?.id} returned no action monitor actions.`\n      )\n    }\n    return\n  }\n\n  if (inPreviewDebugMode) {\n    reporter.info(\n      `Preview for id ${webhookBody?.id} returned the following actions:`\n    )\n    dump(previewActions)\n  }\n\n  const queue = getPreviewQueue()\n\n  for (const { previewData } of previewActions) {\n    queue.add(() =>\n      sourcePreview({\n        previewData: { ...previewData, token: webhookBody.token },\n        reporter,\n        actions,\n      })\n    )\n  }\n\n  await Promise.all([queue.onEmpty(), queue.onIdle()])\n\n  // clean up leftover callbacks at the end to clean up anything we didn't catch elsewhere\n  await invokeAndCleanupLeftoverPreviewCallbacks({\n    status: `GATSBY_PREVIEW_PROCESS_ERROR`,\n    context: `Starting sourcePreviews`,\n  })\n}\n"],"file":"index.js"}