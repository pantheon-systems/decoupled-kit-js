{"version":3,"sources":["../../src/hooks/node-filters.ts"],"names":["applyNodeFilter","name","context","data","nodeFilters","store","getState","wpHooks","length","sortedNodeFilters","sort","a","b","priority","filter","addNodeFilter","dispatch"],"mappings":";;;;;;;AACA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,eAAe,GAAG,OAAO;AACpCC,EAAAA,IADoC;AAEpCC,EAAAA,OAFoC;AAGpCC,EAAAA;AAHoC,CAAP,KAIS;AAAA;;AACtC,MAAI,CAACF,IAAL,EAAW;AACT,WAAOE,IAAP;AACD;;AAED,QAAMC,WAA+B,4BACnCC,eAAMC,QAAN,GAAiBC,OAAjB,CAAyBH,WADU,0DACnC,sBAAuCH,IAAvC,CADF;;AAGA,MAAI,CAACG,WAAD,IAAgB,CAACA,WAAW,CAACI,MAAjC,EAAyC;AACvC,WAAOL,IAAP;AACD;;AAED,QAAMM,iBAAiB,GAAGL,WAAW,CAACM,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAA1C,CAA1B;;AAEA,OAAK,MAAM;AAAEC,IAAAA;AAAF,GAAX,IAAyBL,iBAAzB,EAA4C;AAC1CN,IAAAA,IAAI,GAAGW,MAAM,CAAC;AAAEX,MAAAA,IAAF;AAAQD,MAAAA,OAAR;AAAiBD,MAAAA;AAAjB,KAAD,CAAb;AACD;;AAED,SAAOE,IAAP;AACD,CAvBM;AAyBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMY,aAAa,GAAG,CAAC;AAAEd,EAAAA,IAAF;AAAQa,EAAAA,MAAR;AAAgBD,EAAAA;AAAhB,CAAD,KAC3BR,eAAMW,QAAN,CAAeT,OAAf,CAAuBQ,aAAvB,CAAqC;AAAEd,EAAAA,IAAF;AAAQa,EAAAA,MAAR;AAAgBD,EAAAA;AAAhB,CAArC,CADK","sourcesContent":["import { IJSON } from \"../utils/fetch-graphql\"\nimport store from \"~/store\"\n\ninterface INodeFilterInput {\n  name: string\n  context: IJSON\n  data: IJSON\n}\n\ntype NodeFilterFn = (INodeFilterInput) => IJSON\n\ninterface INodeFilter {\n  name: string\n  filter: NodeFilterFn\n  priority: number\n}\n\n/**\n * Grabs an array of filter functions from the redux store,\n * orders them by priority, and then runs each in order over the\n * passed in data. The modified data is then returned\n *\n * @param {string} name The name of the filter to apply\n * @param {object} context Any additional data to pass to the filter functions that are applied\n * @param {object} data The initial data to be filtered\n */\nexport const applyNodeFilter = async ({\n  name,\n  context,\n  data,\n}: INodeFilterInput): Promise<IJSON> => {\n  if (!name) {\n    return data\n  }\n\n  const nodeFilters: Array<INodeFilter> =\n    store.getState().wpHooks.nodeFilters?.[name]\n\n  if (!nodeFilters || !nodeFilters.length) {\n    return data\n  }\n\n  const sortedNodeFilters = nodeFilters.sort((a, b) => a.priority - b.priority)\n\n  for (const { filter } of sortedNodeFilters) {\n    data = filter({ data, context, name })\n  }\n\n  return data\n}\n\n/**\n * This function adds a filter to the internal redux store of filters\n * To be applied via applyNodeFilter above\n *\n * @param {string} name The name of the filter\n * @param {function} filter The function to run when applying this filter\n * @param {integer} priority The priority for this filter to run in. lower means earlier execution\n */\nexport const addNodeFilter = ({ name, filter, priority }: INodeFilter): void =>\n  store.dispatch.wpHooks.addNodeFilter({ name, filter, priority })\n"],"file":"node-filters.js"}