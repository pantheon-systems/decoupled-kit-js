{"version":3,"sources":["../../../src/bootstrap/load-config/index.ts"],"names":["loadConfig","siteDirectory","processFlags","configModule","configFilePath","config","reporter","panic","id","context","configName","enabledConfigFlags","unknownFlagMessage","unfitFlagMessage","message","availableFlags","flags","warn","forEach","flag","process","env","info","telemetryId","telemetry","trackFeatureIsUsed","plugins","rootDir","store","dispatch","internalActions","setSiteConfig"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIO,eAAeA,UAAf,CAA0B;AAC/BC,EAAAA,aAD+B;AAE/BC,EAAAA,YAAY,GAAG;AAFgB,CAA1B,EAOoB;AACzB;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAmC,MAAM,kCAC7CH,aAD6C,EAE5C,eAF4C,CAA/C;AAIA,MAAII,MAAM,GAAG,kCAAcF,YAAd,CAAb,CANyB,CAQzB;;AACA,MAAI,OAAOE,MAAP,KAAmB,UAAvB,EAAkC;AAChCC,sBAASC,KAAT,CAAe;AACbC,MAAAA,EAAE,EAAG,OADQ;AAEbC,MAAAA,OAAO,EAAE;AACPC,QAAAA,UAAU,EAAG,eADN;AAEPT,QAAAA;AAFO;AAFI,KAAf;AAOD;;AAED,MAAII,MAAM,IAAIH,YAAd,EAA4B;AAC1B;AACA,QAAIG,MAAJ,EAAY;AACV;AACA,YAAM;AACJM,QAAAA,kBADI;AAEJC,QAAAA,kBAFI;AAGJC,QAAAA,gBAHI;AAIJC,QAAAA;AAJI,UAKF,0BAAYC,cAAZ,EAA4BV,MAAM,CAACW,KAAnC,CALJ;;AAOA,UAAIJ,kBAAkB,KAAM,EAA5B,EAA+B;AAC7BN,0BAASW,IAAT,CAAcL,kBAAd;AACD;;AACD,UAAIC,gBAAgB,KAAM,EAA1B,EAA6B;AAC3BP,0BAASW,IAAT,CAAcJ,gBAAd;AACD,OAdS,CAeV;;;AACAF,MAAAA,kBAAkB,CAACO,OAAnB,CAA2BC,IAAI,IAAI;AACjCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACE,GAAjB,IAAyB,MAAzB;AACD,OAFD,EAhBU,CAoBV;;AACA,UAAIP,OAAO,KAAM,EAAjB,EAAoB;AAClBR,0BAASgB,IAAT,CAAcR,OAAd;AACD,OAvBS,CAyBV;;;AACAH,MAAAA,kBAAkB,CAACO,OAAnB,CAA2BC,IAAI,IAAI;AACjC,YAAIA,IAAI,CAACI,WAAT,EAAsB;AACpBC,mCAAUC,kBAAV,CAA6BN,IAAI,CAACI,WAAlC;AACD;AACF,OAJD,EA1BU,CAgCV;;AACA,UAAIlB,MAAM,CAACW,KAAX,EAAkB;AAChBQ,iCAAUC,kBAAV,CAA8B,aAA9B;AACD;AACF;AACF,GA1DwB,CA4DzB;;;AACA,MAAIpB,MAAJ,EAAY;AACV,UAAMqB,OAAO,GAAG,MAAM,yBAAWrB,MAAX,EAAmB;AACvCD,MAAAA,cADuC;AAEvCuB,MAAAA,OAAO,EAAE1B;AAF8B,KAAnB,CAAtB;AAIAI,IAAAA,MAAM,GAAGqB,OAAO,CAACrB,MAAjB;AACD;;AAEDuB,eAAMC,QAAN,CAAeC,yBAAgBC,aAAhB,CAA8B1B,MAA9B,CAAf;;AAEA,SAAOA,MAAP;AACD","sourcesContent":["import reporter from \"gatsby-cli/lib/reporter\"\nimport telemetry from \"gatsby-telemetry\"\nimport { preferDefault } from \"../prefer-default\"\nimport { getConfigFile } from \"../get-config-file\"\nimport { internalActions } from \"../../redux/actions\"\nimport loadThemes from \"../load-themes\"\nimport { store } from \"../../redux\"\nimport handleFlags from \"../../utils/handle-flags\"\nimport availableFlags from \"../../utils/flags\"\nimport { IProgram } from \"../../commands/types\"\nimport { IGatsbyConfig } from \"../../internal\"\n\nexport async function loadConfig({\n  siteDirectory,\n  processFlags = false,\n}: {\n  siteDirectory: string\n  processFlags?: boolean\n  program?: IProgram\n}): Promise<IGatsbyConfig> {\n  // Try opening the site's gatsby-config.js file.\n  const { configModule, configFilePath } = await getConfigFile(\n    siteDirectory,\n    `gatsby-config`\n  )\n  let config = preferDefault(configModule)\n\n  // The root config cannot be exported as a function, only theme configs\n  if (typeof config === `function`) {\n    reporter.panic({\n      id: `10126`,\n      context: {\n        configName: `gatsby-config`,\n        siteDirectory,\n      },\n    })\n  }\n\n  if (config && processFlags) {\n    // Setup flags\n    if (config) {\n      // Get flags\n      const {\n        enabledConfigFlags,\n        unknownFlagMessage,\n        unfitFlagMessage,\n        message,\n      } = handleFlags(availableFlags, config.flags)\n\n      if (unknownFlagMessage !== ``) {\n        reporter.warn(unknownFlagMessage)\n      }\n      if (unfitFlagMessage !== ``) {\n        reporter.warn(unfitFlagMessage)\n      }\n      //  set process.env for each flag\n      enabledConfigFlags.forEach(flag => {\n        process.env[flag.env] = `true`\n      })\n\n      // Print out message.\n      if (message !== ``) {\n        reporter.info(message)\n      }\n\n      //  track usage of feature\n      enabledConfigFlags.forEach(flag => {\n        if (flag.telemetryId) {\n          telemetry.trackFeatureIsUsed(flag.telemetryId)\n        }\n      })\n\n      // Track the usage of config.flags\n      if (config.flags) {\n        telemetry.trackFeatureIsUsed(`ConfigFlags`)\n      }\n    }\n  }\n\n  // theme gatsby configs can be functions or objects\n  if (config) {\n    const plugins = await loadThemes(config, {\n      configFilePath,\n      rootDir: siteDirectory,\n    })\n    config = plugins.config\n  }\n\n  store.dispatch(internalActions.setSiteConfig(config))\n\n  return config\n}\n"],"file":"index.js"}