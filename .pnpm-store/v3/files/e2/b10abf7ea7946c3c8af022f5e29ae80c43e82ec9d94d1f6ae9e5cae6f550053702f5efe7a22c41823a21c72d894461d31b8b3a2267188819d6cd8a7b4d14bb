{"version":3,"sources":["../../src/redux/index.ts"],"names":["emitter","readState","state","nodes","nodesByType","Map","forEach","node","type","internal","has","set","get","id","telemetry","trackCli","cacheStatus","e","multi","dispatch","next","action","Array","isArray","filter","Boolean","map","configureStore","initialState","reducers","thunk","store","process","env","GATSBY_WORKER_POOL_WORKER","replaceReducer","customReducers","saveState","GATSBY_DISABLE_CACHE_PERSISTENCE","undefined","getState","status","components","jobsV2","staticQueryComponents","webpackCompilationHash","pageDataStats","pages","pendingPageDataWrites","staticQueriesByTemplate","queries","html","savePartialStateToDisk","slices","optionalPrefix","transformState","contents","_","pick","savedContents","loadPartialStateFromDisk","subscribe","lastAction","emit"],"mappings":"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","sourcesContent":["import {\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  DeepPartial,\n  Middleware,\n  ReducersMapObject,\n  Store,\n} from \"redux\"\nimport _ from \"lodash\"\nimport telemetry from \"gatsby-telemetry\"\n\nimport { mett } from \"../utils/mett\"\nimport thunk, { ThunkMiddleware, ThunkAction, ThunkDispatch } from \"redux-thunk\"\nimport * as reducers from \"./reducers\"\nimport { writeToCache, readFromCache } from \"./persist\"\nimport { IGatsbyState, ActionsUnion, GatsbyStateKeys } from \"./types\"\n\n// Create event emitter for actions\nexport const emitter = mett()\n\n// Read old node data from cache.\nexport const readState = (): IGatsbyState => {\n  try {\n    const state = readFromCache() as IGatsbyState\n    if (state.nodes) {\n      // re-create nodesByType\n      state.nodesByType = new Map()\n      state.nodes.forEach(node => {\n        const { type } = node.internal\n        if (!state.nodesByType.has(type)) {\n          state.nodesByType.set(type, new Map())\n        }\n        // The `.has` and `.set` calls above make this safe\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        state.nodesByType.get(type)!.set(node.id, node)\n      })\n    }\n\n    // jsonDataPaths was removed in the per-page-manifest\n    // changes. Explicitly delete it here to cover case where user\n    // runs gatsby the first time after upgrading.\n    delete state[`jsonDataPaths`]\n\n    telemetry.trackCli(`CACHE_STATUS`, {\n      cacheStatus: `WARM`,\n    })\n\n    return state\n  } catch (e) {\n    telemetry.trackCli(`CACHE_STATUS`, {\n      cacheStatus: `COLD`,\n    })\n\n    return {} as IGatsbyState\n  }\n}\n\nexport interface IMultiDispatch {\n  <T extends ActionsUnion | ThunkAction<any, IGatsbyState, any, ActionsUnion>>(\n    action: Array<T>\n  ): Array<T>\n}\n\n/**\n * Redux middleware handling array of actions\n */\nconst multi: Middleware<IMultiDispatch> =\n  ({ dispatch }) =>\n  next =>\n  (action: ActionsUnion): ActionsUnion | Array<ActionsUnion> =>\n    Array.isArray(action) ? action.filter(Boolean).map(dispatch) : next(action)\n\nexport type GatsbyReduxStore = Store<IGatsbyState> & {\n  dispatch: ThunkDispatch<IGatsbyState, any, ActionsUnion> & IMultiDispatch\n}\n\nexport const configureStore = (initialState: IGatsbyState): GatsbyReduxStore =>\n  createStore(\n    combineReducers<IGatsbyState>({ ...reducers }),\n    initialState,\n    applyMiddleware(thunk as ThunkMiddleware<IGatsbyState, ActionsUnion>, multi)\n  )\n\nexport const store: GatsbyReduxStore = configureStore(\n  process.env.GATSBY_WORKER_POOL_WORKER ? ({} as IGatsbyState) : readState()\n)\n\n/**\n * Allows overloading some reducers (e.g. when setting a custom datastore)\n */\nexport function replaceReducer(\n  customReducers: Partial<ReducersMapObject<IGatsbyState>>\n): void {\n  store.replaceReducer(\n    combineReducers<IGatsbyState>({ ...reducers, ...customReducers })\n  )\n}\n\n// Persist state.\nexport const saveState = (): void => {\n  if (process.env.GATSBY_DISABLE_CACHE_PERSISTENCE) {\n    // do not persist cache if above env var is set.\n    // this is to temporarily unblock builds that hit the v8.serialize related\n    // Node.js buffer size exceeding kMaxLength fatal crashes\n    return undefined\n  }\n\n  const state = store.getState()\n\n  return writeToCache({\n    nodes: state.nodes,\n    status: state.status,\n    components: state.components,\n    jobsV2: state.jobsV2,\n    staticQueryComponents: state.staticQueryComponents,\n    webpackCompilationHash: state.webpackCompilationHash,\n    pageDataStats: state.pageDataStats,\n    pages: state.pages,\n    pendingPageDataWrites: state.pendingPageDataWrites,\n    staticQueriesByTemplate: state.staticQueriesByTemplate,\n    queries: state.queries,\n    html: state.html,\n  })\n}\n\nexport const savePartialStateToDisk = (\n  slices: Array<GatsbyStateKeys>,\n  optionalPrefix?: string,\n  transformState?: <T extends DeepPartial<IGatsbyState>>(state: T) => T\n): void => {\n  const state = store.getState()\n  const contents = _.pick(state, slices)\n  const savedContents = transformState ? transformState(contents) : contents\n\n  return writeToCache(savedContents, slices, optionalPrefix)\n}\n\nexport const loadPartialStateFromDisk = (\n  slices: Array<GatsbyStateKeys>,\n  optionalPrefix?: string\n): DeepPartial<IGatsbyState> => {\n  try {\n    return readFromCache(slices, optionalPrefix) as DeepPartial<IGatsbyState>\n  } catch (e) {\n    // ignore errors.\n  }\n  return {} as IGatsbyState\n}\n\nstore.subscribe(() => {\n  const lastAction = store.getState().lastAction\n  emitter.emit(lastAction.type, lastAction)\n})\n"],"file":"index.js"}