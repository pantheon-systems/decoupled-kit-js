// src/presets/Sandpack.tsx
import { ClasserProvider } from "@code-hike/classer";
import {
  createElement as createElement17
} from "react";

// src/common/Layout.tsx
import { useClasser as useClasser2 } from "@code-hike/classer";
import {
  createElement as createElement3
} from "react";

// src/contexts/themeContext.tsx
import { useClasser } from "@code-hike/classer";
import {
  createContext,
  createElement
} from "react";

// src/utils/domUtils.ts
var injectThemeStyleSheet = (theme, themeId) => {
  if (typeof document !== "undefined") {
    const existingStyleTagForTheme = document.head.querySelector(`style[data-sandpack-theme-id=${themeId}]`);
    if (!existingStyleTagForTheme) {
      const styleTag = document.createElement("style");
      styleTag.setAttribute("data-sandpack-theme-id", themeId);
      styleTag.textContent = getThemeStyleSheet(theme, themeId);
      document.head.appendChild(styleTag);
    }
  }
};
var QUERY = "(prefers-color-scheme: dark)";
var isRenderingOnServer = typeof window === "undefined";
var getDarkModePreference = () => {
  return isRenderingOnServer ? false : window.matchMedia(QUERY).matches;
};

// src/utils/stringUtils.ts
var getFileName = (filePath) => {
  const lastIndexOfSlash = filePath.lastIndexOf("/");
  return filePath.slice(lastIndexOfSlash + 1);
};
var calculateNearestUniquePath = (currentPath, otherPaths) => {
  const currentPathParts = (currentPath[0] === "/" ? currentPath.slice(1) : currentPath).split("/");
  const resultPathParts = [];
  if (currentPathParts.length === 1) {
    resultPathParts.unshift(currentPathParts[0]);
  } else {
    for (let fileIndex = 0; fileIndex < otherPaths.length; fileIndex++) {
      const otherPathParts = otherPaths[fileIndex].split("/");
      for (let partsFromEnd = 1; partsFromEnd <= currentPathParts.length; partsFromEnd++) {
        const currentPathPart = currentPathParts[currentPathParts.length - partsFromEnd];
        const otherPathPart = otherPathParts[otherPathParts.length - partsFromEnd];
        if (resultPathParts.length < partsFromEnd) {
          resultPathParts.unshift(currentPathPart);
        }
        if (currentPathPart !== otherPathPart) {
          break;
        }
      }
    }
  }
  if (resultPathParts.length < currentPathParts.length) {
    resultPathParts.unshift("..");
  }
  return resultPathParts.join("/");
};
var hexToRGB = (hex) => {
  let r = "0";
  let g = "0";
  let b = "0";
  if (hex.length === 4) {
    r = "0x" + hex[1] + hex[1];
    g = "0x" + hex[2] + hex[2];
    b = "0x" + hex[3] + hex[3];
  } else if (hex.length === 7) {
    r = "0x" + hex[1] + hex[2];
    g = "0x" + hex[3] + hex[4];
    b = "0x" + hex[5] + hex[6];
  }
  return {
    red: +r,
    green: +g,
    blue: +b
  };
};
var hexToCSSRGBa = (hex, alpha) => {
  if (hex.startsWith("#") && (hex.length === 4 || hex.length === 7)) {
    const { red, green, blue } = hexToRGB(hex);
    return `rgba(${red}, ${green}, ${blue}, ${alpha})`;
  }
  return hex;
};
var isDarkColor = (color) => {
  let r = 0;
  let g = 0;
  let b = 0;
  if (color.startsWith("#")) {
    if (color.length < 7) {
      return true;
    }
    r = parseInt(color.substr(1, 2), 16);
    g = parseInt(color.substr(3, 2), 16);
    b = parseInt(color.substr(5, 2), 16);
  } else {
    const rgbValues = color.replace("rgb(", "").replace("rgba(", "").replace(")", "").split(",");
    if (rgbValues.length < 3) {
      return true;
    }
    r = parseInt(rgbValues[0], 10);
    g = parseInt(rgbValues[1], 10);
    b = parseInt(rgbValues[2], 10);
  }
  const yiq = (r * 299 + g * 587 + b * 114) / 1e3;
  return yiq < 128;
};
var generateRandomId = () => Math.floor(Math.random() * 1e4).toString();

// src/themes/index.ts
var defaultLight = {
  palette: {
    activeText: "#1f2933",
    defaultText: "#757678",
    inactiveText: "#e4e7eb",
    activeBackground: "#e4e7eb",
    defaultBackground: "#f8f9fb",
    inputBackground: "#ffffff",
    accent: "#64D2FF",
    errorBackground: "#ffcdca",
    errorForeground: "#811e18"
  },
  syntax: {
    plain: "#151515",
    comment: { color: "#999", fontStyle: "italic" },
    keyword: "#0971F1",
    tag: "#0971F1",
    punctuation: "#151515",
    definition: "#151515",
    property: "#151515",
    static: "#FF453A",
    string: "#BF5AF2"
  },
  typography: {
    bodyFont: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    monoFont: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    fontSize: "14px",
    lineHeight: "1.4"
  }
};
var defaultDark = {
  palette: {
    activeText: "#FFFFFF",
    defaultText: "#999999",
    inactiveText: "#343434",
    activeBackground: "#343434",
    defaultBackground: "#040404",
    inputBackground: "#242424",
    accent: "#6caedd",
    errorBackground: "#ffcdca",
    errorForeground: "#811e18"
  },
  syntax: {
    plain: "#FFFFFF",
    comment: { color: "#757575", fontStyle: "italic" },
    keyword: "#77B7D7",
    tag: "#DFAB5C",
    punctuation: "#ffffff",
    definition: "#86D9CA",
    property: "#77B7D7",
    static: "#C64640",
    string: "#977CDC"
  },
  typography: {
    bodyFont: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    monoFont: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    fontSize: "14px",
    lineHeight: "1.4"
  }
};
var sandpackDark = {
  palette: {
    activeText: "#90e86f",
    defaultText: "#5a5a5a",
    inactiveText: "#1a1a1a",
    activeBackground: "#272727",
    defaultBackground: "#151515",
    inputBackground: "#2e2e2e",
    accent: "#90e86f",
    errorBackground: "#dac1fb",
    errorForeground: "#b08df8"
  },
  syntax: {
    plain: "#f0fdaf",
    comment: { color: "#757575", fontStyle: "italic" },
    keyword: "#e5fd78",
    tag: "#f0fdaf",
    punctuation: "#ffffff",
    definition: "#eeeeee",
    property: "#90e86f",
    static: "#ffffff",
    string: "#dafecf"
  },
  typography: {
    bodyFont: 'Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    monoFont: '"Fira Code", "Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    fontSize: "14px",
    lineHeight: "1.6"
  }
};
var aquaBlueTheme = {
  palette: {
    activeText: "#1f2933",
    defaultText: "#737373",
    inactiveText: "#e4e7eb",
    activeBackground: "#e4e7eb",
    defaultBackground: "#f8f9fb",
    inputBackground: "#ffffff",
    accent: "#6caedd",
    errorBackground: "#ffcdca",
    errorForeground: "#811e18"
  },
  syntax: {
    plain: "#1F2933",
    comment: { color: "#A7B6C2", fontStyle: "italic" },
    keyword: "#1A56DB",
    tag: "#1A56DB",
    punctuation: "#394b59",
    definition: "#A23DAD",
    property: "#14919B",
    static: "#1A56DB",
    string: "#1992D4"
  },
  typography: {
    bodyFont: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    monoFont: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    fontSize: "14px",
    lineHeight: "1.4"
  }
};
var githubLightTheme = {
  palette: {
    activeText: "#24292e",
    defaultText: "#959da5",
    inactiveText: "#e4e7eb",
    activeBackground: "#e4e7eb",
    defaultBackground: "#ffffff",
    inputBackground: "#ffffff",
    accent: "#c8c8fa",
    errorBackground: "#ffcdca",
    errorForeground: "#811e18"
  },
  syntax: {
    keyword: "#d73a49",
    property: "#005cc5",
    plain: "#24292e",
    static: "#032f62",
    string: "#032f62",
    definition: "#6f42c1",
    punctuation: "#24292e",
    tag: "#22863a",
    comment: {
      color: "#6a737d",
      fontStyle: "normal"
    }
  },
  typography: {
    bodyFont: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    monoFont: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    fontSize: "14px",
    lineHeight: "1.4"
  }
};
var nightOwlTheme = {
  palette: {
    activeText: "rgb(197, 228, 253)",
    defaultText: "rgb(105, 136, 161)",
    inactiveText: "rgb(78, 82, 97)",
    activeBackground: "rgb(58, 62, 77)",
    defaultBackground: "rgb(1, 22, 39)",
    inputBackground: "rgb(11, 41, 66)",
    accent: "#7fdbca",
    errorBackground: "#ffcdca",
    errorForeground: "#811e18"
  },
  syntax: {
    plain: "#d6deeb",
    comment: { color: "#999999", fontStyle: "italic" },
    keyword: { color: "#c792ea", fontStyle: "italic" },
    tag: "#7fdbca",
    punctuation: "#7fdbca",
    definition: "#82aaff",
    property: { color: "#addb67", fontStyle: "italic" },
    static: "#f78c6c",
    string: "#ecc48d"
  },
  typography: {
    bodyFont: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    monoFont: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    fontSize: "14px",
    lineHeight: "1.4"
  }
};
var monokaiProTheme = {
  palette: {
    activeText: "rgb(252, 252, 250)",
    defaultText: "rgb(147, 146, 147)",
    inactiveText: "#444344",
    activeBackground: "#444344",
    defaultBackground: "rgb(45, 42, 46)",
    inputBackground: "rgb(25, 24, 26)",
    accent: "rgb(255, 216, 102)",
    errorBackground: "#ffcdca",
    errorForeground: "#811e18"
  },
  syntax: {
    plain: "rgb(252, 252, 250)",
    comment: { color: "#757575", fontStyle: "italic" },
    keyword: "rgb(255, 97, 136)",
    tag: "rgb(120, 220, 232)",
    punctuation: "rgb(147, 146, 147)",
    definition: "rgb(169, 220, 118)",
    property: { color: "rgb(120, 220, 232)", fontStyle: "italic" },
    static: "rgb(171, 157, 242)",
    string: "rgb(255, 216, 102)"
  },
  typography: {
    bodyFont: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
    monoFont: '"Fira Mono", "DejaVu Sans Mono", Menlo, Consolas, "Liberation Mono", Monaco, "Lucida Console", monospace',
    fontSize: "14px",
    lineHeight: "1.4"
  }
};
var SANDPACK_THEMES = {
  light: defaultLight,
  dark: defaultDark,
  "sandpack-dark": sandpackDark,
  "night-owl": nightOwlTheme,
  "aqua-blue": aquaBlueTheme,
  "monokai-pro": monokaiProTheme,
  "github-light": githubLightTheme
};
var createThemeObject = (inputTheme) => {
  const defaultLightTheme = defaultLight;
  const defaultLightThemeKey = "default";
  const defaultDarkTheme = defaultDark;
  const defaultDarkThemeKey = "default-dark";
  if (inputTheme === void 0) {
    return {
      theme: defaultLightTheme,
      id: defaultLightThemeKey
    };
  }
  if (inputTheme === "auto") {
    return getDarkModePreference() ? {
      theme: defaultDarkTheme,
      id: defaultDarkThemeKey
    } : {
      theme: defaultLightTheme,
      id: defaultLightThemeKey
    };
  }
  if (typeof inputTheme === "string") {
    const predefinedTheme = SANDPACK_THEMES[inputTheme];
    if (!predefinedTheme) {
      throw new Error(`Invalid theme '${inputTheme}' provided.`);
    }
    return {
      theme: predefinedTheme,
      id: inputTheme != null ? inputTheme : defaultLightThemeKey
    };
  }
  const theme = {
    palette: { ...defaultLightTheme.palette, ...inputTheme == null ? void 0 : inputTheme.palette },
    syntax: { ...defaultLightTheme.syntax, ...inputTheme == null ? void 0 : inputTheme.syntax },
    typography: {
      ...defaultLightTheme.typography,
      ...inputTheme == null ? void 0 : inputTheme.typography
    }
  };
  const id = simpleHashFunction(JSON.stringify(theme));
  return {
    theme,
    id: `sp-${id}`
  };
};
var simpleHashFunction = (str) => {
  let hash = 0;
  for (let i = 0; i < str.length; hash &= hash) {
    hash = 31 * hash + str.charCodeAt(i++);
  }
  return Math.abs(hash);
};
var getThemeStyleSheet = (theme, themeId) => `
.sp-wrapper.sp-${themeId} {
  --sp-colors-fg-active: ${theme.palette.activeText};
  --sp-colors-fg-default: ${theme.palette.defaultText};
  --sp-colors-fg-inactive: ${theme.palette.inactiveText || theme.palette.activeBackground};
  --sp-colors-bg-active: ${theme.palette.activeBackground || theme.palette.inactiveText};
  --sp-colors-bg-default: ${theme.palette.defaultBackground};
  --sp-colors-bg-default-overlay: ${hexToCSSRGBa(theme.palette.defaultBackground, 0.8)};
  --sp-colors-bg-input: ${theme.palette.inputBackground};
  --sp-colors-accent: ${theme.palette.accent};
  --sp-colors-bg-error: ${theme.palette.errorBackground};
  --sp-colors-fg-error: ${theme.palette.errorForeground};
  --sp-font-size: ${theme.typography.fontSize};
  --sp-font-body: ${theme.typography.bodyFont};
  --sp-font-mono: ${theme.typography.monoFont};
  --sp-line-height: ${theme.typography.lineHeight};
`;
var getSyntaxStyle = (token) => {
  if (typeof token === "string") {
    return { color: token };
  }
  return token;
};

// src/contexts/themeContext.tsx
var SandpackThemeContext = createContext({
  theme: defaultLight,
  id: "light"
});
var SandpackThemeProvider = (props) => {
  const { theme, id } = createThemeObject(props.theme);
  const c = useClasser("sp");
  if (props.theme) {
    injectThemeStyleSheet(theme, id);
  }
  return /* @__PURE__ */ createElement(SandpackThemeContext.Provider, {
    value: {
      theme,
      id
    }
  }, /* @__PURE__ */ createElement("div", {
    className: c("wrapper", id)
  }, props.children));
};
var SandpackThemeConsumer = SandpackThemeContext.Consumer;

// src/hooks/useSandpack.ts
import {
  useContext
} from "react";

// src/contexts/sandpackContext.tsx
import {
  SandpackClient,
  extractErrorDetails
} from "@codesandbox/sandpack-client";
import isEqual from "lodash.isequal";
import {
  PureComponent,
  createContext as createContext2,
  createElement as createElement2,
  createRef
} from "react";

// src/utils/sandpackUtils.ts
import { addPackageJSONIfNeeded } from "@codesandbox/sandpack-client";

// src/templates/angular.ts
var ANGULAR_TEMPLATE = {
  files: {
    "/src/app/app.component.css": {
      code: `div {
    text-align: center;
}              
`
    },
    "/src/app/app.component.html": {
      code: `<div>
<h1>
    {{ helloWorld }}
</h1>
</div>         
`
    },
    "/src/app/app.component.ts": {
      code: `import { Component } from "@angular/core";

@Component({
    selector: "app-root",
    templateUrl: "./app.component.html",
     styleUrls: ["./app.component.css"]
})
export class AppComponent {
    helloWorld = "hello world";
}                   
`
    },
    "/src/app/app.module.ts": {
      code: `import { BrowserModule } from "@angular/platform-browser";
import { NgModule } from "@angular/core";
            
import { AppComponent } from "./app.component";
            
@NgModule({
    declarations: [AppComponent],
    imports: [BrowserModule],
    providers: [],
    bootstrap: [AppComponent]
})
export class AppModule {}           
`
    },
    "/src/index.html": {
      code: `<!doctype html>
<html lang="en">
            
<head>
    <meta charset="utf-8">
    <title>Angular</title>
    <base href="/">
            
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
            
<body>
   <app-root></app-root>
</body>
            
</html>
`
    },
    "/src/main.ts": {
      code: `import { enableProdMode } from "@angular/core";
import { platformBrowserDynamic } from "@angular/platform-browser-dynamic";
            
import { AppModule } from "./app/app.module";            

platformBrowserDynamic()
    .bootstrapModule(AppModule)
    .catch(err => console.log(err));
            
`
    },
    "/src/polyfills.ts": {
      code: `import "core-js/proposals/reflect-metadata";   
            import "zone.js/dist/zone";
`
    }
  },
  dependencies: {
    "@angular/core": "^11.2.0",
    "@angular/platform-browser": "^11.2.0",
    "@angular/platform-browser-dynamic": "^11.2.0",
    "@angular/common": "^11.2.0",
    "@angular/compiler": "^11.2.0",
    "zone.js": "0.11.3",
    "core-js": "3.8.3",
    rxjs: "6.6.3"
  },
  entry: "/src/main.ts",
  main: "/src/app/app.component.ts",
  environment: "angular-cli"
};

// src/templates/react.ts
var REACT_TEMPLATE = {
  files: {
    "/App.js": {
      code: `export default function App() {
  return <h1>Hello World</h1>
}
`
    },
    "/index.js": {
      code: `import React, { StrictMode } from "react";
import ReactDOM from "react-dom";
import "./styles.css";

import App from "./App";

const rootElement = document.getElementById("root");
ReactDOM.render(
  <StrictMode>
    <App />
  </StrictMode>,
  rootElement
);`
    },
    "/styles.css": {
      code: `body {
  font-family: sans-serif;
  -webkit-font-smoothing: auto;
  -moz-font-smoothing: auto;
  -moz-osx-font-smoothing: grayscale;
  font-smoothing: auto;
  text-rendering: optimizeLegibility;
  font-smooth: always;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
}

h1 {
  font-size: 1.5rem;
}`
    },
    "/public/index.html": {
      code: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>`
    }
  },
  dependencies: {
    react: "^17.0.0",
    "react-dom": "^17.0.0",
    "react-scripts": "^4.0.0"
  },
  entry: "/index.js",
  main: "/App.js",
  environment: "create-react-app"
};

// src/templates/react-typescript.ts
var REACT_TYPESCRIPT_TEMPLATE = {
  files: {
    "tsconfig.json": {
      code: `{
    "include": [
        "./**/*"
    ],
    "compilerOptions": {
        "strict": true,
        "esModuleInterop": true,
        "lib": [
            "dom",
            "es2015"
        ],
        "jsx": "react-jsx"
    }
}`
    },
    "/App.tsx": {
      code: `export default function App(): JSX.Element {
  return <h1>Hello World</h1>
}
`
    },
    "/index.tsx": {
      code: `import React, { StrictMode } from "react";
import ReactDOM from "react-dom";
import "./styles.css";

import App from "./App";

const rootElement = document.getElementById("root");
ReactDOM.render(
  <StrictMode>
    <App />
  </StrictMode>,
  rootElement
);`
    },
    "/styles.css": {
      code: `body {
  font-family: sans-serif;
  -webkit-font-smoothing: auto;
  -moz-font-smoothing: auto;
  -moz-osx-font-smoothing: grayscale;
  font-smoothing: auto;
  text-rendering: optimizeLegibility;
  font-smooth: always;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
}

h1 {
  font-size: 1.5rem;
}`
    },
    "/public/index.html": {
      code: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>`
    }
  },
  dependencies: {
    react: "^17.0.0",
    "react-dom": "^17.0.0",
    "react-scripts": "^4.0.0"
  },
  devDependencies: {
    "@types/react": "^17.0.0",
    "@types/react-dom": "^17.0.0",
    typescript: "^4.0.0"
  },
  entry: "/index.tsx",
  main: "/App.tsx",
  environment: "create-react-app"
};

// src/templates/svelte.ts
var SVELTE_TEMPLATE = {
  environment: "svelte",
  main: "/index.js",
  entry: "/index.js",
  files: {
    "/App.svelte": {
      code: `<style>
  main {
    font-family: sans-serif;
    text-align: center;
  }
</style>

<script>
  let name = 'world';
<\/script>

<main>
  <h1>Hello {name}!</h1>
</main>`
    },
    "/index.js": {
      code: `import App from "./App.svelte";

const app = new App({
  target: document.body
});

export default app;
      `
    },
    "/public/index.html": {
      code: `<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf8" />
    <meta name="viewport" content="width=device-width" />

    <title>Svelte app</title>

    <link rel="stylesheet" href="public/bundle.css" />
  </head>

  <body>
    <script src="bundle.js"><\/script>
  </body>
</html>`
    }
  },
  dependencies: {
    svelte: "^3.0.0"
  }
};

// src/templates/vanilla.ts
var VANILLA_TEMPLATE = {
  files: {
    "/src/index.js": {
      code: `import "./styles.css";

document.getElementById("app").innerHTML = \`
<h1>Hello Vanilla!</h1>
<div>
  We use the same configuration as Parcel to bundle this sandbox, you can find more
  info about Parcel 
  <a href="https://parceljs.org" target="_blank" rel="noopener noreferrer">here</a>.
</div>
\`;
`
    },
    "/src/styles.css": {
      code: `body {
  font-family: sans-serif;
}
      `
    },
    "/index.html": {
      code: `<!DOCTYPE html>
<html>

<head>
  <title>Parcel Sandbox</title>
  <meta charset="UTF-8" />
</head>

<body>
  <div id="app"></div>

  <script src="src/index.js">
  <\/script>
</body>

</html>`
    }
  },
  dependencies: {},
  entry: "/src/index.js",
  main: "/src/index.js",
  environment: "parcel"
};

// src/templates/vanilla-typescript.ts
var VANILLA_TYPESCRIPT_TEMPLATE = {
  files: {
    "tsconfig.json": {
      code: `{
  "compilerOptions": {
    "strict": true,
    "module": "commonjs",
    "jsx": "preserve",
    "esModuleInterop": true,
    "sourceMap": true,
    "allowJs": true,
    "lib": [
      "es6",
      "dom"
    ],
    "rootDir": "src",
    "moduleResolution": "node"
  }
}`
    },
    "/src/index.ts": {
      code: `import "./styles.css";

document.getElementById("app").innerHTML = \`
<h1>Hello Vanilla!</h1>
<div>
  We use the same configuration as Parcel to bundle this sandbox, you can find more
  info about Parcel 
  <a href="https://parceljs.org" target="_blank" rel="noopener noreferrer">here</a>.
</div>
\`;
`
    },
    "/src/styles.css": {
      code: `body {
  font-family: sans-serif;
}
      `
    },
    "/index.html": {
      code: `<!DOCTYPE html>
<html>

<head>
  <title>Parcel Sandbox</title>
  <meta charset="UTF-8" />
</head>

<body>
  <div id="app"></div>

  <script src="src/index.ts">
  <\/script>
</body>

</html>`
    }
  },
  dependencies: {},
  devDependencies: {
    typescript: "^4.0.0"
  },
  entry: "/src/index.ts",
  main: "/src/index.ts",
  environment: "parcel"
};

// src/templates/vue.ts
var VUE_TEMPLATE = {
  files: {
    "/src/App.vue": {
      code: `<template>
  <main id="app">
    <h1>Hello world</h1>
  </main>
</template>

<script>
export default {
  name: "App",
};
<\/script>

<style>
#app {
  font-family: "Avenir", Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>
`
    },
    "/src/main.js": {
      code: `import Vue from "vue";
import App from "./App.vue";

Vue.config.productionTip = false;

new Vue({
  render: h => h(App)
}).$mount("#app");
`
    },
    "/public/index.html": {
      code: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <link rel="icon" href="<%= BASE_URL %>favicon.ico" />
    <title>codesandbox</title>
  </head>
  <body>
    <noscript>
      <strong
        >We're sorry but codesandbox doesn't work properly without JavaScript
        enabled. Please enable it to continue.</strong
      >
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
`
    }
  },
  dependencies: {
    vue: "^2.6.11",
    "@vue/cli-plugin-babel": "4.1.1"
  },
  entry: "/src/main.js",
  main: "/src/App.vue",
  environment: "vue-cli"
};

// src/templates/vue3.ts
var VUE_TEMPLATE_3 = {
  files: {
    "/src/App.vue": {
      code: `<template>
  <main id="app">
    <h1>{{ helloWorld }}</h1>
  </main>
</template>
                             
<script>
import { ref } from "vue";
export default {
   name: "App",
   setup() {
      const helloWorld = ref("hello world");
      return { helloWorld };
   }
};
<\/script>
                             
<style>
#app {
font-family: Avenir, Helvetica, Arial, sans-serif;
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
text-align: center;
color: #2c3e50;
margin-top: 60px;
}
</style>   
`
    },
    "/src/main.js": {
      code: `import { createApp } from 'vue'
import App from './App.vue'
            
createApp(App).mount('#app')            
`
    },
    "/public/index.html": {
      code: `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>codesandbox</title>
  </head>
  <body>
    <noscript>
      <strong
        >We're sorry but codesandbox doesn't work properly without JavaScript
        enabled. Please enable it to continue.</strong
      >
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>
`
    }
  },
  dependencies: {
    "core-js": "^3.6.5",
    vue: "^3.0.0-0",
    "@vue/cli-plugin-babel": "4.5.0"
  },
  entry: "/src/main.js",
  main: "/src/App.vue",
  environment: "vue-cli"
};

// src/templates/index.tsx
var SANDBOX_TEMPLATES = {
  react: REACT_TEMPLATE,
  "react-ts": REACT_TYPESCRIPT_TEMPLATE,
  vue: VUE_TEMPLATE,
  vanilla: VANILLA_TEMPLATE,
  "vanilla-ts": VANILLA_TYPESCRIPT_TEMPLATE,
  vue3: VUE_TEMPLATE_3,
  angular: ANGULAR_TEMPLATE,
  svelte: SVELTE_TEMPLATE
};

// src/utils/sandpackUtils.ts
var getSandpackStateFromProps = (props) => {
  var _a, _b;
  const projectSetup = getSetup(props.template, props.customSetup);
  let openPaths = (_a = props.openPaths) != null ? _a : [];
  let activePath = props.activePath;
  if (openPaths.length === 0 && ((_b = props.customSetup) == null ? void 0 : _b.files)) {
    const inputFiles = props.customSetup.files;
    Object.keys(inputFiles).forEach((filePath) => {
      const file = inputFiles[filePath];
      if (typeof file === "string") {
        openPaths.push(filePath);
        return;
      }
      if (!activePath && file.active) {
        activePath = filePath;
        if (file.hidden === true) {
          openPaths.push(filePath);
        }
      }
      if (!file.hidden) {
        openPaths.push(filePath);
      }
    });
  }
  if (openPaths.length === 0) {
    openPaths = Object.keys(projectSetup.files).reduce((acc, key) => {
      if (!projectSetup.files[key].hidden) {
        acc.push(key);
      }
      return acc;
    }, []);
  }
  if (!activePath || !projectSetup.files[activePath]) {
    activePath = projectSetup.main || openPaths[0];
  }
  if (!openPaths.includes(activePath)) {
    openPaths.push(activePath);
  }
  if (!projectSetup.files[activePath]) {
    throw new Error(`${activePath} was set as the active file but was not provided`);
  }
  const files = addPackageJSONIfNeeded(projectSetup.files, projectSetup.dependencies || {}, projectSetup.devDependencies || {}, projectSetup.entry);
  const environment = projectSetup.environment;
  const existOpenPath = openPaths.filter((file) => files[file]);
  return { openPaths: existOpenPath, activePath, files, environment };
};
var getSetup = (template, inputSetup) => {
  const setup = createSetupFromUserInput(inputSetup);
  if (!template) {
    if (!setup) {
      return SANDBOX_TEMPLATES.vanilla;
    }
    if (!setup.files || Object.keys(setup.files).length === 0) {
      throw new Error(`When using the customSetup without a template, you must pass at least one file for sandpack to work`);
    }
    return setup;
  }
  const baseTemplate = SANDBOX_TEMPLATES[template];
  if (!baseTemplate) {
    throw new Error(`Invalid template '${template}' provided.`);
  }
  if (!setup) {
    return baseTemplate;
  }
  return {
    files: { ...baseTemplate.files, ...setup.files },
    dependencies: {
      ...baseTemplate.dependencies,
      ...setup.dependencies
    },
    devDependencies: {
      ...baseTemplate.devDependencies,
      ...setup.devDependencies
    },
    entry: setup.entry || baseTemplate.entry,
    main: setup.main || baseTemplate.main,
    environment: setup.environment || baseTemplate.environment
  };
};
var createSetupFromUserInput = (setup) => {
  if (!setup) {
    return null;
  }
  if (!setup.files) {
    return setup;
  }
  const { files } = setup;
  const convertedFiles = Object.keys(files).reduce((acc, key) => {
    if (typeof files[key] === "string") {
      acc[key] = { code: files[key] };
    } else {
      acc[key] = files[key];
    }
    return acc;
  }, {});
  return {
    ...setup,
    files: convertedFiles
  };
};

// src/contexts/sandpackContext.tsx
var Sandpack = createContext2(null);
var BUNDLER_TIMEOUT = 3e4;
var SandpackProvider = class extends PureComponent {
  constructor(props) {
    super(props);
    this.timeoutHook = null;
    this.initializeSandpackIframeHook = null;
    this.handleMessage = (msg) => {
      if (this.timeoutHook) {
        clearTimeout(this.timeoutHook);
      }
      if (msg.type === "state") {
        this.setState({ bundlerState: msg.state });
      } else if (msg.type === "done" && !msg.compilatonError) {
        this.setState({ error: null });
      } else if (msg.type === "action" && msg.action === "show-error") {
        this.setState({ error: extractErrorDetails(msg) });
      } else if (msg.type === "action" && msg.action === "notification" && msg.notificationType === "error") {
        this.setState({
          error: { message: msg.title }
        });
      }
    };
    this.registerReactDevTools = (value) => {
      this.setState({ reactDevTools: value });
    };
    this.updateCurrentFile = (newCode) => {
      this.updateFile(this.state.activePath, newCode);
    };
    this.updateFile = (path, newCode) => {
      var _a;
      if (newCode === ((_a = this.state.files[this.state.activePath]) == null ? void 0 : _a.code)) {
        return;
      }
      const { files } = this.state;
      const newFiles = {
        ...files,
        [path]: { code: newCode }
      };
      this.setState({ files: newFiles }, this.updateClients);
    };
    this.updateClients = () => {
      const { files, sandpackStatus } = this.state;
      const { recompileMode, recompileDelay } = this.props;
      if (sandpackStatus !== "running") {
        return;
      }
      if (recompileMode === "immediate") {
        Object.values(this.clients).forEach((client) => {
          client.updatePreview({
            files
          });
        });
      }
      if (recompileMode === "delayed") {
        window.clearTimeout(this.debounceHook);
        this.debounceHook = window.setTimeout(() => {
          Object.values(this.clients).forEach((client) => {
            client.updatePreview({
              files: this.state.files
            });
          });
        }, recompileDelay);
      }
    };
    this.createClient = (iframe, clientId) => {
      const client = new SandpackClient(iframe, {
        files: this.state.files,
        template: this.state.environment
      }, {
        externalResources: this.props.externalResources,
        bundlerURL: this.props.bundlerURL,
        logLevel: this.props.logLevel,
        startRoute: this.props.startRoute,
        fileResolver: this.props.fileResolver,
        skipEval: this.props.skipEval,
        showOpenInCodeSandbox: !this.openInCSBRegistered.current,
        showErrorScreen: !this.errorScreenRegistered.current,
        showLoadingScreen: !this.loadingScreenRegistered.current,
        reactDevTools: this.state.reactDevTools
      });
      if (typeof this.unsubscribe !== "function") {
        this.unsubscribe = client.listen(this.handleMessage);
        this.timeoutHook = setTimeout(() => {
          this.setState({ sandpackStatus: "timeout" });
        }, BUNDLER_TIMEOUT);
      }
      if (this.queuedListeners[clientId]) {
        Object.keys(this.queuedListeners[clientId]).forEach((listenerId) => {
          const listener = this.queuedListeners[clientId][listenerId];
          const unsubscribe = client.listen(listener);
          this.unsubscribeQueuedListeners[clientId][listenerId] = unsubscribe;
        });
        this.queuedListeners[clientId] = {};
      }
      const globalListeners = Object.entries(this.queuedListeners.global);
      globalListeners.forEach(([listenerId, listener]) => {
        const unsubscribe = client.listen(listener);
        this.unsubscribeQueuedListeners[clientId][listenerId] = unsubscribe;
      });
      return client;
    };
    this.runSandpack = () => {
      Object.keys(this.preregisteredIframes).forEach((clientId) => {
        const iframe = this.preregisteredIframes[clientId];
        this.clients[clientId] = this.createClient(iframe, clientId);
      });
      this.setState({ sandpackStatus: "running" });
    };
    this.registerBundler = (iframe, clientId) => {
      if (this.state.sandpackStatus === "running") {
        this.clients[clientId] = this.createClient(iframe, clientId);
      } else {
        this.preregisteredIframes[clientId] = iframe;
      }
    };
    this.unregisterBundler = (clientId) => {
      var _a;
      const client = this.clients[clientId];
      if (client) {
        client.cleanup();
        (_a = client.iframe.contentWindow) == null ? void 0 : _a.location.replace("about:blank");
        delete this.clients[clientId];
      } else {
        delete this.preregisteredIframes[clientId];
      }
      if (this.timeoutHook) {
        clearTimeout(this.timeoutHook);
      }
      this.setState({ sandpackStatus: "idle" });
    };
    this.unregisterAllClients = () => {
      Object.keys(this.clients).map(this.unregisterBundler);
      if (typeof this.unsubscribe === "function") {
        this.unsubscribe();
        this.unsubscribe = void 0;
      }
    };
    this.setActiveFile = (activePath) => {
      this.setState({ activePath });
    };
    this.openFile = (path) => {
      this.setState(({ openPaths }) => {
        const newPaths = openPaths.includes(path) ? openPaths : [...openPaths, path];
        return {
          activePath: path,
          openPaths: newPaths
        };
      });
    };
    this.closeFile = (path) => {
      if (this.state.openPaths.length === 1) {
        return;
      }
      this.setState(({ openPaths, activePath }) => {
        const indexOfRemovedPath = openPaths.indexOf(path);
        const newPaths = openPaths.filter((openPath) => openPath !== path);
        return {
          activePath: path === activePath ? indexOfRemovedPath === 0 ? openPaths[1] : openPaths[indexOfRemovedPath - 1] : activePath,
          openPaths: newPaths
        };
      });
    };
    this.deleteFile = (path) => {
      this.setState(({ openPaths, files }) => {
        const newPaths = openPaths.filter((openPath) => openPath !== path);
        const newFiles = Object.keys(files).reduce((acc, filePath) => {
          if (filePath === path) {
            return acc;
          }
          acc[filePath] = files[filePath];
          return acc;
        }, {});
        return {
          openPaths: newPaths,
          files: newFiles
        };
      });
      this.updateClients();
    };
    this.dispatchMessage = (message, clientId) => {
      if (this.state.sandpackStatus !== "running") {
        console.warn("dispatch cannot be called while in idle mode");
        return;
      }
      if (clientId) {
        this.clients[clientId].dispatch(message);
      } else {
        Object.values(this.clients).forEach((client) => {
          client.dispatch(message);
        });
      }
    };
    this.addListener = (listener, clientId) => {
      if (clientId) {
        if (this.clients[clientId]) {
          const unsubscribeListener = this.clients[clientId].listen(listener);
          return unsubscribeListener;
        } else {
          const listenerId = generateRandomId();
          this.queuedListeners[clientId] = this.queuedListeners[clientId] || {};
          this.unsubscribeQueuedListeners[clientId] = this.unsubscribeQueuedListeners[clientId] || {};
          this.queuedListeners[clientId][listenerId] = listener;
          const unsubscribeListener = () => {
            if (this.queuedListeners[clientId][listenerId]) {
              delete this.queuedListeners[clientId][listenerId];
            } else if (this.unsubscribeQueuedListeners[clientId][listenerId]) {
              this.unsubscribeQueuedListeners[clientId][listenerId]();
              delete this.unsubscribeQueuedListeners[clientId][listenerId];
            }
          };
          return unsubscribeListener;
        }
      } else {
        const listenerId = generateRandomId();
        this.queuedListeners.global[listenerId] = listener;
        const clients = Object.values(this.clients);
        const currentClientUnsubscribeListeners = clients.map((client) => client.listen(listener));
        const unsubscribeListener = () => {
          const unsubscribeQueuedClients = Object.values(this.unsubscribeQueuedListeners);
          unsubscribeQueuedClients.forEach((listenerOfClient) => {
            const listenerFunctions = Object.values(listenerOfClient);
            listenerFunctions.forEach((unsubscribe) => unsubscribe());
          });
          currentClientUnsubscribeListeners.forEach((unsubscribe) => unsubscribe());
        };
        return unsubscribeListener;
      }
    };
    this.resetFile = (path) => {
      const { files } = getSandpackStateFromProps(this.props);
      this.setState((prevState) => ({
        files: { ...prevState.files, [path]: files[path] }
      }), this.updateClients);
    };
    this.resetAllFiles = () => {
      const { files } = getSandpackStateFromProps(this.props);
      this.setState({ files }, this.updateClients);
    };
    this._getSandpackState = () => {
      const {
        files,
        activePath,
        openPaths,
        startRoute,
        bundlerState,
        editorState,
        error,
        sandpackStatus,
        environment,
        initMode
      } = this.state;
      return {
        files,
        environment,
        openPaths,
        activePath,
        startRoute,
        error,
        bundlerState,
        status: sandpackStatus,
        editorState,
        initMode,
        clients: this.clients,
        closeFile: this.closeFile,
        deleteFile: this.deleteFile,
        dispatch: this.dispatchMessage,
        errorScreenRegisteredRef: this.errorScreenRegistered,
        lazyAnchorRef: this.lazyAnchorRef,
        listen: this.addListener,
        loadingScreenRegisteredRef: this.loadingScreenRegistered,
        openFile: this.openFile,
        openInCSBRegisteredRef: this.openInCSBRegistered,
        registerBundler: this.registerBundler,
        resetAllFiles: this.resetAllFiles,
        resetFile: this.resetFile,
        runSandpack: this.runSandpack,
        setActiveFile: this.setActiveFile,
        unregisterBundler: this.unregisterBundler,
        updateCurrentFile: this.updateCurrentFile,
        updateFile: this.updateFile,
        registerReactDevTools: this.registerReactDevTools
      };
    };
    const { activePath, openPaths, files, environment } = getSandpackStateFromProps(props);
    this.state = {
      files,
      environment,
      openPaths,
      activePath,
      startRoute: this.props.startRoute,
      bundlerState: void 0,
      error: null,
      sandpackStatus: this.props.autorun ? "initial" : "idle",
      editorState: "pristine",
      renderHiddenIframe: false,
      initMode: this.props.initMode || "lazy",
      reactDevTools: void 0
    };
    this.queuedListeners = { global: {} };
    this.unsubscribeQueuedListeners = {};
    this.preregisteredIframes = {};
    this.clients = {};
    this.lazyAnchorRef = createRef();
    this.errorScreenRegistered = createRef();
    this.openInCSBRegistered = createRef();
    this.loadingScreenRegistered = createRef();
  }
  initializeSandpackIframe() {
    var _a, _b;
    if (!this.props.autorun) {
      return;
    }
    const observerOptions = (_a = this.props.initModeObserverOptions) != null ? _a : {
      rootMargin: `1000px 0px`
    };
    if (this.intersectionObserver && this.lazyAnchorRef.current) {
      (_b = this.intersectionObserver) == null ? void 0 : _b.unobserve(this.lazyAnchorRef.current);
    }
    if (this.lazyAnchorRef.current && this.state.initMode === "lazy") {
      this.intersectionObserver = new IntersectionObserver((entries) => {
        var _a2;
        if (entries.some((entry) => entry.isIntersecting)) {
          this.initializeSandpackIframeHook = setTimeout(() => {
            this.runSandpack();
          }, 50);
          if (this.lazyAnchorRef.current) {
            (_a2 = this.intersectionObserver) == null ? void 0 : _a2.unobserve(this.lazyAnchorRef.current);
          }
        }
      }, observerOptions);
      this.intersectionObserver.observe(this.lazyAnchorRef.current);
    } else if (this.lazyAnchorRef.current && this.state.initMode === "user-visible") {
      this.intersectionObserver = new IntersectionObserver((entries) => {
        if (entries.some((entry) => entry.isIntersecting)) {
          this.initializeSandpackIframeHook = setTimeout(() => {
            this.runSandpack();
          }, 50);
        } else {
          if (this.initializeSandpackIframeHook) {
            clearTimeout(this.initializeSandpackIframeHook);
          }
          Object.keys(this.clients).map(this.unregisterBundler);
          this.unregisterAllClients();
        }
      }, observerOptions);
      this.intersectionObserver.observe(this.lazyAnchorRef.current);
    } else {
      this.initializeSandpackIframeHook = setTimeout(() => this.runSandpack(), 50);
    }
  }
  componentDidMount() {
    this.initializeSandpackIframe();
  }
  componentDidUpdate(prevProps) {
    if (prevProps.initMode !== this.props.initMode && this.props.initMode) {
      this.setState({ initMode: this.props.initMode }, this.initializeSandpackIframe);
    }
    const { activePath, openPaths, files, environment } = getSandpackStateFromProps(this.props);
    if (prevProps.template !== this.props.template || prevProps.activePath !== this.props.activePath || !isEqual(prevProps.openPaths, this.props.openPaths) || !isEqual(prevProps.customSetup, this.props.customSetup)) {
      this.setState({ activePath, openPaths, files, environment });
      if (this.state.sandpackStatus !== "running") {
        return;
      }
      Object.values(this.clients).forEach((client) => client.updatePreview({
        files,
        template: environment
      }));
    }
    const editorState = isEqual(files, this.state.files) ? "pristine" : "dirty";
    if (editorState !== this.state.editorState) {
      this.setState({ editorState });
    }
  }
  componentWillUnmount() {
    if (typeof this.unsubscribe === "function") {
      this.unsubscribe();
    }
    if (this.timeoutHook) {
      clearTimeout(this.timeoutHook);
    }
    if (this.debounceHook) {
      clearTimeout(this.debounceHook);
    }
    if (this.initializeSandpackIframeHook) {
      clearTimeout(this.initializeSandpackIframeHook);
    }
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
    }
  }
  render() {
    const { children } = this.props;
    return /* @__PURE__ */ createElement2(Sandpack.Provider, {
      value: this._getSandpackState()
    }, children);
  }
};
SandpackProvider.defaultProps = {
  skipEval: false,
  recompileMode: "delayed",
  recompileDelay: 500,
  autorun: true
};
var SandpackConsumer = Sandpack.Consumer;

// src/hooks/useSandpack.ts
function useSandpack() {
  const sandpack = useContext(Sandpack);
  if (sandpack === null) {
    throw new Error(`useSandpack can only be used inside components wrapped by 'SandpackProvider'`);
  }
  const { dispatch, listen, ...rest } = sandpack;
  return {
    sandpack: { ...rest },
    dispatch,
    listen
  };
}

// src/common/Layout.tsx
var SandpackLayout = ({
  children,
  theme,
  ...props
}) => {
  const { sandpack } = useSandpack();
  const c = useClasser2("sp");
  return /* @__PURE__ */ createElement3(SandpackThemeProvider, {
    theme
  }, /* @__PURE__ */ createElement3("div", {
    ref: sandpack.lazyAnchorRef,
    className: c("layout"),
    ...props
  }, children));
};

// src/components/CodeEditor/index.tsx
import { useClasser as useClasser7 } from "@code-hike/classer";
import {
  createElement as createElement9,
  forwardRef as forwardRef2
} from "react";

// src/common/RunButton.tsx
import { useClasser as useClasser3 } from "@code-hike/classer";
import {
  createElement as createElement5
} from "react";

// src/icons/index.tsx
import {
  createElement as createElement4
} from "react";
var SVG = (props) => /* @__PURE__ */ createElement4("svg", {
  fill: "currentColor",
  height: "24",
  viewBox: "0 0 24 24",
  width: "24",
  xmlns: "http://www.w3.org/2000/svg",
  ...props
});
var RunIcon = () => /* @__PURE__ */ createElement4(SVG, {
  viewBox: "0 0 17 16"
}, /* @__PURE__ */ createElement4("path", {
  d: "M11.0792 8.1078C11.2793 8.25007 11.27 8.55012 11.0616 8.67981L6.02535 11.8135C5.79638 11.956 5.5 11.7913 5.5 11.5216L5.5 8.40703L5.5 4.80661C5.5 4.52735 5.81537 4.36463 6.04296 4.52647L11.0792 8.1078Z"
}));
var BackwardIcon = () => /* @__PURE__ */ createElement4(SVG, null, /* @__PURE__ */ createElement4("path", {
  d: "M8.99126 12.2106L14.0455 6.98196L13.2998 6.21057L7.5 12.2106L13.2998 18.2106L14.0455 17.3924L8.99126 12.2106Z"
}));
var ForwardIcon = () => /* @__PURE__ */ createElement4(SVG, null, /* @__PURE__ */ createElement4("path", {
  d: "M13.5087 12.2105L8.45455 17.4392L9.2002 18.2106L15 12.2106L9.2002 6.21057L8.45455 7.02875L13.5087 12.2105Z"
}));
var RefreshIcon = () => /* @__PURE__ */ createElement4(SVG, null, /* @__PURE__ */ createElement4("path", {
  clipRule: "evenodd",
  d: "M16.48 12.8571C16.0883 15.1705 14.1389 16.9286 11.7931 16.9286C9.16499 16.9286 7.03448 14.722 7.03448 12C7.03448 9.27803 9.16499 7.07143 11.7931 7.07143C13.6797 7.07143 15.3099 8.20855 16.0796 9.85714L14.2759 9.85714V11.1429H16.48H16.7586H17.5275H18V6.85714L16.7586 6.85714V8.90778C15.7449 7.16536 13.9004 6 11.7931 6C8.59366 6 6 8.68629 6 12C6 15.3137 8.59366 18 11.7931 18C14.7116 18 17.126 15.7648 17.5275 12.8571H16.48Z",
  fillRule: "evenodd"
}));
var ExportIcon = () => /* @__PURE__ */ createElement4("svg", {
  stroke: "currentColor",
  fill: "none",
  height: "24",
  viewBox: "0 0 24 24",
  width: "24",
  xmlns: "http://www.w3.org/2000/svg"
}, /* @__PURE__ */ createElement4("path", {
  d: "M10.5714 7H8.07143C7.4797 7 7 7.4797 7 8.07143V15.9286C7 16.5203 7.4797 17 8.07143 17H15.9286C16.5203 17 17 16.5203 17 15.9286V13.4286"
}), /* @__PURE__ */ createElement4("path", {
  d: "M14.1429 7H16.8929C16.952 7 17 7.04798 17 7.10714V9.85715"
}), /* @__PURE__ */ createElement4("path", {
  d: "M11.2858 12.7143L16.8572 7.14282"
}));
var DirectoryIcon = ({
  isOpen = false
}) => /* @__PURE__ */ createElement4(SVG, {
  height: "20",
  viewBox: "0 0 1024 1024",
  width: "20"
}, isOpen ? /* @__PURE__ */ createElement4("path", {
  d: "M928 444H820V330.4c0-17.7-14.3-32-32-32H473L355.7 186.2c-1.5-1.4-3.5-2.2-5.5-2.2H96c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h698c13 0 24.8-7.9 29.7-20l134-332c1.5-3.8 2.3-7.9 2.3-12 0-17.7-14.3-32-32-32z m-180 0H238c-13 0-24.8 7.9-29.7 20L136 643.2V256h188.5l119.6 114.4H748V444z"
}) : /* @__PURE__ */ createElement4("path", {
  d: "M880 298.4H521L403.7 186.2c-1.5-1.4-3.5-2.2-5.5-2.2H144c-17.7 0-32 14.3-32 32v592c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V330.4c0-17.7-14.3-32-32-32z"
}));
var FileIcon = () => /* @__PURE__ */ createElement4(SVG, {
  height: "20",
  viewBox: "0 0 1024 1024",
  width: "20"
}, /* @__PURE__ */ createElement4("path", {
  d: "M309.333333 192a32 32 0 0 0-32 32v576c0 17.664 14.336 32 32 32h384a32 32 0 0 0 32-32v-384h-128a96 96 0 0 1-96-96v-128h-192z m256 45.226667l114.773334 114.773333H597.333333a32 32 0 0 1-32-32V237.226667zM213.333333 224A96 96 0 0 1 309.333333 128h224a32 32 0 0 1 22.613334 9.386667l224 224c6.016 5.973333 9.386667 14.122667 9.386666 22.613333v416A96 96 0 0 1 693.333333 896h-384A96 96 0 0 1 213.333333 800V224z"
}));
var CloseIcon = () => /* @__PURE__ */ createElement4(SVG, {
  height: "8",
  viewBox: "0 0 16 16",
  width: "8"
}, /* @__PURE__ */ createElement4("path", {
  d: "M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z"
}));

// src/common/RunButton.tsx
var RunButton = () => {
  const c = useClasser3("sp");
  const { sandpack } = useSandpack();
  return /* @__PURE__ */ createElement5("button", {
    className: c("button"),
    onClick: () => sandpack.runSandpack(),
    style: {
      position: "absolute",
      bottom: "var(--sp-space-2)",
      right: "var(--sp-space-2)"
    },
    type: "button"
  }, /* @__PURE__ */ createElement5(RunIcon, null), "Run");
};

// src/common/Stack.tsx
import { useClasser as useClasser4 } from "@code-hike/classer";
import {
  createElement as createElement6
} from "react";
var SandpackStack = ({
  children,
  customStyle
}) => {
  const c = useClasser4("sp");
  return /* @__PURE__ */ createElement6("div", {
    className: c("stack"),
    style: customStyle
  }, children);
};

// src/hooks/useActiveCode.ts
var useActiveCode = () => {
  var _a;
  const { sandpack } = useSandpack();
  return {
    code: sandpack.files[sandpack.activePath].code,
    readOnly: (_a = sandpack.files[sandpack.activePath].readOnly) != null ? _a : false,
    updateCode: sandpack.updateCurrentFile
  };
};

// src/components/FileTabs/index.tsx
import { useClasser as useClasser5 } from "@code-hike/classer";
import {
  createElement as createElement7
} from "react";
var FileTabs = ({ closableTabs }) => {
  const { sandpack } = useSandpack();
  const c = useClasser5("sp");
  const { activePath, openPaths, setActiveFile } = sandpack;
  const handleCloseFile = (ev) => {
    ev.stopPropagation();
    const tabElm = ev.target.closest("[data-active]");
    const pathToClose = tabElm == null ? void 0 : tabElm.getAttribute("title");
    if (!pathToClose) {
      return;
    }
    sandpack.closeFile(pathToClose);
  };
  const getTriggerText = (currentPath) => {
    const documentFileName = getFileName(currentPath);
    const pathsWithDuplicateFileNames = openPaths.reduce((prev, curr) => {
      if (curr === currentPath) {
        return prev;
      }
      const fileName = getFileName(curr);
      if (fileName === documentFileName) {
        prev.push(curr);
        return prev;
      }
      return prev;
    }, []);
    if (pathsWithDuplicateFileNames.length === 0) {
      return documentFileName;
    } else {
      return calculateNearestUniquePath(currentPath, pathsWithDuplicateFileNames);
    }
  };
  return /* @__PURE__ */ createElement7("div", {
    className: c("tabs"),
    translate: "no"
  }, /* @__PURE__ */ createElement7("div", {
    "aria-label": "Select active file",
    className: c("tabs-scrollable-container"),
    role: "tablist"
  }, openPaths.map((filePath) => /* @__PURE__ */ createElement7("button", {
    key: filePath,
    "aria-selected": filePath === activePath,
    className: c("tab-button"),
    "data-active": filePath === activePath,
    onClick: () => setActiveFile(filePath),
    role: "tab",
    title: filePath,
    type: "button"
  }, getTriggerText(filePath), closableTabs && openPaths.length > 1 && /* @__PURE__ */ createElement7("span", {
    className: c("close-button"),
    onClick: handleCloseFile
  }, /* @__PURE__ */ createElement7(CloseIcon, null))))));
};

// src/components/CodeEditor/CodeMirror.tsx
import { useClasser as useClasser6 } from "@code-hike/classer";
import { closeBrackets, closeBracketsKeymap } from "@codemirror/closebrackets";
import {
  defaultKeymap,
  indentLess,
  deleteGroupBackward,
  insertTab
} from "@codemirror/commands";
import { commentKeymap } from "@codemirror/comment";
import { lineNumbers } from "@codemirror/gutter";
import { defaultHighlightStyle } from "@codemirror/highlight";
import { history, historyKeymap } from "@codemirror/history";
import { bracketMatching } from "@codemirror/matchbrackets";
import { EditorState } from "@codemirror/state";
import {
  highlightSpecialChars,
  highlightActiveLine,
  keymap,
  EditorView as EditorView2
} from "@codemirror/view";
import useIntersectionObserver from "@react-hook/intersection-observer";
import {
  Fragment,
  createElement as createElement8,
  forwardRef,
  useEffect,
  useImperativeHandle,
  useMemo,
  useRef,
  useState
} from "react";

// src/hooks/useSandpackTheme.ts
import {
  useContext as useContext2
} from "react";
var useSandpackTheme = () => {
  const { theme, id } = useContext2(SandpackThemeContext);
  return { theme, themeId: id };
};

// src/components/CodeEditor/highlightDecorators.ts
import { Decoration, ViewPlugin } from "@codemirror/view";

// src/components/CodeEditor/utils.ts
import { HighlightStyle, tags } from "@codemirror/highlight";
import { css } from "@codemirror/lang-css";
import { html } from "@codemirror/lang-html";
import { javascript } from "@codemirror/lang-javascript";
import { EditorView } from "@codemirror/view";
import {
  useCallback
} from "react";
var getCodeMirrorPosition = (doc, { line, column }) => {
  return doc.line(line).from + (column != null ? column : 0) - 1;
};
var getEditorTheme = (theme) => EditorView.theme({
  "&": {
    backgroundColor: theme.palette.defaultBackground,
    color: getSyntaxStyle(theme.syntax.plain).color || theme.palette.activeText,
    height: "100%"
  },
  "&.cm-editor.cm-focused": {
    outline: "none"
  },
  ".cm-activeLine": {
    backgroundColor: hexToCSSRGBa(theme.palette.activeBackground, 0.5)
  },
  ".cm-errorLine": {
    backgroundColor: hexToCSSRGBa(theme.palette.errorBackground, 0.2)
  },
  ".cm-matchingBracket, .cm-nonmatchingBracket": {
    color: "inherit",
    background: theme.palette.activeBackground
  },
  ".cm-content": {
    padding: 0,
    caretColor: theme.palette.activeText
  },
  ".cm-scroller": {
    fontFamily: theme.typography.monoFont,
    lineHeight: theme.typography.lineHeight
  },
  ".cm-gutters": {
    backgroundColor: theme.palette.defaultBackground,
    color: theme.palette.defaultText,
    border: "none"
  },
  ".cm-gutter.cm-lineNumbers": {
    paddingLeft: "var(--sp-space-1)",
    paddingRight: "var(--sp-space-1)"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: 0
  },
  ".cm-line": {
    padding: "0 var(--sp-space-3)"
  }
});
var getSyntaxHighlight = (theme) => {
  var _a;
  return HighlightStyle.define([
    { tag: tags.link, textDecoration: "underline" },
    { tag: tags.emphasis, fontStyle: "italic" },
    { tag: tags.strong, fontWeight: "bold" },
    {
      tag: tags.keyword,
      ...getSyntaxStyle(theme.syntax.keyword)
    },
    {
      tag: [tags.atom, tags.number, tags.bool],
      ...getSyntaxStyle(theme.syntax.static)
    },
    {
      tag: tags.tagName,
      ...getSyntaxStyle(theme.syntax.tag)
    },
    { tag: tags.variableName, ...getSyntaxStyle(theme.syntax.plain) },
    {
      tag: tags.function(tags.variableName),
      ...getSyntaxStyle(theme.syntax.definition)
    },
    {
      tag: tags.definition(tags.function(tags.variableName)),
      ...getSyntaxStyle(theme.syntax.definition)
    },
    {
      tag: tags.propertyName,
      ...getSyntaxStyle(theme.syntax.property)
    },
    {
      tag: [tags.literal, tags.inserted],
      ...getSyntaxStyle((_a = theme.syntax.string) != null ? _a : theme.syntax.static)
    },
    { tag: tags.punctuation, ...getSyntaxStyle(theme.syntax.punctuation) },
    { tag: tags.comment, ...getSyntaxStyle(theme.syntax.comment) }
  ]);
};
var getLanguageFromFile = (filePath, fileType) => {
  if (!filePath && !fileType)
    return "javascript";
  let extension = fileType;
  if (!extension && filePath) {
    const extensionDotIndex = filePath.lastIndexOf(".");
    extension = filePath.slice(extensionDotIndex + 1);
  }
  switch (extension) {
    case "js":
    case "jsx":
      return "javascript";
    case "ts":
    case "tsx":
      return "typescript";
    case "html":
    case "svelte":
    case "vue":
      return "html";
    case "css":
    case "less":
    case "scss":
      return "css";
    default:
      return "javascript";
  }
};
var getCodeMirrorLanguage = (extension) => {
  const options = {
    javascript: javascript({ jsx: true, typescript: false }),
    typescript: javascript({ jsx: true, typescript: true }),
    html: html(),
    css: css()
  };
  return options[extension];
};
var useCombinedRefs = (...refs) => useCallback((element) => refs.forEach((ref) => {
  if (!ref) {
    return;
  }
  if (typeof ref === "function") {
    return ref(element);
  }
  ref.current = element;
}), refs);

// src/components/CodeEditor/highlightDecorators.ts
function highlightDecorators(positions) {
  return ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = this.getDecoration(view);
    }
    update(update) {
      return;
    }
    getDecoration(view) {
      if (!positions)
        return Decoration.none;
      const rangesDecorators = positions.map((item) => {
        var _a, _b, _c;
        const lineDeco2 = Decoration.line({
          attributes: { class: (_a = item.className) != null ? _a : "" }
        });
        const markDeco = Decoration.mark({
          class: (_b = item.className) != null ? _b : "",
          attributes: (_c = item.elementAttributes) != null ? _c : void 0
        });
        const positionLineStart = getCodeMirrorPosition(view.state.doc, {
          line: item.line,
          column: item.startColumn
        }) + 1;
        if (item.startColumn && item.endColumn) {
          const positionLineEnd = getCodeMirrorPosition(view.state.doc, {
            line: item.line,
            column: item.endColumn
          }) + 1;
          return markDeco.range(positionLineStart, positionLineEnd);
        }
        return lineDeco2.range(positionLineStart);
      });
      return Decoration.set(rangesDecorators);
    }
  }, {
    decorations: (v) => v.decorations
  });
}

// src/components/CodeEditor/highlightInlineError.ts
import { Decoration as Decoration2, ViewPlugin as ViewPlugin2 } from "@codemirror/view";
function highlightInlineError() {
  return activeLineHighlighter;
}
var lineDeco = Decoration2.line({ attributes: { class: "cm-errorLine" } });
var activeLineHighlighter = ViewPlugin2.fromClass(class {
  constructor() {
    this.decorations = Decoration2.none;
  }
  update(update) {
    let message = null;
    update.transactions.forEach((trans) => {
      var _a;
      (_a = trans.annotations) == null ? void 0 : _a.forEach((element) => {
        if (element.type === "error") {
          message = element;
        }
        if (element.type === "clean-error") {
          message = element;
        }
      });
    });
    if (message !== null) {
      this.decorations = this.getDecoration(update.view, message);
    }
  }
  getDecoration(view, message) {
    if (message === null || message.type === "clean-error") {
      return Decoration2.none;
    }
    if (message.type === "error") {
      const position = getCodeMirrorPosition(view.state.doc, {
        line: message.value
      }) + 1;
      return Decoration2.set([lineDeco.range(position)]);
    }
    return Decoration2.none;
  }
}, {
  decorations: (v) => v.decorations
});

// src/components/CodeEditor/CodeMirror.tsx
var CodeMirror = forwardRef(({
  code,
  filePath,
  fileType,
  onCodeUpdate,
  showLineNumbers = false,
  showInlineErrors = false,
  wrapContent = false,
  editorState = "pristine",
  readOnly = false,
  showReadOnly = true,
  decorators,
  initMode = "lazy",
  id,
  extensions = [],
  extensionsKeymap = []
}, ref) => {
  const wrapper = useRef(null);
  const cmView = useRef();
  const { theme, themeId } = useSandpackTheme();
  const [internalCode, setInternalCode] = useState(code);
  const [shouldInitEditor, setShouldInitEditor] = useState(initMode === "immediate");
  const c = useClasser6("sp");
  const { listen } = useSandpack();
  const ariaId = useRef(id != null ? id : generateRandomId());
  const { isIntersecting } = useIntersectionObserver(wrapper, {
    rootMargin: "600px 0px",
    threshold: 0.2
  });
  useImperativeHandle(ref, () => ({
    getCodemirror: () => cmView.current
  }));
  useEffect(() => {
    const mode = initMode === "lazy" || initMode === "user-visible";
    if (mode && isIntersecting) {
      setShouldInitEditor(true);
    }
  }, [initMode, isIntersecting]);
  const languageExtension = getLanguageFromFile(filePath, fileType);
  const langSupport = getCodeMirrorLanguage(languageExtension);
  const sortedDecorators = useMemo(() => decorators ? decorators.sort((d1, d2) => d1.line - d2.line) : decorators, [decorators]);
  useEffect(() => {
    if (!wrapper.current || !shouldInitEditor)
      return;
    const timer = setTimeout(function delayCodeEditorInit() {
      const customCommandsKeymap = [
        {
          key: "Tab",
          run: insertTab
        },
        {
          key: "Shift-Tab",
          run: indentLess
        },
        {
          key: "Escape",
          run: () => {
            if (readOnly)
              return true;
            if (wrapper.current) {
              wrapper.current.focus();
            }
            return true;
          }
        },
        {
          key: "mod-Backspace",
          run: deleteGroupBackward
        }
      ];
      const extensionList = [
        highlightSpecialChars(),
        history(),
        closeBrackets(),
        keymap.of([
          ...closeBracketsKeymap,
          ...defaultKeymap,
          ...historyKeymap,
          ...commentKeymap,
          ...customCommandsKeymap,
          ...extensionsKeymap
        ]),
        langSupport,
        defaultHighlightStyle.fallback,
        getEditorTheme(theme),
        getSyntaxHighlight(theme),
        ...extensions
      ];
      if (readOnly) {
        extensionList.push(EditorState.readOnly.of(true));
        extensionList.push(EditorView2.editable.of(false));
      } else {
        extensionList.push(bracketMatching());
        extensionList.push(highlightActiveLine());
      }
      if (sortedDecorators) {
        extensionList.push(highlightDecorators(sortedDecorators));
      }
      if (wrapContent) {
        extensionList.push(EditorView2.lineWrapping);
      }
      if (showLineNumbers) {
        extensionList.push(lineNumbers());
      }
      if (showInlineErrors) {
        extensionList.push(highlightInlineError());
      }
      const startState = EditorState.create({
        doc: code,
        extensions: extensionList
      });
      const parentDiv = wrapper.current;
      const existingPlaceholder = parentDiv.querySelector(".sp-pre-placeholder");
      if (existingPlaceholder) {
        parentDiv.removeChild(existingPlaceholder);
      }
      const view = new EditorView2({
        state: startState,
        parent: parentDiv,
        dispatch: (tr) => {
          view.update([tr]);
          if (tr.docChanged) {
            const newCode = tr.newDoc.sliceString(0, tr.newDoc.length);
            setInternalCode(newCode);
            onCodeUpdate == null ? void 0 : onCodeUpdate(newCode);
          }
        }
      });
      view.contentDOM.setAttribute("data-gramm", "false");
      if (!readOnly) {
        view.contentDOM.setAttribute("tabIndex", "-1");
        view.contentDOM.setAttribute("aria-describedby", `exit-instructions-${ariaId.current}`);
      }
      cmView.current = view;
    }, 0);
    return () => {
      var _a;
      (_a = cmView.current) == null ? void 0 : _a.destroy();
      clearTimeout(timer);
    };
  }, [
    shouldInitEditor,
    showLineNumbers,
    wrapContent,
    themeId,
    sortedDecorators
  ]);
  useEffect(() => {
    if (cmView.current && editorState === "dirty" && window.matchMedia("(min-width: 768px)").matches) {
      cmView.current.contentDOM.focus();
    }
  }, []);
  useEffect(() => {
    if (cmView.current && code !== internalCode) {
      const view = cmView.current;
      view.dispatch({
        changes: { from: 0, to: view.state.doc.length, insert: code },
        selection: view.state.selection
      });
    }
  }, [code]);
  useEffect(function messageToInlineError() {
    if (!showInlineErrors)
      return;
    const unsubscribe = listen((message) => {
      const view = cmView.current;
      if (message.type === "success") {
        view == null ? void 0 : view.dispatch({
          annotations: [
            {
              type: "clean-error",
              value: null
            }
          ],
          changes: {
            from: 0,
            to: view.state.doc.length,
            insert: view.state.doc
          },
          selection: view.state.selection
        });
      }
      if (message.type === "action" && message.action === "show-error" && "line" in message) {
        view == null ? void 0 : view.dispatch({
          annotations: [
            {
              type: "error",
              value: message.line
            }
          ]
        });
      }
    });
    return () => unsubscribe();
  }, [listen, showInlineErrors]);
  const handleContainerKeyDown = (evt) => {
    if (evt.key === "Enter" && cmView.current) {
      evt.preventDefault();
      cmView.current.contentDOM.focus();
    }
  };
  const combinedRef = useCombinedRefs(wrapper, ref);
  if (readOnly) {
    return /* @__PURE__ */ createElement8("pre", {
      ref: combinedRef,
      className: c("cm", editorState, languageExtension),
      translate: "no"
    }, /* @__PURE__ */ createElement8("code", {
      className: c("pre-placeholder")
    }, code), readOnly && showReadOnly && /* @__PURE__ */ createElement8("span", {
      className: c("read-only")
    }, "Read-only"));
  }
  return /* @__PURE__ */ createElement8("div", {
    ref: combinedRef,
    "aria-describedby": `enter-instructions-${ariaId.current}`,
    "aria-label": filePath ? `Code Editor for ${getFileName(filePath)}` : `Code Editor`,
    className: c("cm", editorState, languageExtension),
    onKeyDown: handleContainerKeyDown,
    role: "group",
    tabIndex: 0,
    translate: "no"
  }, /* @__PURE__ */ createElement8("pre", {
    className: c("pre-placeholder"),
    style: {
      marginLeft: showLineNumbers ? 28 : 0
    }
  }, code), /* @__PURE__ */ createElement8(Fragment, null, /* @__PURE__ */ createElement8("p", {
    id: `enter-instructions-${ariaId.current}`,
    style: { display: "none" }
  }, "To enter the code editing mode, press Enter. To exit the edit mode, press Escape"), /* @__PURE__ */ createElement8("p", {
    id: `exit-instructions-${ariaId.current}`,
    style: { display: "none" }
  }, "You are editing the code. To exit the edit mode, press Escape")));
});

// src/components/CodeEditor/index.tsx
var SandpackCodeEditor = forwardRef2(({
  customStyle,
  showTabs,
  showLineNumbers = false,
  showInlineErrors = false,
  showRunButton = true,
  wrapContent = false,
  closableTabs = false,
  initMode,
  extensions,
  extensionsKeymap,
  id,
  readOnly,
  showReadOnly
}, ref) => {
  const { sandpack } = useSandpack();
  const { code, updateCode, readOnly: readOnlyFile } = useActiveCode();
  const { activePath, status, editorState } = sandpack;
  const shouldShowTabs = showTabs != null ? showTabs : sandpack.openPaths.length > 1;
  const c = useClasser7("sp");
  const handleCodeUpdate = (newCode) => {
    updateCode(newCode);
  };
  return /* @__PURE__ */ createElement9(SandpackStack, {
    customStyle
  }, shouldShowTabs && /* @__PURE__ */ createElement9(FileTabs, {
    closableTabs
  }), /* @__PURE__ */ createElement9("div", {
    className: c("code-editor")
  }, /* @__PURE__ */ createElement9(CodeMirror, {
    key: activePath,
    ref,
    code,
    editorState,
    extensions,
    extensionsKeymap,
    filePath: activePath,
    id,
    initMode: initMode || sandpack.initMode,
    onCodeUpdate: handleCodeUpdate,
    readOnly: readOnly || readOnlyFile,
    showInlineErrors,
    showLineNumbers,
    showReadOnly,
    wrapContent
  }), showRunButton && status === "idle" ? /* @__PURE__ */ createElement9(RunButton, null) : null));
});

// src/components/Preview/index.tsx
import { useClasser as useClasser13 } from "@code-hike/classer";
import {
  createElement as createElement16,
  useEffect as useEffect6,
  useRef as useRef3,
  useState as useState5
} from "react";

// src/common/ErrorOverlay.tsx
import { useClasser as useClasser8 } from "@code-hike/classer";
import {
  createElement as createElement10
} from "react";

// src/hooks/useErrorMessage.ts
import {
  useEffect as useEffect2
} from "react";
var useErrorMessage = () => {
  var _a;
  const { sandpack } = useSandpack();
  const { error } = sandpack;
  useEffect2(() => {
    sandpack.errorScreenRegisteredRef.current = true;
  }, []);
  return (_a = error == null ? void 0 : error.message) != null ? _a : null;
};

// src/common/ErrorOverlay.tsx
var ErrorOverlay = ({ children }) => {
  const errorMessage = useErrorMessage();
  const c = useClasser8("sp");
  if (!errorMessage && !children) {
    return null;
  }
  return /* @__PURE__ */ createElement10("div", {
    className: c("overlay", "error"),
    translate: "no"
  }, /* @__PURE__ */ createElement10("div", {
    className: c("error-message")
  }, errorMessage || children));
};

// src/common/LoadingOverlay.tsx
import { useClasser as useClasser10 } from "@code-hike/classer";
import {
  createElement as createElement13
} from "react";

// src/hooks/useLoadingOverlayState.ts
import {
  useEffect as useEffect3,
  useState as useState2
} from "react";
var FADE_ANIMATION_DURATION = 200;
var useLoadingOverlayState = (clientId, externalLoading) => {
  const { sandpack, listen } = useSandpack();
  const [state, setState] = useState2("LOADING");
  useEffect3(() => {
    sandpack.loadingScreenRegisteredRef.current = true;
    const unsubscribe = listen((message) => {
      if (message.type === "start" && message.firstLoad === true) {
        setState("LOADING");
      }
      if (message.type === "done") {
        setState((prev) => {
          return prev === "LOADING" ? "PRE_FADING" : "HIDDEN";
        });
      }
    }, clientId);
    return () => {
      unsubscribe();
    };
  }, [clientId, sandpack.status === "idle"]);
  useEffect3(() => {
    let fadeTimeout;
    if (state === "PRE_FADING" && !externalLoading) {
      setState("FADING");
    } else if (state === "FADING") {
      fadeTimeout = setTimeout(() => setState("HIDDEN"), FADE_ANIMATION_DURATION);
    }
    return () => {
      clearTimeout(fadeTimeout);
    };
  }, [state, externalLoading]);
  if (sandpack.status === "timeout") {
    return "TIMEOUT";
  }
  if (sandpack.status !== "running") {
    return "HIDDEN";
  }
  return state;
};

// src/common/OpenInCodeSandboxButton/OpenInCodeSandboxButton.tsx
import { useClasser as useClasser9 } from "@code-hike/classer";
import {
  createElement as createElement12
} from "react";

// src/common/OpenInCodeSandboxButton/UnstyledOpenInCodeSandboxButton.tsx
import { getParameters } from "codesandbox-import-utils/lib/api/define";
import {
  createElement as createElement11,
  useEffect as useEffect4,
  useRef as useRef2,
  useState as useState3
} from "react";
var CSB_URL = "https://codesandbox.io/api/v1/sandboxes/define";
var getFileParameters = (files, environment) => {
  const normalizedFiles = Object.keys(files).reduce((prev, next) => {
    const fileName = next.replace("/", "");
    const value = {
      content: files[next].code,
      isBinary: false
    };
    return { ...prev, [fileName]: value };
  }, {});
  return getParameters({
    files: normalizedFiles,
    ...environment ? { template: environment } : null
  });
};
var UnstyledOpenInCodeSandboxButton = ({ children, ...props }) => {
  var _a, _b, _c;
  const { sandpack } = useSandpack();
  const formRef = useRef2(null);
  const [paramsValues, setParamsValues] = useState3();
  useEffect4(function debounce() {
    const timer = setTimeout(() => {
      const params = getFileParameters(sandpack.files, sandpack.environment);
      const searchParams = new URLSearchParams({
        parameters: params,
        query: new URLSearchParams({
          file: sandpack.activePath,
          "from-sandpack": "true"
        }).toString()
      });
      setParamsValues(searchParams);
    }, 600);
    return () => {
      clearTimeout(timer);
    };
  }, [sandpack.activePath, sandpack.environment, sandpack.files]);
  useEffect4(function registerUsage() {
    sandpack.openInCSBRegisteredRef.current = true;
  }, []);
  if (((_c = (_b = (_a = paramsValues == null ? void 0 : paramsValues.get) == null ? void 0 : _a.call(paramsValues, "parameters")) == null ? void 0 : _b.length) != null ? _c : 0) > 1500) {
    return /* @__PURE__ */ createElement11("button", {
      onClick: () => {
        var _a2;
        return (_a2 = formRef.current) == null ? void 0 : _a2.submit();
      },
      title: "Open in CodeSandbox",
      ...props
    }, /* @__PURE__ */ createElement11("form", {
      ref: formRef,
      action: CSB_URL,
      method: "POST",
      target: "_blank"
    }, Array.from(paramsValues, ([k, v]) => /* @__PURE__ */ createElement11("input", {
      key: k,
      name: k,
      type: "hidden",
      value: v
    }))), children);
  }
  return /* @__PURE__ */ createElement11("a", {
    href: `${CSB_URL}?${paramsValues == null ? void 0 : paramsValues.toString()}`,
    rel: "noreferrer noopener",
    target: "_blank",
    title: "Open in CodeSandbox",
    ...props
  }, children);
};

// src/common/OpenInCodeSandboxButton/OpenInCodeSandboxButton.tsx
var OpenInCodeSandboxButton = () => {
  const c = useClasser9("sp");
  return /* @__PURE__ */ createElement12(UnstyledOpenInCodeSandboxButton, {
    className: c("button", "icon-standalone")
  }, /* @__PURE__ */ createElement12(ExportIcon, null));
};

// src/common/LoadingOverlay.tsx
var LoadingOverlay = ({
  clientId,
  loading
}) => {
  const loadingOverlayState = useLoadingOverlayState(clientId, loading);
  const c = useClasser10("sp");
  if (loadingOverlayState === "HIDDEN") {
    return null;
  }
  if (loadingOverlayState === "TIMEOUT") {
    return /* @__PURE__ */ createElement13("div", {
      className: c("overlay", "error")
    }, /* @__PURE__ */ createElement13("div", {
      className: c("error-message")
    }, "Unable to establish connection with the sandpack bundler. Make sure you are online or try again later. If the problem persists, please report it via", " ", /* @__PURE__ */ createElement13("a", {
      className: c("error-message"),
      href: "mailto:hello@codesandbox.io?subject=Sandpack Timeout Error"
    }, "email"), " ", "or submit an issue on", " ", /* @__PURE__ */ createElement13("a", {
      className: c("error-message"),
      href: "https://github.com/codesandbox/sandpack/issues",
      rel: "noreferrer noopener",
      target: "_blank"
    }, "GitHub.")));
  }
  const stillLoading = loadingOverlayState === "LOADING" || loadingOverlayState === "PRE_FADING";
  return /* @__PURE__ */ createElement13("div", {
    className: c("overlay", "loading"),
    style: {
      opacity: stillLoading ? 1 : 0,
      transition: `opacity ${FADE_ANIMATION_DURATION}ms ease-out`
    }
  }, /* @__PURE__ */ createElement13("div", {
    className: "sp-cube-wrapper",
    title: "Open in CodeSandbox"
  }, /* @__PURE__ */ createElement13(OpenInCodeSandboxButton, null), /* @__PURE__ */ createElement13("div", {
    className: "sp-cube"
  }, /* @__PURE__ */ createElement13("div", {
    className: "sp-sides"
  }, /* @__PURE__ */ createElement13("div", {
    className: "sp-top"
  }), /* @__PURE__ */ createElement13("div", {
    className: "sp-right"
  }), /* @__PURE__ */ createElement13("div", {
    className: "sp-bottom"
  }), /* @__PURE__ */ createElement13("div", {
    className: "sp-left"
  }), /* @__PURE__ */ createElement13("div", {
    className: "sp-front"
  }), /* @__PURE__ */ createElement13("div", {
    className: "sp-back"
  })))));
};

// src/components/Navigator/index.tsx
import { useClasser as useClasser11 } from "@code-hike/classer";
import {
  createElement as createElement14,
  useEffect as useEffect5,
  useState as useState4
} from "react";

// src/components/Navigator/utils.tsx
var splitUrl = (url) => {
  const match = url.match(/(https?:\/\/.*?)\//);
  if (match && match[1]) {
    return [match[1], url.replace(match[1], "")];
  }
  return [url, "/"];
};

// src/components/Navigator/index.tsx
var Navigator = ({
  clientId,
  onURLChange
}) => {
  var _a;
  const [baseUrl, setBaseUrl] = useState4("");
  const { sandpack, dispatch, listen } = useSandpack();
  const [relativeUrl, setRelativeUrl] = useState4((_a = sandpack.startRoute) != null ? _a : "/");
  const [backEnabled, setBackEnabled] = useState4(false);
  const [forwardEnabled, setForwardEnabled] = useState4(false);
  const c = useClasser11("sp");
  useEffect5(() => {
    const unsub = listen((message) => {
      if (message.type === "urlchange") {
        const { url, back, forward } = message;
        const [newBaseUrl, newRelativeUrl] = splitUrl(url);
        setBaseUrl(newBaseUrl);
        setRelativeUrl(newRelativeUrl);
        setBackEnabled(back);
        setForwardEnabled(forward);
      }
    }, clientId);
    return () => unsub();
  }, []);
  const handleInputChange = (e) => {
    const path = e.target.value.startsWith("/") ? e.target.value : `/${e.target.value}`;
    setRelativeUrl(path);
  };
  const handleKeyDown = (e) => {
    if (e.code === "Enter") {
      e.preventDefault();
      e.stopPropagation();
      if (typeof onURLChange === "function") {
        onURLChange(baseUrl + e.currentTarget.value);
      }
    }
  };
  const handleRefresh = () => {
    dispatch({ type: "refresh" });
  };
  const handleBack = () => {
    dispatch({ type: "urlback" });
  };
  const handleForward = () => {
    dispatch({ type: "urlforward" });
  };
  return /* @__PURE__ */ createElement14("div", {
    className: c("navigator")
  }, /* @__PURE__ */ createElement14("button", {
    "aria-label": "Go back one page",
    className: c("button", "icon"),
    disabled: !backEnabled,
    onClick: handleBack,
    type: "button"
  }, /* @__PURE__ */ createElement14(BackwardIcon, null)), /* @__PURE__ */ createElement14("button", {
    "aria-label": "Go forward one page",
    className: c("button", "icon"),
    disabled: !forwardEnabled,
    onClick: handleForward,
    type: "button"
  }, /* @__PURE__ */ createElement14(ForwardIcon, null)), /* @__PURE__ */ createElement14("button", {
    "aria-label": "Refresh page",
    className: c("button", "icon"),
    onClick: handleRefresh,
    type: "button"
  }, /* @__PURE__ */ createElement14(RefreshIcon, null)), /* @__PURE__ */ createElement14("input", {
    "aria-label": "Current Sandpack URL",
    className: c("input"),
    name: "Current Sandpack URL",
    onChange: handleInputChange,
    onKeyDown: handleKeyDown,
    type: "text",
    value: relativeUrl
  }));
};

// src/components/Preview/RefreshButton.tsx
import { useClasser as useClasser12 } from "@code-hike/classer";
import {
  createElement as createElement15
} from "react";

// src/hooks/useSandpackNavigation.ts
var useSandpackNavigation = (clientId) => {
  const { dispatch } = useSandpack();
  return {
    refresh: () => dispatch({ type: "refresh" }, clientId),
    back: () => dispatch({ type: "urlback" }, clientId),
    forward: () => dispatch({ type: "urlforward" }, clientId)
  };
};

// src/components/Preview/RefreshButton.tsx
var RefreshButton = ({
  clientId
}) => {
  const { refresh } = useSandpackNavigation(clientId);
  const c = useClasser12("sp");
  return /* @__PURE__ */ createElement15("button", {
    className: c("button", "icon-standalone"),
    onClick: refresh,
    title: "Refresh Sandpack",
    type: "button"
  }, /* @__PURE__ */ createElement15(RefreshIcon, null));
};

// src/components/Preview/index.tsx
var SandpackPreview = ({
  customStyle,
  showNavigator = false,
  showRefreshButton = true,
  showOpenInCodeSandbox = true,
  showSandpackErrorOverlay = true,
  viewportSize = "auto",
  viewportOrientation = "portrait"
}) => {
  const { sandpack, listen } = useSandpack();
  const [iframeComputedHeight, setComputedAutoHeight] = useState5(null);
  const {
    status,
    registerBundler,
    unregisterBundler,
    errorScreenRegisteredRef,
    openInCSBRegisteredRef,
    loadingScreenRegisteredRef
  } = sandpack;
  const c = useClasser13("sp");
  const clientId = useRef3(generateRandomId());
  const iframeRef = useRef3(null);
  openInCSBRegisteredRef.current = true;
  errorScreenRegisteredRef.current = true;
  loadingScreenRegisteredRef.current = true;
  useEffect6(() => {
    const iframeElement = iframeRef.current;
    const clientIdValue = clientId.current;
    registerBundler(iframeElement, clientIdValue);
    const unsubscribe = listen((message) => {
      if (message.type === "resize") {
        setComputedAutoHeight(message.height);
      }
    }, clientIdValue);
    return () => {
      unsubscribe();
      unregisterBundler(clientIdValue);
    };
  }, []);
  const handleNewURL = (newUrl) => {
    if (!iframeRef.current) {
      return;
    }
    iframeRef.current.src = newUrl;
  };
  const viewportStyle = computeViewportSize(viewportSize, viewportOrientation);
  return /* @__PURE__ */ createElement16(SandpackStack, {
    customStyle: {
      ...customStyle,
      ...viewportStyle
    }
  }, showNavigator ? /* @__PURE__ */ createElement16(Navigator, {
    clientId: clientId.current,
    onURLChange: handleNewURL
  }) : null, /* @__PURE__ */ createElement16("div", {
    className: c("preview-container")
  }, /* @__PURE__ */ createElement16("iframe", {
    ref: iframeRef,
    className: c("preview-iframe"),
    style: {
      height: viewportSize === "auto" && iframeComputedHeight ? iframeComputedHeight : void 0
    },
    title: "Sandpack Preview"
  }), showSandpackErrorOverlay ? /* @__PURE__ */ createElement16(ErrorOverlay, null) : null, /* @__PURE__ */ createElement16("div", {
    className: c("preview-actions")
  }, !showNavigator && showRefreshButton && status === "running" ? /* @__PURE__ */ createElement16(RefreshButton, {
    clientId: clientId.current
  }) : null, showOpenInCodeSandbox ? /* @__PURE__ */ createElement16(OpenInCodeSandboxButton, null) : null), /* @__PURE__ */ createElement16(LoadingOverlay, {
    clientId: clientId.current
  })));
};
var VIEWPORT_SIZE_PRESET_MAP = {
  "iPhone X": { x: 375, y: 812 },
  iPad: { x: 768, y: 1024 },
  "Pixel 2": { x: 411, y: 731 },
  "Moto G4": { x: 360, y: 640 },
  "Surface Duo": { x: 540, y: 720 }
};
var computeViewportSize = (viewport, orientation) => {
  if (viewport === "auto") {
    return {};
  }
  if (typeof viewport === "string") {
    const { x, y } = VIEWPORT_SIZE_PRESET_MAP[viewport];
    return orientation === "portrait" ? { width: x, height: y } : { width: y, height: x };
  }
  return viewport;
};

// src/presets/Sandpack.tsx
var Sandpack2 = (props) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _A, _B, _C, _D;
  const userInputSetup = props.files ? {
    ...props.customSetup,
    files: {
      ...(_a = props.customSetup) == null ? void 0 : _a.files,
      ...props.files
    }
  } : props.customSetup;
  const previewOptions = {
    showNavigator: (_b = props.options) == null ? void 0 : _b.showNavigator
  };
  const codeEditorOptions = {
    showTabs: (_c = props.options) == null ? void 0 : _c.showTabs,
    showLineNumbers: (_d = props.options) == null ? void 0 : _d.showLineNumbers,
    showInlineErrors: (_e = props.options) == null ? void 0 : _e.showInlineErrors,
    wrapContent: (_f = props.options) == null ? void 0 : _f.wrapContent,
    closableTabs: (_g = props.options) == null ? void 0 : _g.closableTabs,
    initMode: (_h = props.options) == null ? void 0 : _h.initMode,
    extensions: (_j = (_i = props.options) == null ? void 0 : _i.codeEditor) == null ? void 0 : _j.extensions,
    extensionsKeymap: (_l = (_k = props.options) == null ? void 0 : _k.codeEditor) == null ? void 0 : _l.extensionsKeymap,
    readOnly: (_m = props.options) == null ? void 0 : _m.readOnly,
    showReadOnly: (_n = props.options) == null ? void 0 : _n.showReadOnly
  };
  const providerOptions = {
    openPaths: (_o = props.options) == null ? void 0 : _o.openPaths,
    activePath: (_p = props.options) == null ? void 0 : _p.activePath,
    recompileMode: (_q = props.options) == null ? void 0 : _q.recompileMode,
    recompileDelay: (_r = props.options) == null ? void 0 : _r.recompileDelay,
    autorun: (_t = (_s = props.options) == null ? void 0 : _s.autorun) != null ? _t : true,
    bundlerURL: (_u = props.options) == null ? void 0 : _u.bundlerURL,
    startRoute: (_v = props.options) == null ? void 0 : _v.startRoute,
    skipEval: (_w = props.options) == null ? void 0 : _w.skipEval,
    fileResolver: (_x = props.options) == null ? void 0 : _x.fileResolver,
    initMode: (_y = props.options) == null ? void 0 : _y.initMode,
    initModeObserverOptions: (_z = props.options) == null ? void 0 : _z.initModeObserverOptions,
    externalResources: (_A = props.options) == null ? void 0 : _A.externalResources
  };
  const editorPart = ((_B = props.options) == null ? void 0 : _B.editorWidthPercentage) || 50;
  const previewPart = 100 - editorPart;
  const editorHeight = (_C = props.options) == null ? void 0 : _C.editorHeight;
  return /* @__PURE__ */ createElement17(SandpackProvider, {
    customSetup: userInputSetup,
    template: props.template,
    ...providerOptions
  }, /* @__PURE__ */ createElement17(ClasserProvider, {
    classes: (_D = props.options) == null ? void 0 : _D.classes
  }, /* @__PURE__ */ createElement17(SandpackLayout, {
    theme: props.theme
  }, /* @__PURE__ */ createElement17(SandpackCodeEditor, {
    ...codeEditorOptions,
    customStyle: {
      height: editorHeight,
      flexGrow: editorPart,
      flexShrink: editorPart,
      minWidth: 700 * (editorPart / (previewPart + editorPart))
    }
  }), /* @__PURE__ */ createElement17(SandpackPreview, {
    ...previewOptions,
    customStyle: {
      height: editorHeight,
      flexGrow: previewPart,
      flexShrink: previewPart,
      minWidth: 700 * (previewPart / (previewPart + editorPart))
    }
  }))));
};

// src/presets/SandpackRunner.tsx
import { ClasserProvider as ClasserProvider2 } from "@code-hike/classer";
import {
  createElement as createElement18
} from "react";
var SandpackRunner = ({
  code,
  template,
  customSetup,
  options,
  theme
}) => {
  var _a;
  const mainFile = (_a = customSetup == null ? void 0 : customSetup.main) != null ? _a : SANDBOX_TEMPLATES[template || "vanilla"].main;
  const userInput = code ? {
    ...customSetup,
    files: {
      ...customSetup == null ? void 0 : customSetup.files,
      [mainFile]: code
    }
  } : customSetup;
  return /* @__PURE__ */ createElement18(SandpackProvider, {
    bundlerURL: options == null ? void 0 : options.bundlerUrl,
    customSetup: userInput,
    startRoute: options == null ? void 0 : options.startRoute,
    template
  }, /* @__PURE__ */ createElement18(ClasserProvider2, {
    classes: options == null ? void 0 : options.classes
  }, /* @__PURE__ */ createElement18(SandpackLayout, {
    theme
  }, /* @__PURE__ */ createElement18(SandpackPreview, {
    showNavigator: options == null ? void 0 : options.showNavigator
  }))));
};

// src/components/CodeViewer/index.tsx
import {
  createElement as createElement19,
  forwardRef as forwardRef3
} from "react";
var SandpackCodeViewer = forwardRef3(({
  showTabs,
  showLineNumbers,
  decorators,
  code: propCode,
  initMode,
  wrapContent
}, ref) => {
  const { sandpack } = useSandpack();
  const { code } = useActiveCode();
  const shouldShowTabs = showTabs != null ? showTabs : sandpack.openPaths.length > 1;
  return /* @__PURE__ */ createElement19(SandpackStack, null, shouldShowTabs ? /* @__PURE__ */ createElement19(FileTabs, null) : null, /* @__PURE__ */ createElement19(CodeMirror, {
    ref,
    code: propCode != null ? propCode : code,
    decorators,
    filePath: sandpack.activePath,
    initMode: initMode || sandpack.initMode,
    showLineNumbers,
    showReadOnly: false,
    wrapContent,
    readOnly: true
  }), sandpack.status === "idle" ? /* @__PURE__ */ createElement19(RunButton, null) : null);
});

// src/components/TranspiledCode/index.tsx
import { useClasser as useClasser14 } from "@code-hike/classer";
import {
  createElement as createElement20,
  useEffect as useEffect7,
  useRef as useRef4
} from "react";

// src/hooks/useTranspiledCode.ts
function getTranspiledCode(sandpack) {
  var _a, _b;
  const { activePath, bundlerState } = sandpack;
  if (bundlerState == null) {
    return null;
  }
  const tModule = bundlerState.transpiledModules[activePath + ":"];
  return (_b = (_a = tModule == null ? void 0 : tModule.source) == null ? void 0 : _a.compiledCode) != null ? _b : null;
}
var useTranspiledCode = () => {
  const { sandpack } = useSandpack();
  if (sandpack.status !== "running") {
    return null;
  }
  return getTranspiledCode(sandpack);
};

// src/components/TranspiledCode/index.tsx
var SandpackTranspiledCode = (props) => {
  const { sandpack } = useSandpack();
  const transpiledCode = useTranspiledCode();
  const c = useClasser14("sp");
  const hiddenIframeRef = useRef4(null);
  useEffect7(() => {
    const hiddenIframe = hiddenIframeRef.current;
    if (hiddenIframe) {
      sandpack.registerBundler(hiddenIframe, "hidden");
    }
    return () => {
      sandpack.unregisterBundler("hidden");
    };
  }, []);
  return /* @__PURE__ */ createElement20("div", {
    className: c("transpiled-code")
  }, transpiledCode && /* @__PURE__ */ createElement20(SandpackCodeViewer, {
    code: transpiledCode,
    initMode: sandpack.initMode,
    ...props
  }), /* @__PURE__ */ createElement20("iframe", {
    ref: hiddenIframeRef,
    style: { display: "none" },
    title: "transpiled sandpack code"
  }), /* @__PURE__ */ createElement20(ErrorOverlay, null), /* @__PURE__ */ createElement20(LoadingOverlay, {
    clientId: "hidden"
  }));
};

// src/components/ReactDevTools/index.tsx
import { useClasser as useClasser15 } from "@code-hike/classer";
import {
  createElement as createElement21,
  useEffect as useEffect8,
  useRef as useRef5,
  useState as useState6
} from "react";
var SandpackReactDevTools = ({
  clientId,
  theme,
  ...props
}) => {
  const { listen, sandpack } = useSandpack();
  const { theme: sandpackTheme } = useSandpackTheme();
  const c = useClasser15("sp");
  const reactDevtools = useRef5();
  const [ReactDevTools, setDevTools] = useState6(null);
  useEffect8(() => {
    import("react-devtools-inline/frontend").then((module) => {
      reactDevtools.current = module;
    });
  }, []);
  useEffect8(() => {
    const unsubscribe = listen((msg) => {
      var _a;
      if (msg.type === "activate-react-devtools") {
        const client = clientId ? sandpack.clients[clientId] : Object.values(sandpack.clients)[0];
        const contentWindow = (_a = client == null ? void 0 : client.iframe) == null ? void 0 : _a.contentWindow;
        if (reactDevtools.current && contentWindow) {
          setDevTools(reactDevtools.current.initialize(contentWindow));
        }
      }
    });
    return unsubscribe;
  }, [reactDevtools, clientId, listen, sandpack.clients]);
  useEffect8(() => {
    sandpack.registerReactDevTools("legacy");
  }, []);
  if (!ReactDevTools)
    return null;
  const getBrowserTheme = () => {
    if (theme)
      return theme;
    const isDarkTheme = isDarkColor(sandpackTheme.palette.defaultBackground);
    return isDarkTheme ? "dark" : "light";
  };
  return /* @__PURE__ */ createElement21("div", {
    className: c("devtools"),
    ...props
  }, /* @__PURE__ */ createElement21(ReactDevTools, {
    browserTheme: getBrowserTheme()
  }));
};

// src/index.ts
export * from "@code-hike/classer";
export {
  BackwardIcon,
  CloseIcon,
  CodeMirror as CodeEditor,
  DirectoryIcon,
  ErrorOverlay,
  ExportIcon,
  FADE_ANIMATION_DURATION,
  FileIcon,
  FileTabs,
  ForwardIcon,
  LoadingOverlay,
  Navigator,
  OpenInCodeSandboxButton,
  RefreshButton,
  RefreshIcon,
  RunButton,
  RunIcon,
  SANDPACK_THEMES,
  Sandpack2 as Sandpack,
  SandpackCodeEditor,
  SandpackCodeViewer,
  SandpackConsumer,
  SandpackLayout,
  SandpackPreview,
  SandpackProvider,
  Sandpack as SandpackReactContext,
  SandpackReactDevTools,
  SandpackRunner,
  SandpackStack,
  SandpackThemeConsumer,
  SandpackThemeContext,
  SandpackThemeProvider,
  SandpackTranspiledCode,
  UnstyledOpenInCodeSandboxButton,
  aquaBlueTheme,
  createThemeObject,
  defaultDark,
  defaultLight,
  getSyntaxStyle,
  getThemeStyleSheet,
  githubLightTheme,
  monokaiProTheme,
  nightOwlTheme,
  sandpackDark,
  useActiveCode,
  useErrorMessage,
  useLoadingOverlayState,
  useSandpack,
  useSandpackNavigation,
  useSandpackTheme,
  useTranspiledCode
};
//# sourceMappingURL=index.js.map
