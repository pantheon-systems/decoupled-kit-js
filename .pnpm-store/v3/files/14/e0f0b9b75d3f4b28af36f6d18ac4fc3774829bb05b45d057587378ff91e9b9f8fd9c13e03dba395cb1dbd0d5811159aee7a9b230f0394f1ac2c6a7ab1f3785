{"version":3,"sources":["../../src/query/error-parser.ts"],"names":["errorParser","message","filePath","undefined","location","error","handlers","regex","cb","match","id","context","sourceMessage","variableName","variableType","inputType","expectedType","fieldName","fieldType","field","type","desc","value","received","variable","operation","Error","structured","matched","locInGraphQlToLocInFile","locationOfGraphQLDocInSourceFile","graphqlLocation","line","start","column"],"mappings":"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","sourcesContent":["import { IMatch } from \"../types\"\nimport { SourceLocation } from \"graphql\"\n\ninterface IErrorParser {\n  message: string\n  filePath: string | undefined\n  location:\n    | {\n        start: SourceLocation\n        end?: SourceLocation\n      }\n    | undefined\n  error?: Error\n}\n\nconst errorParser = ({\n  message,\n  filePath = undefined,\n  location = undefined,\n  error = undefined,\n}: IErrorParser): IMatch => {\n  // Handle GraphQL errors. A list of regexes to match certain\n  // errors to specific callbacks\n  const handlers = [\n    {\n      regex: /Variable \"(.+)\" of required type \"(.+)\" was not provided\\./m,\n      cb: (match): IMatch => {\n        return {\n          id: `85920`,\n          context: {\n            sourceMessage: match[0],\n            variableName: match[1],\n            variableType: match[2],\n          },\n        }\n      },\n    },\n    {\n      regex:\n        /Variable \"(.+)\" of type \"(.+)\" used in position expecting type \"(.+)\"\\./m,\n      cb: (match): IMatch => {\n        return {\n          id: `85921`,\n          context: {\n            sourceMessage: match[0],\n            variableName: match[1],\n            inputType: match[2],\n            expectedType: match[3],\n          },\n        }\n      },\n    },\n    {\n      regex:\n        /Field \"(.+)\" must not have a selection since type \"(.+)\" has no subfields\\./m,\n      cb: (match): IMatch => {\n        return {\n          id: `85922`,\n          context: {\n            sourceMessage: match[0],\n            fieldName: match[1],\n            fieldType: match[2],\n          },\n        }\n      },\n    },\n    {\n      regex: /Cannot query field \"(.+)\" on type \"(.+)\"\\./m,\n      cb: (match): IMatch => {\n        return {\n          id: `85923`,\n          context: {\n            sourceMessage: match[0],\n            field: match[1],\n            type: match[2],\n          },\n        }\n      },\n    },\n    {\n      regex: /(.+) cannot represent (.+) value: \"(.+)\"/m,\n      cb: (match): IMatch => {\n        return {\n          id: `85924`,\n          context: {\n            sourceMessage: match[0],\n            type: match[1],\n            desc: match[2],\n            value: match[3],\n          },\n        }\n      },\n    },\n    {\n      regex: /Cannot return null for non-nullable field (.+)/m,\n      cb: (match): IMatch => {\n        return {\n          id: `85925`,\n          context: {\n            sourceMessage: match[0],\n            field: match[1],\n          },\n        }\n      },\n    },\n    {\n      regex: /Must provide Source\\. Received: (.+)/m,\n      cb: (match): IMatch => {\n        return {\n          id: `85926`,\n          context: {\n            sourceMessage: match[0],\n            received: match[1],\n          },\n        }\n      },\n    },\n    {\n      regex: /Variable \"(.+)\" is never used in operation \"(.+)\".*/ms,\n      cb: (match): IMatch => {\n        return {\n          id: `85927`,\n          context: {\n            sourceMessage: match[0],\n            variable: match[1],\n            operation: match[2],\n          },\n        }\n      },\n    },\n    // Match anything with a generic catch-all error handler\n    {\n      regex: /[\\s\\S]*/gm,\n      cb: (match): IMatch => {\n        if (error instanceof Error) {\n          return {\n            id: `85901`,\n            error, // show stack trace\n            context: { sourceMessage: match[0] },\n          }\n        } else {\n          return {\n            id: `85901`,\n            context: { sourceMessage: match[0] },\n          }\n        }\n      },\n    },\n  ]\n\n  let structured\n\n  for (const { regex, cb } of handlers) {\n    const matched = message?.match(regex)\n    if (matched) {\n      structured = {\n        ...cb(matched),\n        ...{ location },\n        ...{ filePath },\n      }\n      break\n    }\n  }\n\n  return structured\n}\n\nexport default errorParser\n\ninterface ILocOfGraphQLDocInSrcFile {\n  start: SourceLocation\n  end: SourceLocation\n  fileName: boolean\n}\n\nexport const locInGraphQlToLocInFile = (\n  locationOfGraphQLDocInSourceFile: ILocOfGraphQLDocInSrcFile,\n  graphqlLocation: SourceLocation\n): SourceLocation => {\n  return {\n    line:\n      graphqlLocation.line + locationOfGraphQLDocInSourceFile.start.line - 1,\n    column:\n      (graphqlLocation.line === 1\n        ? locationOfGraphQLDocInSourceFile.start.column\n        : 0) + graphqlLocation.column,\n  }\n}\n"],"file":"error-parser.js"}