{"version":3,"sources":["../../src/datastore/datastore.ts"],"names":["dataStore","isLmdb","isLmdbStoreFlagSet","getDataStore","setupLmdbStore","require","setupInMemoryStore","isLmdbStore","detectLmdbStore","flagIsSet","Error","Boolean","process","env","GATSBY_EXPERIMENTAL_LMDB_STORE","emitter","on"],"mappings":";;;;;;;AACA;;AAEA,IAAIA,SAAJ;AACA,IAAIC,MAAM,GAAGC,kBAAkB,EAA/B;;AAEO,SAASC,YAAT,GAAoC;AACzC,MAAI,CAACH,SAAL,EAAgB;AACd,QAAIC,MAAJ,EAAY;AACV,YAAM;AAAEG,QAAAA;AAAF,UAAqBC,OAAO,CAAE,uBAAF,CAAlC;;AACAL,MAAAA,SAAS,GAAGI,cAAc,EAA1B;AACD,KAHD,MAGO;AACL,YAAM;AAAEE,QAAAA;AAAF,UAAyBD,OAAO,CAAE,iCAAF,CAAtC;;AACAL,MAAAA,SAAS,GAAGM,kBAAkB,EAA9B;AACD;AACF;;AACD,SAAON,SAAP;AACD;;AAEM,SAASO,WAAT,GAAgC;AACrC,SAAON,MAAP;AACD;;AAEM,SAASO,eAAT,GAAoC;AACzC,QAAMC,SAAS,GAAGP,kBAAkB,EAApC;;AAEA,MAAIF,SAAS,IAAIC,MAAM,KAAKQ,SAA5B,EAAuC;AACrC,UAAM,IAAIC,KAAJ,CACH,uFAAD,GACG,oBAAmBT,MAAM,GAAI,MAAJ,GAAa,OAAO,IADhD,GAEG,cAAaQ,SAAS,GAAI,MAAJ,GAAa,OAAO,GAHzC,CAAN;AAKD;;AACDR,EAAAA,MAAM,GAAGQ,SAAT;AACA,SAAOA,SAAP;AACD;;AAED,SAASP,kBAAT,GAAuC;AACrC,SACES,OAAO,CAACC,OAAO,CAACC,GAAR,CAAYC,8BAAb,CAAP,IACAF,OAAO,CAACC,GAAR,CAAYC,8BAAZ,KAAgD,OADhD,IAEAF,OAAO,CAACC,GAAR,CAAYC,8BAAZ,KAAgD,GAHlD;AAKD,C,CAED;AACA;AACA;;;AACAC,eAAQC,EAAR,CAAY,cAAZ,EAA2B,MAAM;AAC/Bb,EAAAA,YAAY;AACb,CAFD","sourcesContent":["import { IDataStore } from \"./types\"\nimport { emitter } from \"../redux\"\n\nlet dataStore: IDataStore\nlet isLmdb = isLmdbStoreFlagSet()\n\nexport function getDataStore(): IDataStore {\n  if (!dataStore) {\n    if (isLmdb) {\n      const { setupLmdbStore } = require(`./lmdb/lmdb-datastore`)\n      dataStore = setupLmdbStore()\n    } else {\n      const { setupInMemoryStore } = require(`./in-memory/in-memory-datastore`)\n      dataStore = setupInMemoryStore()\n    }\n  }\n  return dataStore\n}\n\nexport function isLmdbStore(): boolean {\n  return isLmdb\n}\n\nexport function detectLmdbStore(): boolean {\n  const flagIsSet = isLmdbStoreFlagSet()\n\n  if (dataStore && isLmdb !== flagIsSet) {\n    throw new Error(\n      `GATSBY_EXPERIMENTAL_LMDB_STORE flag had changed after the data store was initialized.` +\n        `(original value: ${isLmdb ? `true` : `false`}, ` +\n        `new value: ${flagIsSet ? `true` : `false`})`\n    )\n  }\n  isLmdb = flagIsSet\n  return flagIsSet\n}\n\nfunction isLmdbStoreFlagSet(): boolean {\n  return (\n    Boolean(process.env.GATSBY_EXPERIMENTAL_LMDB_STORE) &&\n    process.env.GATSBY_EXPERIMENTAL_LMDB_STORE !== `false` &&\n    process.env.GATSBY_EXPERIMENTAL_LMDB_STORE !== `0`\n  )\n}\n\n// It is possible that the store is not initialized yet when calling `DELETE_CACHE`.\n//  The code below ensures we wipe cache from the proper store\n//  (mostly relevant for tests)\nemitter.on(`DELETE_CACHE`, () => {\n  getDataStore()\n})\n"],"file":"datastore.js"}