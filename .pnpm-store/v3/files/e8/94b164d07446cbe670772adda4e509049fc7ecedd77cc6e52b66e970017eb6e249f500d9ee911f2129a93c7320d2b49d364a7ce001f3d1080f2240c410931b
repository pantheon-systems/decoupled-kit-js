{"version":3,"sources":["../../../../src/steps/source-nodes/create-nodes/process-node.js"],"names":["getPlaceholderUrlFromMediaItemNode","node","pluginOptions","placeholderSizeByWidth","placeholderSizeByName","mediaDetails","sizes","forEach","size","name","type","MediaItem","placeholderSizeName","Number","width","placeHolderSize","sourceUrl","findReferencedImageNodeIds","nodeString","lazyNodes","usingGatsbyV4OrGreater","matchedIds","map","match","subMatches","filter","id","getCheerioImgDbId","cheerioImg","dataAttributeId","attribs","class","wpImageClass","split","find","className","includes","wpImageClassDashArray","wpImageClassId","length","dbIdToMediaItemRelayId","dbId","getCheerioImgRelayId","ensureSrcHasHostname","src","wpUrl","protocol","host","url","parse","startsWith","pickNodeBySourceUrlOrCheerioImg","mediaItemNodes","possibleHtmlSrcs","imageNode","mediaItemNode","mediaItemUrl","replace","displayedFailedToRestoreMessage","fetchNodeHtmlImageMediaItemNodes","cheerioImages","helpers","nodeMetaByUrl","store","getState","imageNodes","previouslyCachedNodesByUrl","Promise","all","Object","entries","existingNode","getNode","reporter","warn","Boolean","mediaItemUrls","mediaItemNodesBySourceUrl","mediaItemDbIds","mediaItemRelayIds","relayId","mediaItemNodesById","referencedMediaItemNodeIds","createdNodes","htmlMatchesToMediaItemNodesMap","Map","htmlImgSrc","cacheCreatedFileNodeBySrc","set","getCheerioElementFromMatch","tag","parsedMatch","JSON","$","cheerio","load","xml","withDomLvl1","normalizeWhitespace","xmlMode","decodeEntities","cheerioElement","getCheerioElementsFromMatches","imgTagMatches","encodeURI","getLargestSizeFromSizesAttribute","sizesString","sizesStringsArray","reduce","largest","currentSizeString","maxWidth","substring","indexOf","trim","maxWidthNumber","noLargestAndMaxWidthIsANumber","isNaN","maxWidthIsALargerNumberThanLargest","findImgTagMaxWidthFromCheerioImg","widthNumber","largestSize","getFileNodeRelativePathname","fileNode","fileName","internal","contentDigest","base","getFileNodePublicPath","publicPath","path","join","process","cwd","copyFileToStaticAndReturnUrlPath","fs","existsSync","copy","absolutePath","dereference","err","console","error","relativeUrl","pathPrefix","filterMatches","hostname","wpHostname","isHostedInWp","isInJSON","dispatch","pushNodeMeta","modifiedGmt","imgSrcRemoteFileRegex","getImgSrcRemoteFileMatchesFromNodeString","getImgTagMatches","replaceNodeHtmlImages","html","useGatsbyImage","imageUrlMatches","htmlMatchesWithImageResizes","matchInfo","get","isMediaItemNode","__typename","localFile","extension","mimeType","mediaType","imgTagMaxWidth","mediaItemNodeWidth","fallbackImageMaxWidth","configuredMaxWidth","imageMaxWidth","quality","imageQuality","gatsbyTransformerSharpSupportsThisFileType","supportedExtensions","imageResize","placeholderUrl","imageUrl","height","filename","basename","file","layout","placeholder","placeholderType","actions","e","replaceIndex","matchResize","ReactGatsbyImage","gatsbyImageHydrationData","images","sources","image","alt","String","React","createElement","GatsbyImage","gatsbyImageStringRaw","ReactDOMServer","renderToString","stringify","gatsbyImageStringJSON","gatsbyImageString","replaceFileLinks","createStaticFiles","hrefMatches","mediaItemUrlsAndMatches","matchGroup","isWebUri","findReplaceMaps","parent","mediaItemMatchGroup","push","getWpLinkRegex","RegExp","replaceNodeHtmlLinks","wpLinkRegex","linkMatches","normalizedMatch","normalizedPath","thisMatchRegex","searchAndReplaceNodeStrings","Array","isArray","searchAndReplace","search","searchRegex","stringMatches","processNodeString","nodeStringFilters","nodeStringFilter","processNode","nodeMediaItemIdReferences","add","processedNodeString","processedNode"],"mappings":"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","sourcesContent":["/* eslint-disable no-useless-escape */\nimport { isWebUri } from \"valid-url\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport React from \"react\"\nimport ReactDOMServer from \"react-dom/server\"\nimport stringify from \"fast-json-stable-stringify\"\nimport execall from \"execall\"\nimport cheerio from \"cheerio\"\nimport url from \"url\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport { supportedExtensions } from \"gatsby-transformer-sharp/supported-extensions\"\nimport replaceAll from \"replaceall\"\nimport { usingGatsbyV4OrGreater } from \"~/utils/gatsby-version\"\nimport { gatsbyImageResolver } from \"gatsby-plugin-utils/dist/polyfill-remote-file/graphql/gatsby-image-resolver\"\n\nimport { formatLogMessage } from \"~/utils/format-log-message\"\n\nimport fetchReferencedMediaItemsAndCreateNodes, {\n  stripImageSizesFromUrl,\n} from \"../fetch-nodes/fetch-referenced-media-items\"\nimport btoa from \"btoa\"\nimport store from \"~/store\"\n\n/**\n * Takes in a MediaItem node from WPGraphQL as well as Gatsby plugin options and returns the correct placeholder URL for GatsbyImage\n *\n * The user must set the placeholderSizeName plugin option, or otherwise create an image size in WP where the name is `gatsby-image-placeholder`\n */\nexport function getPlaceholderUrlFromMediaItemNode(node, pluginOptions) {\n  let placeholderSizeByWidth\n  let placeholderSizeByName\n\n  node.mediaDetails?.sizes?.forEach(size => {\n    if (\n      size.name ===\n      (pluginOptions?.type?.MediaItem?.placeholderSizeName ||\n        `gatsby-image-placeholder`)\n    ) {\n      placeholderSizeByName = size\n    } else if (Number(size.width) <= 20) {\n      placeholderSizeByWidth = size\n    }\n  })\n\n  const placeHolderSize = placeholderSizeByName || placeholderSizeByWidth\n\n  return placeHolderSize?.sourceUrl\n}\n\nconst findReferencedImageNodeIds = ({ nodeString, pluginOptions, node }) => {\n  // if the lazyNodes plugin option is set we don't need to find\n  // image node id's because those nodes will be fetched lazily in resolvers.\n  if (\n    pluginOptions.type.MediaItem.lazyNodes &&\n    // but not in Gatsby v4+ because lazyNodes is no longer supported\n    !usingGatsbyV4OrGreater\n  ) {\n    return []\n  }\n\n  // get an array of all referenced media file ID's\n  const matchedIds = execall(\n    /\"__typename\":\"MediaItem\",\"id\":\"([^\"]*)\"/gm,\n    nodeString\n  )\n    .map(match => match.subMatches[0])\n    .filter(id => id !== node.id)\n\n  return matchedIds\n}\n\nconst getCheerioImgDbId = cheerioImg => {\n  // try to get the db id from data attributes\n  const dataAttributeId =\n    cheerioImg.attribs[`data-id`] || cheerioImg.attribs[`data-image-id`]\n\n  if (dataAttributeId) {\n    return dataAttributeId\n  }\n\n  if (!cheerioImg.attribs.class) {\n    return null\n  }\n\n  // try to get the db id from the wp-image-id classname\n  const wpImageClass = cheerioImg.attribs.class\n    .split(` `)\n    .find(className => className.includes(`wp-image-`))\n\n  if (wpImageClass) {\n    const wpImageClassDashArray = wpImageClass.split(`-`)\n    const wpImageClassId = Number(\n      wpImageClassDashArray[wpImageClassDashArray.length - 1]\n    )\n\n    if (wpImageClassId) {\n      return wpImageClassId\n    }\n  }\n\n  return null\n}\n\n// media items are of the \"post\" type\nconst dbIdToMediaItemRelayId = dbId => (dbId ? btoa(`post:${dbId}`) : null)\n\nconst getCheerioImgRelayId = cheerioImg =>\n  dbIdToMediaItemRelayId(getCheerioImgDbId(cheerioImg))\n\nexport const ensureSrcHasHostname = ({ src, wpUrl }) => {\n  const { protocol, host } = url.parse(wpUrl)\n\n  if (src.startsWith(`/wp-content`)) {\n    src = `${protocol}//${host}${src}`\n  }\n\n  return src\n}\n\nconst pickNodeBySourceUrlOrCheerioImg = ({\n  url,\n  cheerioImg,\n  mediaItemNodes,\n}) => {\n  const possibleHtmlSrcs = [\n    // try to match the media item source url by original html src\n    url,\n    // or by the src minus any image sizes string\n    stripImageSizesFromUrl(url),\n  ]\n\n  const imageNode = mediaItemNodes.find(\n    mediaItemNode =>\n      // either find our node by the source url\n      possibleHtmlSrcs.includes(mediaItemNode.sourceUrl) ||\n      possibleHtmlSrcs.includes(\n        // try to match without -scaled in the sourceUrl as well\n        // since WP adds -scaled to image urls if they were too large\n        // at upload time but image urls in html don't have this requirement.\n        // the sourceUrl may have -scaled in it but the full size image is still\n        // stored on the server (just not in the db)\n        (mediaItemNode.sourceUrl || mediaItemNode.mediaItemUrl)?.replace(\n          `-scaled`,\n          ``\n        )\n      ) ||\n      // or by id for cases where the src url didn't return a node\n      (!!cheerioImg && getCheerioImgRelayId(cheerioImg) === mediaItemNode.id)\n  )\n\n  return imageNode\n}\n\nlet displayedFailedToRestoreMessage = false\n\nconst fetchNodeHtmlImageMediaItemNodes = async ({\n  cheerioImages,\n  node,\n  helpers,\n  wpUrl,\n}) => {\n  // get all the image nodes we've cached from elsewhere\n  const { nodeMetaByUrl } = store.getState().imageNodes\n\n  const previouslyCachedNodesByUrl = (\n    await Promise.all(\n      Object.entries(nodeMetaByUrl).map(([sourceUrl, { id } = {}]) => {\n        if (!sourceUrl || !id) {\n          return null\n        }\n\n        sourceUrl = ensureSrcHasHostname({ wpUrl, src: sourceUrl })\n\n        const existingNode = helpers.getNode(id)\n\n        if (!existingNode) {\n          if (!displayedFailedToRestoreMessage) {\n            helpers.reporter.warn(\n              formatLogMessage(\n                `File node failed to restore from cache. This is a bug in gatsby-source-wordpress. Please open an issue so we can help you out :)`\n              )\n            )\n            displayedFailedToRestoreMessage = true\n          }\n\n          return null\n        }\n\n        return {\n          sourceUrl,\n          ...existingNode,\n        }\n      })\n    )\n  ).filter(Boolean)\n\n  const mediaItemUrls = cheerioImages\n    // filter out nodes we already have\n    .filter(({ cheerioImg }) => {\n      const url = ensureSrcHasHostname({ wpUrl, src: cheerioImg.attribs.src })\n\n      const existingNode = pickNodeBySourceUrlOrCheerioImg({\n        url,\n        mediaItemNodes: previouslyCachedNodesByUrl,\n      })\n\n      return !existingNode\n    })\n    // get remaining urls\n    .map(({ cheerioImg }) => {\n      const src = ensureSrcHasHostname({\n        src: cheerioImg.attribs.src,\n        wpUrl,\n      })\n\n      return src\n    })\n\n  // build a query to fetch all media items that we don't already have\n  const mediaItemNodesBySourceUrl =\n    await fetchReferencedMediaItemsAndCreateNodes({\n      mediaItemUrls,\n    })\n\n  // images that have been edited from the media library that were previously\n  // uploaded to a post/page will have a different sourceUrl so they can't be fetched by it\n  // in many cases we have data-id or data-image-id as attributes on the img\n  // we can try to use those to fetch media item nodes as well\n  // this will keep us from missing nodes\n  const mediaItemDbIds = cheerioImages\n    .map(({ cheerioImg }) => getCheerioImgDbId(cheerioImg))\n    .filter(Boolean)\n\n  const mediaItemRelayIds = mediaItemDbIds\n    .map(dbId => dbIdToMediaItemRelayId(dbId))\n    .filter(\n      // filter out any media item ids we already fetched\n      relayId =>\n        ![...mediaItemNodesBySourceUrl, ...previouslyCachedNodesByUrl].find(\n          ({ id } = {}) => id === relayId\n        )\n    )\n\n  const mediaItemNodesById = await fetchReferencedMediaItemsAndCreateNodes({\n    referencedMediaItemNodeIds: mediaItemRelayIds,\n  })\n\n  const createdNodes = [...mediaItemNodesById, ...mediaItemNodesBySourceUrl]\n\n  const mediaItemNodes = [...createdNodes, ...previouslyCachedNodesByUrl]\n\n  const htmlMatchesToMediaItemNodesMap = new Map()\n  for (const { cheerioImg, match } of cheerioImages) {\n    const htmlImgSrc = ensureSrcHasHostname({\n      src: cheerioImg.attribs.src,\n      wpUrl,\n    })\n\n    const imageNode = pickNodeBySourceUrlOrCheerioImg({\n      url: htmlImgSrc,\n      cheerioImg,\n      mediaItemNodes,\n    })\n\n    cacheCreatedFileNodeBySrc({ node: imageNode, src: htmlImgSrc })\n\n    if (imageNode) {\n      // match is the html string of the img tag\n      htmlMatchesToMediaItemNodesMap.set(match, { imageNode, cheerioImg })\n    }\n  }\n\n  return htmlMatchesToMediaItemNodesMap\n}\n\nconst getCheerioElementFromMatch =\n  wpUrl =>\n  ({ match, tag = `img` }) => {\n    // unescape quotes\n    const parsedMatch = JSON.parse(`\"${match}\"`)\n\n    // load our matching img tag into cheerio\n    const $ = cheerio.load(parsedMatch, {\n      xml: {\n        // make sure it's not wrapped in <body></body>\n        withDomLvl1: false,\n        // no need to normalize whitespace, we're dealing with a single element here\n        normalizeWhitespace: false,\n        xmlMode: true,\n        // entity decoding isn't our job here, that will be the responsibility of WPGQL\n        // or of the source plugin elsewhere.\n        decodeEntities: false,\n      },\n    })\n\n    // there's only ever one element due to our match matching a single tag\n    // $(tag) isn't an array, it's an object with a key of 0\n    const cheerioElement = $(tag)[0]\n\n    if (cheerioElement?.attribs?.src?.startsWith(`/wp-content`)) {\n      cheerioElement.attribs.src = `${wpUrl}${cheerioElement.attribs.src}`\n    }\n\n    return {\n      match,\n      cheerioElement,\n      // @todo this is from when this function was just used for images\n      // remove this by refactoring\n      cheerioImg: cheerioElement,\n    }\n  }\n\nconst getCheerioElementsFromMatches = ({ imgTagMatches, wpUrl }) =>\n  imgTagMatches\n    .map(getCheerioElementFromMatch(wpUrl))\n    .filter(({ cheerioImg: { attribs } }) => {\n      if (!attribs.src) {\n        return false\n      }\n\n      return isWebUri(encodeURI(attribs.src))\n    })\n\nconst getLargestSizeFromSizesAttribute = sizesString => {\n  const sizesStringsArray = sizesString.split(`,`)\n\n  return sizesStringsArray.reduce((largest, currentSizeString) => {\n    const maxWidth = currentSizeString\n      .substring(\n        currentSizeString.indexOf(`max-width: `) + 1,\n        currentSizeString.indexOf(`px`)\n      )\n      .trim()\n\n    const maxWidthNumber = Number(maxWidth)\n    const noLargestAndMaxWidthIsANumber = !largest && !isNaN(maxWidthNumber)\n    const maxWidthIsALargerNumberThanLargest =\n      largest && !isNaN(maxWidthNumber) && maxWidthNumber > largest\n\n    if (noLargestAndMaxWidthIsANumber || maxWidthIsALargerNumberThanLargest) {\n      largest = maxWidthNumber\n    }\n\n    return largest\n  }, null)\n}\n\nconst findImgTagMaxWidthFromCheerioImg = cheerioImg => {\n  const {\n    attribs: { width, sizes },\n  } = cheerioImg || { attribs: { width: null, sizes: null } }\n\n  if (width) {\n    const widthNumber = Number(width)\n\n    if (!isNaN(widthNumber)) {\n      return widthNumber\n    }\n  }\n\n  if (sizes) {\n    const largestSize = getLargestSizeFromSizesAttribute(sizes)\n\n    if (largestSize && !isNaN(largestSize)) {\n      return largestSize\n    }\n  }\n\n  return null\n}\n\nconst getFileNodeRelativePathname = fileNode => {\n  const fileName = `${fileNode.internal.contentDigest}/${fileNode.base}`\n\n  return fileName\n}\n\nconst getFileNodePublicPath = fileNode => {\n  const fileName = getFileNodeRelativePathname(fileNode)\n\n  const publicPath = path.join(process.cwd(), `public`, `static`, fileName)\n\n  return publicPath\n}\n\nconst copyFileToStaticAndReturnUrlPath = async (fileNode, helpers) => {\n  const publicPath = getFileNodePublicPath(fileNode)\n\n  if (!fs.existsSync(publicPath)) {\n    await fs.copy(\n      fileNode.absolutePath,\n      publicPath,\n      { dereference: true },\n      err => {\n        if (err) {\n          console.error(\n            `error copying file from ${fileNode.absolutePath} to ${publicPath}`,\n            err\n          )\n        }\n      }\n    )\n  }\n\n  const fileName = getFileNodeRelativePathname(fileNode)\n\n  const relativeUrl = `${helpers.pathPrefix ?? ``}/static/${fileName}`\n\n  return relativeUrl\n}\n\nconst filterMatches =\n  wpUrl =>\n  ({ match }) => {\n    const { hostname: wpHostname } = url.parse(wpUrl)\n\n    // @todo make it a plugin option to fetch non-wp images\n    // here we're filtering out image tags that don't contain our site url\n    const isHostedInWp =\n      // if it has the full WP url\n      match.includes(wpHostname) ||\n      // or it's an absolute path\n      match.includes(`src=\\\\\"/wp-content`)\n\n    // six backslashes means we're looking for three backslashes\n    // since we're looking for JSON encoded strings inside of our JSON encoded string\n    const isInJSON = match.includes(`src=\\\\\\\\\\\\\"`)\n\n    return isHostedInWp && !isInJSON\n  }\n\nconst cacheCreatedFileNodeBySrc = ({ node, src }) => {\n  if (node) {\n    // save any fetched media items in our global media item cache\n    store.dispatch.imageNodes.pushNodeMeta({\n      sourceUrl: src,\n      id: node.id,\n      modifiedGmt: node.modifiedGmt,\n    })\n  }\n}\n\nconst imgSrcRemoteFileRegex =\n  /(?:src=\\\\\")((?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.|\\/)(?:[^'\"])*\\.(?:jpeg|jpg|png|gif|ico|mpg|ogv|svg|bmp|tif|tiff))(\\?[^\\\\\" \\.]*|)(?=\\\\\"| |\\.)/gim\n\nexport const getImgSrcRemoteFileMatchesFromNodeString = nodeString =>\n  execall(imgSrcRemoteFileRegex, nodeString).filter(({ subMatches }) => {\n    // if our match is json encoded, that means it's inside a JSON\n    // encoded string field.\n    const isInJSON = subMatches[0].includes(`\\\\/\\\\/`)\n\n    // we shouldn't process encoded JSON, so skip this match if it's JSON\n    return !isInJSON\n  })\n\nexport const getImgTagMatches = ({ nodeString }) =>\n  execall(\n    /<img([\\w\\W]+?)[\\/]?>/gim,\n    nodeString\n      // we don't want to match images inside pre\n      .replace(/<pre([\\w\\W]+?)[\\/]?>(?:(?!<\\/pre>).)+(<\\/pre>)/gim, ``)\n      // and code tags, so temporarily remove those tags and everything inside them\n      .replace(/<code([\\w\\W]+?)[\\/]?>(?:(?!<\\/code>).)+(<\\/code>)/gim, ``)\n  )\n\nexport const replaceNodeHtmlImages = async ({\n  nodeString,\n  node,\n  helpers,\n  wpUrl,\n  pluginOptions,\n}) => {\n  // this prevents fetching inline html images\n  if (!pluginOptions?.html?.useGatsbyImage) {\n    return nodeString\n  }\n\n  const imageUrlMatches = getImgSrcRemoteFileMatchesFromNodeString(nodeString)\n\n  const imgTagMatches = getImgTagMatches({ nodeString })\n\n  if (imageUrlMatches.length && imgTagMatches.length) {\n    const cheerioImages = getCheerioElementsFromMatches({\n      imgTagMatches,\n      wpUrl,\n    })\n\n    const htmlMatchesToMediaItemNodesMap =\n      await fetchNodeHtmlImageMediaItemNodes({\n        cheerioImages,\n        nodeString,\n        node,\n        helpers,\n        pluginOptions,\n        wpUrl,\n      })\n\n    // generate gatsby images for each cheerioImage\n    const htmlMatchesWithImageResizes = await Promise.all(\n      imgTagMatches.map(async ({ match }) => {\n        const matchInfo = htmlMatchesToMediaItemNodesMap.get(match)\n\n        if (!matchInfo) {\n          return null\n        }\n\n        const { imageNode, cheerioImg } = matchInfo\n\n        const isMediaItemNode = imageNode.__typename === `MediaItem`\n\n        if (!imageNode) {\n          return null\n        }\n\n        const fileNode =\n          // if we couldn't get a MediaItem node for this image in WPGQL\n          !isMediaItemNode\n            ? // this will already be a file node\n              imageNode\n            : // otherwise grab the file node\n              helpers.getNode(imageNode?.localFile?.id)\n\n        const extension = imageNode?.mimeType?.replace(\n          `${imageNode?.mediaType}/`,\n          ``\n        )\n\n        const imgTagMaxWidth = findImgTagMaxWidthFromCheerioImg(cheerioImg)\n\n        const mediaItemNodeWidth = isMediaItemNode\n          ? imageNode?.mediaDetails?.width\n          : null\n\n        // if a max width can't be inferred from html, this value will be passed to Sharp\n        let fallbackImageMaxWidth = pluginOptions?.html?.fallbackImageMaxWidth\n\n        if (\n          // if the image is smaller than the fallback max width,\n          // the images width will be used instead if we have a media item node\n          fallbackImageMaxWidth > mediaItemNodeWidth &&\n          // of course that means we have to have a media item node\n          // and a media item node max width\n          mediaItemNodeWidth &&\n          typeof mediaItemNodeWidth === `number` &&\n          mediaItemNodeWidth > 0\n        ) {\n          fallbackImageMaxWidth = mediaItemNodeWidth\n        }\n\n        let maxWidth =\n          // if we inferred a maxwidth from html\n          (imgTagMaxWidth &&\n          // and we have a media item node to know it's full size max width\n          mediaItemNodeWidth &&\n          // and this isn't an svg which has no maximum width\n          extension !== `svg` &&\n          // and the media item node max width is smaller than what we inferred\n          // from html\n          mediaItemNodeWidth < imgTagMaxWidth\n            ? // use the media item node width\n              mediaItemNodeWidth\n            : // otherwise use the width inferred from html\n              imgTagMaxWidth) ??\n          // if we don't have a media item node and we inferred no width\n          // from html, then use the fallback max width from plugin options\n          fallbackImageMaxWidth\n\n        const configuredMaxWidth = pluginOptions?.html?.imageMaxWidth\n\n        // if the configured html.maxWidth property is less than the result, then\n        // override the resultant width\n        if (configuredMaxWidth && configuredMaxWidth < maxWidth) {\n          maxWidth = configuredMaxWidth\n        }\n\n        const quality = pluginOptions?.html?.imageQuality\n\n        const { reporter } = helpers\n\n        const gatsbyTransformerSharpSupportsThisFileType =\n          supportedExtensions[extension] || extension === `gif`\n\n        let imageResize = null\n\n        if (gatsbyTransformerSharpSupportsThisFileType) {\n          const placeholderUrl = getPlaceholderUrlFromMediaItemNode(\n            imageNode,\n            pluginOptions\n          )\n\n          const imageUrl =\n            imageNode.mediaItemUrl || imageNode.sourceUrl || imageNode.url\n\n          try {\n            imageResize = await gatsbyImageResolver(\n              {\n                url: imageUrl,\n                placeholderUrl,\n                mimeType: imageNode.mimeType,\n                width: imageNode.mediaDetails.width,\n                height: imageNode.mediaDetails.height,\n                filename: path.basename(imageNode.mediaDetails.file),\n                internal: {\n                  contentDigest: imageNode.modifiedGmt,\n                },\n              },\n              {\n                width: maxWidth,\n                layout: `constrained`,\n                placeholder: !placeholderUrl\n                  ? `none`\n                  : pluginOptions?.html?.placeholderType || `blurred`,\n                quality,\n              },\n              helpers.actions\n            )\n          } catch (e) {\n            reporter.error(e)\n            reporter.warn(\n              formatLogMessage(\n                `${node.__typename} ${node.id} couldn't process inline html image ${imageUrl}`\n              )\n            )\n            return null\n          }\n        }\n\n        return {\n          match,\n          cheerioImg,\n          fileNode,\n          imageResize,\n          maxWidth,\n        }\n      })\n    )\n\n    // find/replace mutate nodeString to replace matched images with rendered gatsby images\n    let replaceIndex = 0\n    for (const matchResize of htmlMatchesWithImageResizes) {\n      if (!matchResize) {\n        continue\n      }\n\n      const { match, imageResize, cheerioImg } = matchResize\n\n      let ReactGatsbyImage\n      // used to create hydration data for images\n      let gatsbyImageHydrationData = null\n      if (imageResize && imageResize.images.sources.length > 0) {\n        gatsbyImageHydrationData = {\n          image: imageResize,\n          alt: cheerioImg?.attribs?.alt,\n          className: `${\n            cheerioImg?.attribs?.class || ``\n          } inline-gatsby-image-wrapper`,\n          \"data-wp-inline-image\": String(++replaceIndex),\n        }\n        ReactGatsbyImage = React.createElement(\n          GatsbyImage,\n          gatsbyImageHydrationData,\n          null\n        )\n      }\n\n      if (ReactGatsbyImage) {\n        let gatsbyImageStringRaw =\n          ReactDOMServer.renderToString(ReactGatsbyImage)\n\n        // gatsby-plugin-image needs hydration data to work on navigations - we add the hydration data to the DOM to use it in gatsby-browser.ts\n        if (gatsbyImageHydrationData) {\n          gatsbyImageStringRaw += `<script type=\"application/json\" data-wp-inline-image-hydration=\"${replaceIndex}\">${JSON.stringify(\n            gatsbyImageHydrationData\n          )}</script>`\n        }\n        // need to remove the JSON stringify quotes around our image since we're\n        // threading this JSON string back into a larger JSON object string\n        const gatsbyImageStringJSON = JSON.stringify(gatsbyImageStringRaw)\n        const gatsbyImageString = gatsbyImageStringJSON.substring(\n          1,\n          gatsbyImageStringJSON.length - 1\n        )\n\n        nodeString = replaceAll(match, gatsbyImageString, nodeString)\n      }\n    }\n  }\n\n  return nodeString\n}\n\nconst replaceFileLinks = async ({\n  nodeString,\n  helpers,\n  wpUrl,\n  pluginOptions,\n  node,\n}) => {\n  if (!pluginOptions?.html?.createStaticFiles) {\n    return nodeString\n  }\n\n  if (node.__typename === `MediaItem`) {\n    // we don't want to replace file links on MediaItem nodes because they're processed specially from other node types.\n    // if we replace file links here then we wont be able to properly fetch the localFile node\n    return nodeString\n  }\n\n  const hrefMatches = execall(\n    /(\\\\\"|\\\\'|\\()([^'\"()]*)(\\/wp-content\\/uploads\\/[^'\">()]+)(\\\\\"|\\\\'|>|\\))/gm,\n    nodeString\n  )\n\n  if (hrefMatches.length) {\n    // eslint-disable-next-line arrow-body-style\n    const mediaItemUrlsAndMatches = hrefMatches.map(matchGroup => ({\n      matchGroup,\n      url: `${wpUrl}${matchGroup.subMatches[2]}`,\n    }))\n\n    const mediaItemUrls = mediaItemUrlsAndMatches\n      .map(({ url }) => url)\n      .filter(isWebUri)\n\n    const mediaItemNodesBySourceUrl =\n      await fetchReferencedMediaItemsAndCreateNodes({\n        mediaItemUrls,\n      })\n\n    const findReplaceMaps = []\n\n    await Promise.all(\n      mediaItemNodesBySourceUrl.map(async node => {\n        let fileNode\n        let mediaItemNode\n\n        if (node.internal.type === `File`) {\n          fileNode = node\n          mediaItemNode = await helpers.getNode(node.parent)\n        } else if (node.localFile?.id) {\n          fileNode = await helpers.getNode(node.localFile.id)\n          mediaItemNode = node\n        } else {\n          return null\n        }\n\n        const relativeUrl = await copyFileToStaticAndReturnUrlPath(\n          fileNode,\n          helpers\n        )\n\n        if (!relativeUrl || !mediaItemNode?.mediaItemUrl || !fileNode) {\n          return null\n        }\n\n        const mediaItemMatchGroup = mediaItemUrlsAndMatches.find(\n          ({\n            matchGroup: {\n              subMatches: [, , path],\n            },\n          }) => mediaItemNode.mediaItemUrl.includes(path)\n        )?.matchGroup\n\n        if (!mediaItemMatchGroup) {\n          return null\n        }\n\n        const [, hostname, path] = mediaItemMatchGroup?.subMatches\n\n        cacheCreatedFileNodeBySrc({\n          node: mediaItemNode,\n          src: `${wpUrl}${path}`,\n        })\n\n        findReplaceMaps.push({\n          find: `${hostname || ``}${path}`,\n          replace: relativeUrl,\n        })\n\n        findReplaceMaps.push({\n          find: path,\n          replace: relativeUrl,\n        })\n\n        return null\n      })\n    )\n\n    for (const { find, replace } of findReplaceMaps.filter(Boolean)) {\n      nodeString = replaceAll(find, replace, nodeString)\n    }\n  }\n\n  return nodeString\n}\n\nexport const getWpLinkRegex = wpUrl =>\n  new RegExp(\n    `[\"']${wpUrl}(?!/wp-content|/wp-admin|/wp-includes)(/[^'\"]+)[\"']`,\n    `gim`\n  )\n\n// replaces any url which is a front-end WP url with a relative path\nconst replaceNodeHtmlLinks = ({ wpUrl, nodeString, node }) => {\n  const wpLinkRegex = getWpLinkRegex(wpUrl)\n  const linkMatches = execall(wpLinkRegex, nodeString)\n\n  if (linkMatches.length) {\n    linkMatches.forEach(({ match, subMatches: [path] }) => {\n      if (path) {\n        try {\n          // remove \\, \" and ' characters from match\n          const normalizedMatch = match\n            .replace(/['\"\\\\]/g, ``)\n            // ensure that query params are properly quoted\n            .replace(/\\?/, `\\\\?`)\n\n          const normalizedPath = path.replace(/\\\\/g, ``)\n\n          // replace normalized match with relative path\n          const thisMatchRegex = new RegExp(\n            normalizedMatch + `(?!/?wp-content|/?wp-admin|/?wp-includes)`,\n            `g`\n          )\n\n          nodeString = nodeString.replace(thisMatchRegex, normalizedPath)\n        } catch (e) {\n          console.error(e)\n          console.warn(\n            formatLogMessage(\n              `Failed to process inline html links in ${node.__typename} ${node.id}`\n            )\n          )\n        }\n      }\n    })\n  }\n\n  return nodeString\n}\n\n// replaces specific string or regex with a given string from the plugin options config\nexport const searchAndReplaceNodeStrings = ({\n  nodeString,\n  node,\n  pluginOptions,\n}) => {\n  if (Array.isArray(pluginOptions?.searchAndReplace)) {\n    pluginOptions.searchAndReplace.forEach(({ search, replace }) => {\n      const searchRegex = new RegExp(search, `g`)\n\n      const stringMatches = execall(searchRegex, nodeString)\n\n      if (stringMatches.length) {\n        stringMatches.forEach(({ match }) => {\n          if (match) {\n            try {\n              nodeString = nodeString.replace(search, replace)\n            } catch (e) {\n              console.error(e)\n              console.warn(\n                formatLogMessage(\n                  `Failed to process search and replace string in ${node.__typename} ${node.id}`\n                )\n              )\n            }\n          }\n        })\n      }\n    })\n  }\n\n  return nodeString\n}\n\nconst processNodeString = async ({\n  nodeString,\n  node,\n  pluginOptions,\n  helpers,\n  wpUrl,\n}) => {\n  const nodeStringFilters = [\n    searchAndReplaceNodeStrings,\n    replaceNodeHtmlImages,\n    replaceFileLinks,\n    replaceNodeHtmlLinks,\n  ]\n\n  for (const nodeStringFilter of nodeStringFilters) {\n    nodeString = await nodeStringFilter({\n      nodeString,\n      node,\n      pluginOptions,\n      helpers,\n      wpUrl,\n    })\n  }\n\n  return nodeString\n}\n\nconst processNode = async ({\n  node,\n  pluginOptions,\n  wpUrl,\n  helpers,\n  referencedMediaItemNodeIds,\n}) => {\n  const nodeString = stringify(node)\n\n  // find referenced node ids\n  // here we're searching for node id strings in our node\n  // we use this to download only the media items\n  // that are being used in posts\n  // this is important for downloading images nodes that are connected somewhere\n  // on a node field\n  const nodeMediaItemIdReferences = findReferencedImageNodeIds({\n    nodeString,\n    pluginOptions,\n    node,\n  })\n\n  // push them to our store of referenced id's\n  if (nodeMediaItemIdReferences?.length && referencedMediaItemNodeIds) {\n    nodeMediaItemIdReferences.forEach(id => referencedMediaItemNodeIds.add(id))\n  }\n\n  const processedNodeString = await processNodeString({\n    nodeString,\n    node,\n    pluginOptions,\n    helpers,\n    wpUrl,\n  })\n\n  const processedNode =\n    // only parse if the nodeString has changed\n    processedNodeString !== nodeString ? JSON.parse(processedNodeString) : node\n\n  return {\n    processedNode,\n    nodeMediaItemIdReferences,\n  }\n}\n\nexport { processNode }\n"],"file":"process-node.js"}