{"version":3,"sources":["../../../src/steps/source-nodes/index.ts"],"names":["sourceNodes","helpers","cache","webhookBody","refetchAll","preview","token","userDatabaseId","now","Date","nonNodeRootFieldsPromise","lastCompletedSourceTime","refreshing","since","get","LAST_COMPLETED_SOURCE_TIME","schemaWasChanged","foundUsableHardCachedData","store","getState","remoteSchema","fetchEverything","process","env","NODE_ENV","set","dispatch","setSchemaWasChanged","develop","resumeRefreshPolling"],"mappings":";;;;;;;AACA;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,WAAiB,GAAG,MAAMC,OAAN,IAAiB;AACzC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,WAAT;AAAsBC,IAAAA;AAAtB,MAAqCH,OAA3C,CADyC,CAGzC;;AACA,MAAIE,WAAW,CAACE,OAAhB,EAAyB;AACvB,UAAM,6BAAeJ,OAAf,CAAN;AAEA;AACD,GAJD,CAKA;AACA;AANA,OAOK,IAAIE,WAAW,CAACG,KAAZ,IAAqBH,WAAW,CAACI,cAArC,EAAqD;AACxD,UAAM,6BAAeN,OAAf,CAAN;AACD;;AAED,QAAMO,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ,CAfyC,CAiBzC;AACA;;AACA,QAAME,wBAAwB,GAAG,+CAAjC;AAEA,QAAMC,uBAAuB,GAC3BR,WAAW,CAACS,UAAZ,IAA0BT,WAAW,CAACU,KAAtC,GACIV,WAAW,CAACU,KADhB,GAEI,MAAMX,KAAK,CAACY,GAAN,CAAUC,qCAAV,CAHZ;;AAKA,QAAM;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MACJC,eAAMC,QAAN,GAAiBC,YADnB;;AAGA,QAAMC,eAAe,GACnBJ,yBAAyB,IACzB,CAACN,uBADD,IAEAP,UAFA,IAGA;AACCkB,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAA0B,aAA1B,IACC;AACAR,EAAAA,gBAPJ,CA7ByC,CAsCzC;AACA;AACA;;AACA,MAAIK,eAAJ,EAAqB;AACnB,UAAM,yCAAN;AACD,GAFD,CAIA;AACA;AALA,OAMK,IAAI,CAACA,eAAL,EAAsB;AACzB,UAAM,+BAAyB;AAC7BR,MAAAA,KAAK,EAAEF;AADsB,KAAzB,CAAN;AAGD;;AAED,QAAMD,wBAAN;AAEA;AACA,QAAMT,OAAO,CAACC,KAAR,CAAcuB,GAAd,CAAkBV,qCAAlB,EAA8CP,GAA9C,CAAN;AAEA,QAAM;AAAEkB,IAAAA;AAAF,MAAeR,cAArB;AACAQ,EAAAA,QAAQ,CAACN,YAAT,CAAsBO,mBAAtB,CAA0C,KAA1C;AACAD,EAAAA,QAAQ,CAACE,OAAT,CAAiBC,oBAAjB;AACD,CA7DD","sourcesContent":["import { Step } from \"./../../utils/run-steps\"\nimport fetchAndApplyNodeUpdates from \"./update-nodes/fetch-node-updates\"\n\nimport { fetchAndCreateAllNodes } from \"./fetch-nodes/fetch-nodes\"\n\nimport { LAST_COMPLETED_SOURCE_TIME } from \"~/constants\"\nimport store from \"~/store\"\nimport fetchAndCreateNonNodeRootFields from \"./create-nodes/fetch-and-create-non-node-root-fields\"\nimport { allowFileDownloaderProgressBarToClear } from \"./create-nodes/create-remote-file-node/progress-bar-promise\"\nimport { sourcePreviews } from \"~/steps/preview\"\n\nconst sourceNodes: Step = async helpers => {\n  const { cache, webhookBody, refetchAll } = helpers\n\n  // if this is a preview we want to process it and return early\n  if (webhookBody.preview) {\n    await sourcePreviews(helpers)\n\n    return\n  }\n  // if it's not a preview but we have a token\n  // we should source any pending previews then continue sourcing\n  else if (webhookBody.token && webhookBody.userDatabaseId) {\n    await sourcePreviews(helpers)\n  }\n\n  const now = Date.now()\n\n  // fetch non-node root fields such as settings.\n  // For now, we're refetching them on every build\n  const nonNodeRootFieldsPromise = fetchAndCreateNonNodeRootFields()\n\n  const lastCompletedSourceTime =\n    webhookBody.refreshing && webhookBody.since\n      ? webhookBody.since\n      : await cache.get(LAST_COMPLETED_SOURCE_TIME)\n\n  const { schemaWasChanged, foundUsableHardCachedData } =\n    store.getState().remoteSchema\n\n  const fetchEverything =\n    foundUsableHardCachedData ||\n    !lastCompletedSourceTime ||\n    refetchAll ||\n    // don't refetch everything in development\n    (process.env.NODE_ENV !== `development` &&\n      // and the schema was changed\n      schemaWasChanged)\n\n  // If this is an uncached build,\n  // or our initial build to fetch and cache everything didn't complete,\n  // pull everything from WPGQL\n  if (fetchEverything) {\n    await fetchAndCreateAllNodes()\n  }\n\n  // If we've already successfully pulled everything from WPGraphQL\n  // just pull the latest changes\n  else if (!fetchEverything) {\n    await fetchAndApplyNodeUpdates({\n      since: lastCompletedSourceTime,\n    })\n  }\n\n  await nonNodeRootFieldsPromise\n\n  allowFileDownloaderProgressBarToClear()\n  await helpers.cache.set(LAST_COMPLETED_SOURCE_TIME, now)\n\n  const { dispatch } = store\n  dispatch.remoteSchema.setSchemaWasChanged(false)\n  dispatch.develop.resumeRefreshPolling()\n}\n\nexport { sourceNodes }\n"],"file":"index.js"}