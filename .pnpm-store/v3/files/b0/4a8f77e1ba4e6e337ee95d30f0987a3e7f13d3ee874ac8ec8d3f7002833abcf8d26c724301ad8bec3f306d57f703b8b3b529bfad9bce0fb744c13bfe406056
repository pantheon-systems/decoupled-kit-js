{"version":3,"sources":["../../../src/schema/types/pagination.ts"],"names":["getPageInfo","schemaComposer","getOrCreateOTC","tc","addFields","currentPage","hasPreviousPage","hasNextPage","itemCount","pageCount","perPage","totalCount","getEdge","typeComposer","typeName","getTypeName","derivedTypeName","next","node","getTypeNonNull","previous","getGroup","fields","field","fieldValue","createPagination","getPagination","inputTypeComposer","getInputTypeComposer","fieldsEnumTC","paginationTypeComposer","aggregationFields","distinct","type","args","resolve","max","min","sum","group","skip","limit","edges","nodes","pageInfo","makeFieldNonNull"],"mappings":"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","sourcesContent":["import {\n  SchemaComposer,\n  ObjectTypeComposer,\n  InputTypeComposer,\n  InterfaceTypeComposer,\n  ObjectTypeComposerFieldConfigMapDefinition,\n} from \"graphql-compose\"\nimport { getFieldsEnum } from \"./sort\"\nimport { addDerivedType } from \"./derived-types\"\nimport { distinct, group, max, min, sum } from \"../resolvers\"\n\nexport const getPageInfo = <TContext = any>({\n  schemaComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n}): ObjectTypeComposer =>\n  schemaComposer.getOrCreateOTC(`PageInfo`, tc => {\n    tc.addFields({\n      currentPage: `Int!`,\n      hasPreviousPage: `Boolean!`,\n      hasNextPage: `Boolean!`,\n      itemCount: `Int!`,\n      pageCount: `Int!`,\n      perPage: `Int`,\n      totalCount: `Int!`,\n    })\n  })\n\nexport const getEdge = <TContext = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer | InterfaceTypeComposer\n}): ObjectTypeComposer => {\n  const typeName = `${typeComposer.getTypeName()}Edge`\n  addDerivedType({ typeComposer, derivedTypeName: typeName })\n  return schemaComposer.getOrCreateOTC(typeName, tc => {\n    tc.addFields({\n      next: typeComposer,\n      node: typeComposer.getTypeNonNull(),\n      previous: typeComposer,\n    })\n  })\n}\n\nexport const getGroup = <TContext = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer | InterfaceTypeComposer\n}): ObjectTypeComposer => {\n  const typeName = `${typeComposer.getTypeName()}GroupConnection`\n  const fields = {\n    field: `String!`,\n    fieldValue: `String`,\n  }\n  return createPagination({ schemaComposer, typeComposer, typeName, fields })\n}\n\nexport const getPagination = <TContext = any>({\n  schemaComposer,\n  typeComposer,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer | InterfaceTypeComposer\n}): ObjectTypeComposer => {\n  const typeName = `${typeComposer.getTypeName()}Connection`\n  return createPagination({ schemaComposer, typeComposer, typeName })\n}\n\nfunction createPagination<TSource = any, TContext = any>({\n  schemaComposer,\n  typeComposer,\n  fields,\n  typeName,\n}: {\n  schemaComposer: SchemaComposer<TContext>\n  typeComposer: ObjectTypeComposer | InterfaceTypeComposer\n  typeName: string\n  fields?: ObjectTypeComposerFieldConfigMapDefinition<TSource, TContext>\n}): ObjectTypeComposer {\n  const inputTypeComposer: InputTypeComposer =\n    typeComposer.getInputTypeComposer()\n  const fieldsEnumTC = getFieldsEnum({\n    schemaComposer,\n    typeComposer,\n    inputTypeComposer,\n  })\n  const paginationTypeComposer: ObjectTypeComposer =\n    schemaComposer.getOrCreateOTC(typeName, tc => {\n      // getGroup() will create a recursive call to pagination,\n      // so only add it and other aggregate functions on onCreate.\n      // Cast into their own category to avoid Typescript conflicts.\n      const aggregationFields: { [key: string]: any } = {\n        distinct: {\n          type: [`String!`],\n          args: {\n            field: fieldsEnumTC.getTypeNonNull(),\n          },\n          resolve: distinct,\n        },\n        max: {\n          type: `Float`,\n          args: {\n            field: fieldsEnumTC.getTypeNonNull(),\n          },\n          resolve: max,\n        },\n        min: {\n          type: `Float`,\n          args: {\n            field: fieldsEnumTC.getTypeNonNull(),\n          },\n          resolve: min,\n        },\n        sum: {\n          type: `Float`,\n          args: {\n            field: fieldsEnumTC.getTypeNonNull(),\n          },\n          resolve: sum,\n        },\n        group: {\n          type: [getGroup({ schemaComposer, typeComposer }).getTypeNonNull()],\n          args: {\n            skip: `Int`,\n            limit: `Int`,\n            field: fieldsEnumTC.getTypeNonNull(),\n          },\n          resolve: group,\n        },\n      }\n\n      tc.addFields({\n        totalCount: `Int!`,\n        edges: [getEdge({ schemaComposer, typeComposer }).getTypeNonNull()],\n        nodes: [typeComposer.getTypeNonNull()],\n        pageInfo: getPageInfo({ schemaComposer }).getTypeNonNull(),\n        ...aggregationFields,\n        ...fields,\n      })\n    })\n  paginationTypeComposer.makeFieldNonNull(`edges`)\n  paginationTypeComposer.makeFieldNonNull(`nodes`)\n  paginationTypeComposer.makeFieldNonNull(`distinct`)\n  paginationTypeComposer.makeFieldNonNull(`group`)\n  addDerivedType({ typeComposer, derivedTypeName: typeName })\n  return paginationTypeComposer\n}\n"],"file":"pagination.js"}