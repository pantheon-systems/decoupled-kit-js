{"version":3,"sources":["../../../../src/utils/webpack/plugins/webpack-logging.ts"],"names":["WebpackLoggingPlugin","PLUGIN_NAME","isVerbose","constructor","rootDir","reporter","apply","compiler","options","infrastructureLogging","level","debug","profile","ProgressPlugin","webpackBundleAnalyzerPath","resolveFrom","silent","hooks","beforeRun","tapPromise","then","BundleAnalyzerPlugin","analyzerMode","openAnalyzer","title","name","reportFilename","done","tap","stats","log","toString","colors","logging"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAMO,MAAMA,oBAAN,CAA2B;AACxBC,EAAAA,WAAW,GAAI,gBAAJ;AAGXC,EAAAA,SAAS,GAAG,KAAH;;AAEjBC,EAAAA,WAAW,CAACC,OAAD,EAAkBC,QAAlB,EAAsCH,SAAS,GAAG,KAAlD,EAAyD;AAClE,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKH,SAAL,GAAiBA,SAAjB;AACD;;AAEDI,EAAAA,KAAK,CAACC,QAAD,EAA2B;AAC9BA,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,qBAAjB,GAAyC;AACvCC,MAAAA,KAAK,EAAG,SAD+B;AAEvCC,MAAAA,KAAK,EAAE;AAFgC,KAAzC;AAIAJ,IAAAA,QAAQ,CAACC,OAAT,CAAiBI,OAAjB,GAA2B,IAA3B;AAEA,QAAIC,uBAAJ,CAAmB;AACjBD,MAAAA,OAAO,EAAE;AADQ,KAAnB,EAEGN,KAFH,CAESC,QAFT,EAP8B,CAW9B;;AACA,UAAMO,yBAAyB,GAAGC,qBAAYC,MAAZ,CAChC,KAAKZ,OAD2B,EAE/B,yBAF+B,CAAlC;;AAIA,QAAIU,yBAAJ,EAA+B;AAC7BP,MAAAA,QAAQ,CAACU,KAAT,CAAeC,SAAf,CAAyBC,UAAzB,CAAoC,KAAKlB,WAAzC,EAAsD,MACpD,mBAAOa,yBAAP,mDAAkCM,IAAlC,CAAuC,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAA8B;AACnE,YAAIA,oBAAJ,CAAyB;AACvBC,UAAAA,YAAY,EAAG,QADQ;AAEvBC,UAAAA,YAAY,EAAE,KAFS;AAGvBC,UAAAA,KAAK,EAAEjB,QAAQ,CAACkB,IAHO;AAIvBC,UAAAA,cAAc,EAAG;AAJM,SAAzB,EAKGpB,KALH,CAKSC,QALT;AAMD,OAPD,CADF;AAUD;;AAEDA,IAAAA,QAAQ,CAACU,KAAT,CAAeU,IAAf,CAAoBC,GAApB,CAAwB,KAAK3B,WAA7B,EAA0C4B,KAAK,IAAI;AACjD,WAAKxB,QAAL,CAAcyB,GAAd,CACED,KAAK,CAACE,QAAN,CAAe;AACbC,QAAAA,MAAM,EAAE,IADK;AAEbC,QAAAA,OAAO,EAAE,KAAK/B,SAAL,GAAkB,SAAlB,GAA8B;AAF1B,OAAf,CADF;AAMD,KAPD;AAQD;;AAjD+B","sourcesContent":["import { ProgressPlugin } from \"webpack\"\nimport resolveFrom from \"resolve-from\"\nimport type reporter from \"gatsby-cli/lib/reporter\"\nimport type { Compiler } from \"webpack\"\n\ntype Reporter = typeof reporter\n\nexport class WebpackLoggingPlugin {\n  private PLUGIN_NAME = `WebpackLogging`\n  private rootDir: string\n  private reporter: Reporter\n  private isVerbose = false\n\n  constructor(rootDir: string, reporter: Reporter, isVerbose = false) {\n    this.rootDir = rootDir\n    this.reporter = reporter\n    this.isVerbose = isVerbose\n  }\n\n  apply(compiler: Compiler): void {\n    compiler.options.infrastructureLogging = {\n      level: `verbose`,\n      debug: /FileSystemInfo/,\n    }\n    compiler.options.profile = true\n\n    new ProgressPlugin({\n      profile: true,\n    }).apply(compiler)\n\n    // if webpack bundle analyzer is installed lets use it\n    const webpackBundleAnalyzerPath = resolveFrom.silent(\n      this.rootDir,\n      `webpack-bundle-analyzer`\n    )\n    if (webpackBundleAnalyzerPath) {\n      compiler.hooks.beforeRun.tapPromise(this.PLUGIN_NAME, () =>\n        import(webpackBundleAnalyzerPath).then(({ BundleAnalyzerPlugin }) => {\n          new BundleAnalyzerPlugin({\n            analyzerMode: `static`,\n            openAnalyzer: false,\n            title: compiler.name,\n            reportFilename: `report.html`,\n          }).apply(compiler)\n        })\n      )\n    }\n\n    compiler.hooks.done.tap(this.PLUGIN_NAME, stats => {\n      this.reporter.log(\n        stats.toString({\n          colors: true,\n          logging: this.isVerbose ? `verbose` : `log`,\n        })\n      )\n    })\n  }\n}\n"],"file":"webpack-logging.js"}