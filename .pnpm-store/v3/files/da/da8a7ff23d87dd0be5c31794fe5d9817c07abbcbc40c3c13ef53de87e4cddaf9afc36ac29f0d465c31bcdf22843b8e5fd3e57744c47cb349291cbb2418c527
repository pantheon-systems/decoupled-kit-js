{"version":3,"sources":["../../src/bootstrap/get-config-file.ts"],"names":["isNearMatch","fileName","configName","distance","getConfigFile","siteDirectory","configPath","configFilePath","configModule","path","join","COMPILED_CACHE_DIR","require","resolve","outerError","isModuleNotFoundError","code","isThisFileRequireError","requireStack","includes","report","panic","id","error","context","message","innerError","nearMatch","fs","readdir","then","files","find","file","split","pop"],"mappings":"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","sourcesContent":["import { distance as levenshtein } from \"fastest-levenshtein\"\nimport fs from \"fs-extra\"\nimport { testRequireError } from \"../utils/test-require-error\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport path from \"path\"\nimport { sync as existsSync } from \"fs-exists-cached\"\nimport { COMPILED_CACHE_DIR } from \"../utils/parcel/compile-gatsby-files\"\n\nfunction isNearMatch(\n  fileName: string | undefined,\n  configName: string,\n  distance: number\n): boolean {\n  if (!fileName) return false\n  return levenshtein(fileName, configName) <= distance\n}\n\nexport async function getConfigFile(\n  siteDirectory: string,\n  configName: string,\n  distance: number = 3\n): Promise<{\n  configModule: any\n  configFilePath: string\n}> {\n  let configPath = ``\n  let configFilePath = ``\n  let configModule: any\n\n  try {\n    // Try .cache/compiled/gatsby-config first\n    configPath = path.join(`${siteDirectory}/${COMPILED_CACHE_DIR}`, configName)\n    configFilePath = require.resolve(configPath)\n    configModule = require(configFilePath)\n  } catch (outerError) {\n    // Not all plugins will have a compiled file, so the err.message can look like this:\n    // \"Cannot find module '<root>/node_modules/gatsby-source-filesystem/.cache/compiled/gatsby-config'\"\n    // But the compiled file can also have an error like this:\n    // \"Cannot find module 'foobar'\"\n    // So this is trying to differentiate between an error we're fine ignoring and an error that we should throw\n    const isModuleNotFoundError = outerError.code === `MODULE_NOT_FOUND`\n    const isThisFileRequireError =\n      outerError?.requireStack?.[0]?.includes(`get-config-file`) ?? true\n\n    if (!(isModuleNotFoundError && isThisFileRequireError)) {\n      report.panic({\n        id: `11902`,\n        error: outerError,\n        context: {\n          configName,\n          message: outerError.message,\n        },\n      })\n    }\n\n    // Fallback to regular rootDir gatsby-config\n    configPath = path.join(siteDirectory, configName)\n    try {\n      configFilePath = require.resolve(configPath)\n      configModule = require(configFilePath)\n    } catch (innerError) {\n      // Only then hard fail\n      const nearMatch = await fs.readdir(siteDirectory).then(files =>\n        files.find(file => {\n          const fileName = file.split(siteDirectory).pop()\n          return isNearMatch(fileName, configName, distance)\n        })\n      )\n      if (!testRequireError(configPath, innerError)) {\n        report.panic({\n          id: `10123`,\n          error: innerError,\n          context: {\n            configName,\n            message: innerError.message,\n          },\n        })\n      } else if (nearMatch) {\n        report.panic({\n          id: `10124`,\n          error: innerError,\n          context: {\n            configName,\n            nearMatch,\n          },\n        })\n      } else if (\n        existsSync(path.join(siteDirectory, `src`, configName + `.js`))\n      ) {\n        report.panic({\n          id: `10125`,\n          context: {\n            configName,\n          },\n        })\n      }\n    }\n  }\n\n  return { configModule, configFilePath }\n}\n"],"file":"get-config-file.js"}