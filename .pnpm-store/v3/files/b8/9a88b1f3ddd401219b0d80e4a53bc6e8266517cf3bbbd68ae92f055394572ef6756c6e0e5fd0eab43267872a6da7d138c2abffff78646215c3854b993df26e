{"version":3,"sources":["../../src/schema/print.ts"],"names":["breakLine","line","maxLen","parts","split","RegExp","length","sublines","i","push","slice","descriptionLines","description","rawLines","_","flatMap","printBlock","items","join","printDeprecated","fieldOrEnumVal","reason","deprecationReason","reasonAST","GraphQLString","DEFAULT_DEPRECATION_REASON","printDescription","def","indentation","firstInBlock","getDescription","lines","text","preferMultipleLines","blockString","prefix","replace","printDirectiveArgs","args","directive","directiveArgs","Object","entries","map","name","value","arg","find","type","printDirectives","extensions","directives","internalExtensionNames","includes","printInputValue","inputTC","argDecl","getTypeName","defaultValue","defaultAST","getType","printArgs","argsArray","every","_name","argTC","printFields","fields","printedFields","fieldName","fieldTC","String","printScalarType","tc","printObjectType","interfaces","getInterfaces","implementedInterfaces","getExtensions","getFields","hasInterface","dontInfer","omit","schemaComposer","getDirectives","printedDirectives","printInterfaceType","printUnionType","types","getTypeNames","possibleTypes","printEnumType","values","valueTC","printInputObjectType","printType","ObjectTypeComposer","InterfaceTypeComposer","UnionTypeComposer","EnumTypeComposer","ScalarTypeComposer","InputTypeComposer","printTypeDefinitions","config","Promise","resolve","path","include","exclude","withFieldTypes","rewrite","report","error","fs","existsSync","internalTypes","builtInScalarTypeNames","internalPlugins","typesToExclude","pluginsToExclude","plugins","getName","isInternalType","typeName","plugin","getExtension","shouldIncludeType","processedTypes","Set","typeDefs","addType","has","add","addWithFieldTypes","forEach","iface","ifaceName","getAnyTC","getFieldNames","fieldType","getFieldTC","fieldArgs","getFieldArgs","keys","argName","getFieldArgTC","printedTypeDefs","Date","toISOString","info","writeFile"],"mappings":"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","sourcesContent":["import * as fs from \"fs-extra\"\nimport {\n  EnumTypeComposer,\n  InputTypeComposer,\n  InterfaceTypeComposer,\n  ObjectTypeComposer,\n  ScalarTypeComposer,\n  UnionTypeComposer,\n  SchemaComposer,\n  NamedTypeComposer,\n  ObjectTypeComposerFieldConfigMap,\n  ObjectTypeComposerFieldConfig,\n  ObjectTypeComposerArgumentConfigMap,\n  ObjectTypeComposerArgumentConfig,\n  Extensions,\n  isNamedTypeComposer,\n  EnumTypeComposerValueConfig,\n} from \"graphql-compose\"\nimport report from \"gatsby-cli/lib/reporter\"\nimport {\n  GraphQLDirective,\n  astFromValue,\n  print,\n  GraphQLString,\n  DEFAULT_DEPRECATION_REASON,\n} from \"graphql\"\nimport { printBlockString } from \"graphql/language/blockString\"\nimport { internalExtensionNames } from \"./extensions\"\nimport _ from \"lodash\"\nimport { builtInScalarTypeNames } from \"./types/built-in-types\"\n\nexport interface ISchemaPrintConfig {\n  path?: string\n  include?: {\n    types: Array<string>\n    plugins: Array<string>\n  }\n  exclude?: {\n    types: Array<string>\n    plugins: Array<string>\n  }\n  withFieldTypes?: boolean\n  rewrite?: boolean\n}\n\nconst breakLine = (line: string, maxLen: number): Array<string> => {\n  const parts = line.split(new RegExp(`((?: |^).{15,${maxLen - 40}}(?= |$))`))\n  if (parts.length < 4) {\n    return [line]\n  }\n  const sublines = [parts[0] + parts[1] + parts[2]]\n  for (let i = 3; i < parts.length; i += 2) {\n    sublines.push(parts[i].slice(1) + parts[i + 1])\n  }\n  return sublines\n}\n\nconst descriptionLines = (\n  description: string,\n  maxLen: number\n): Array<string> => {\n  const rawLines = description.split(`\\n`)\n  return _.flatMap(rawLines, line => {\n    if (line.length < maxLen + 5) {\n      return line\n    }\n    // For > 120 character long lines, cut at space boundaries into sublines\n    // of ~80 chars.\n    return breakLine(line, maxLen)\n  })\n}\n\nconst printBlock = (items: Array<string>): string =>\n  items.length !== 0 ? ` {\\n` + items.join(`\\n`) + `\\n}` : ``\n\nconst printDeprecated = (\n  fieldOrEnumVal:\n    | ObjectTypeComposerFieldConfig<unknown, unknown>\n    | EnumTypeComposerValueConfig\n): string => {\n  const reason = fieldOrEnumVal.deprecationReason\n  if (!reason) {\n    return ``\n  }\n  const reasonAST = astFromValue(reason, GraphQLString)\n  if (reasonAST && reason !== `` && reason !== DEFAULT_DEPRECATION_REASON) {\n    return ` @deprecated(reason: ` + print(reasonAST) + `)`\n  }\n  return ` @deprecated`\n}\n\nconst printDescription = (\n  def:\n    | ObjectTypeComposerFieldConfig<unknown, unknown>\n    | NamedTypeComposer<unknown>\n    | ObjectTypeComposerArgumentConfig\n    | EnumTypeComposerValueConfig,\n  indentation = ``,\n  firstInBlock = true\n): string => {\n  const description = isNamedTypeComposer(def)\n    ? def.getDescription()\n    : def.description\n  if (!description) {\n    return ``\n  }\n\n  const lines = descriptionLines(description, 120 - indentation.length)\n\n  const text = lines.join(`\\n`)\n  const preferMultipleLines = text.length > 70\n  const blockString = printBlockString(text, ``, preferMultipleLines)\n  const prefix = indentation && !firstInBlock ? `\\n` + indentation : indentation\n\n  return prefix + blockString.replace(/\\n/g, `\\n` + indentation) + `\\n`\n}\n\nconst printDirectiveArgs = (args: any, directive: GraphQLDirective): string => {\n  if (!args || !directive) {\n    return ``\n  }\n\n  const directiveArgs = Object.entries(args)\n  if (directiveArgs.length === 0) {\n    return ``\n  }\n\n  return (\n    `(` +\n    directiveArgs\n      .map(([name, value]) => {\n        const arg =\n          directive.args && directive.args.find(arg => arg.name === name)\n\n        return arg && `${name}: ${print(astFromValue(value, arg.type)!)}`\n      })\n      .join(`, `) +\n    `)`\n  )\n}\n\nexport const printDirectives = (\n  extensions: Extensions,\n  directives: Array<GraphQLDirective>\n): string =>\n  Object.entries(extensions)\n    .map(([name, args]) => {\n      if ([...internalExtensionNames, `deprecated`].includes(name)) return ``\n      return (\n        ` @${name}` +\n        printDirectiveArgs(\n          args,\n          directives.find(directive => directive.name === name)!\n        )\n      )\n    })\n    .join(``)\n\nconst printInputValue = ([name, inputTC]: [\n  string,\n  ObjectTypeComposerArgumentConfig\n]): string => {\n  let argDecl = name + `: ` + inputTC.type.getTypeName()\n  if (inputTC.defaultValue) {\n    const defaultAST = astFromValue(\n      inputTC.defaultValue,\n      inputTC.type.getType()\n    )\n    if (defaultAST) {\n      argDecl += ` = ${print(defaultAST)}`\n    }\n  }\n  return argDecl\n}\n\nconst printArgs = (\n  args: ObjectTypeComposerArgumentConfigMap | undefined,\n  indentation = ``\n): string => {\n  if (!args) {\n    return ``\n  }\n  const argsArray = Object.entries(args)\n  if (argsArray.length === 0) {\n    return ``\n  }\n\n  // If all args have no description, print them on one line\n  if (argsArray.every(([_name, argTC]) => !argTC.description)) {\n    return `(` + argsArray.map(printInputValue).join(`, `) + `)`\n  }\n\n  return (\n    `(\\n` +\n    argsArray\n      .map(\n        ([_name, argTC], i) =>\n          printDescription(argTC, `  ` + indentation, !i) +\n          `  ` +\n          indentation +\n          printInputValue([_name, argTC])\n      )\n      .join(`\\n`) +\n    `\\n` +\n    indentation +\n    `)`\n  )\n}\n\nconst printFields = (\n  fields: ObjectTypeComposerFieldConfigMap<unknown, unknown>,\n  directives: Array<GraphQLDirective>\n): string => {\n  const printedFields = Object.entries(fields).map(\n    ([fieldName, fieldTC], i) =>\n      printDescription(fieldTC, `  `, !i) +\n      `  ` +\n      fieldName +\n      printArgs(fieldTC.args, `  `) +\n      `: ` +\n      String(fieldTC.type.getTypeName()) +\n      printDirectives(fieldTC.extensions || {}, directives) +\n      printDeprecated(fieldTC)\n  )\n  return printBlock(printedFields)\n}\n\nconst printScalarType = (tc: ScalarTypeComposer): string =>\n  printDescription(tc) + `scalar ${tc.getTypeName()}`\n\nconst printObjectType = (tc: ObjectTypeComposer<unknown>): string => {\n  const interfaces = tc.getInterfaces()\n  const implementedInterfaces = interfaces.length\n    ? ` implements ` + interfaces.map(i => i.getTypeName()).join(` & `)\n    : ``\n  const extensions = tc.getExtensions()\n  let fields = tc.getFields()\n  if (tc.hasInterface(`Node`)) {\n    extensions.dontInfer = null\n    fields = _.omit(fields, [`id`, `parent`, `children`, `internal`])\n  }\n  const directives = tc.schemaComposer.getDirectives()\n  const printedDirectives = printDirectives(extensions, directives)\n\n  return (\n    printDescription(tc) +\n    `type ${tc.getTypeName()}${implementedInterfaces}${printedDirectives}` +\n    printFields(fields, directives)\n  )\n}\n\nconst printInterfaceType = (tc: InterfaceTypeComposer<unknown>): string => {\n  const interfaces = tc.getInterfaces()\n  const implementedInterfaces = interfaces.length\n    ? ` implements ` + interfaces.map(i => i.getTypeName()).join(` & `)\n    : ``\n  const extensions = tc.getExtensions()\n  const directives = tc.schemaComposer.getDirectives()\n  const printedDirectives = printDirectives(extensions, directives)\n  return (\n    printDescription(tc) +\n    `interface ${tc.getTypeName()}${implementedInterfaces}${printedDirectives}` +\n    printFields(tc.getFields(), directives)\n  )\n}\n\nconst printUnionType = (tc: UnionTypeComposer): string => {\n  const types = tc.getTypeNames()\n  const possibleTypes = types.length ? ` = ` + types.join(` | `) : ``\n  return printDescription(tc) + `union ` + tc.getTypeName() + possibleTypes\n}\n\nconst printEnumType = (tc: EnumTypeComposer): string => {\n  const values = Object.entries(tc.getFields()).map(\n    ([name, valueTC], i) =>\n      printDescription(valueTC, `  `, !i) +\n      `  ` +\n      name +\n      printDeprecated(valueTC)\n  )\n\n  return printDescription(tc) + `enum ${tc.getTypeName()}` + printBlock(values)\n}\n\nconst printInputObjectType = (tc: InputTypeComposer): string => {\n  const fields = Object.entries(tc.getFields()).map(\n    ([fieldName, fieldTC], i) =>\n      printDescription(fieldTC, `  `, !i) +\n      `  ` +\n      printInputValue([fieldName, fieldTC])\n  )\n\n  return printDescription(tc) + `input ${tc.getTypeName()}` + printBlock(fields)\n}\n\nconst printType = (tc: NamedTypeComposer<unknown>): string => {\n  if (tc instanceof ObjectTypeComposer) {\n    return printObjectType(tc)\n  } else if (tc instanceof InterfaceTypeComposer) {\n    return printInterfaceType(tc)\n  } else if (tc instanceof UnionTypeComposer) {\n    return printUnionType(tc)\n  } else if (tc instanceof EnumTypeComposer) {\n    return printEnumType(tc)\n  } else if (tc instanceof ScalarTypeComposer) {\n    return printScalarType(tc)\n  } else if (tc instanceof InputTypeComposer) {\n    return printInputObjectType(tc)\n  }\n\n  return ``\n}\n\nexport const printTypeDefinitions = ({\n  config,\n  schemaComposer,\n}: {\n  config: ISchemaPrintConfig\n  schemaComposer: SchemaComposer\n}): Promise<void> => {\n  if (!config) return Promise.resolve()\n\n  const {\n    path,\n    include,\n    exclude,\n    withFieldTypes,\n    rewrite = false,\n  } = config || {}\n\n  if (!path) {\n    report.error(\n      `Printing type definitions aborted. Please provide a file path.`\n    )\n    return Promise.resolve()\n  }\n\n  if (!rewrite && fs.existsSync(path)) {\n    report.error(\n      `Printing type definitions aborted. The file \\`${path}\\` already exists.`\n    )\n    return Promise.resolve()\n  }\n\n  const internalTypes = [\n    ...builtInScalarTypeNames,\n    `Buffer`,\n    `Internal`,\n    `InternalInput`,\n    `Node`,\n    `NodeInput`,\n    `Query`,\n  ]\n  const internalPlugins = [`internal-data-bridge`]\n\n  const typesToExclude = exclude?.types || []\n  const pluginsToExclude = exclude?.plugins || []\n\n  const getName = (tc: NamedTypeComposer<unknown>): string => tc.getTypeName()\n\n  const isInternalType = (tc: NamedTypeComposer<unknown>): boolean => {\n    const typeName = getName(tc)\n    if (internalTypes.includes(typeName)) {\n      return true\n    }\n\n    const plugin = tc.getExtension(`plugin`)\n    if (typeof plugin === `string` && internalPlugins.includes(plugin)) {\n      return true\n    }\n\n    return false\n  }\n\n  const shouldIncludeType = (tc: NamedTypeComposer<unknown>): boolean => {\n    const typeName = getName(tc)\n    if (typesToExclude.includes(typeName)) {\n      return false\n    }\n    if (include?.types && !include.types.includes(typeName)) {\n      return false\n    }\n\n    const plugin = tc.getExtension(`plugin`)\n    if (typeof plugin === `string` && pluginsToExclude.includes(plugin)) {\n      return false\n    }\n    if (\n      include?.plugins &&\n      (!plugin ||\n        (typeof plugin === `string` && !include.plugins.includes(plugin)))\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  // Save processed type names, not references to the type composers,\n  // because of how graphql-compose, at least in v6, processes\n  // inline types\n  const processedTypes = new Set<string>()\n  const typeDefs = new Set<NamedTypeComposer<unknown>>()\n\n  const addType = (\n    tc: NamedTypeComposer<unknown>\n  ): null | Set<NamedTypeComposer<unknown>> => {\n    const typeName = getName(tc)\n    if (!processedTypes.has(typeName) && !isInternalType(tc)) {\n      processedTypes.add(typeName)\n      return typeDefs.add(tc)\n    }\n    processedTypes.add(typeName)\n    return null\n  }\n\n  const addWithFieldTypes = (tc: NamedTypeComposer<unknown>): void => {\n    if (\n      addType(tc) &&\n      (tc instanceof ObjectTypeComposer ||\n        tc instanceof InterfaceTypeComposer ||\n        tc instanceof InputTypeComposer)\n    ) {\n      if (tc instanceof ObjectTypeComposer) {\n        const interfaces = tc.getInterfaces()\n        interfaces.forEach(iface => {\n          const ifaceName = iface.getTypeName()\n          if (ifaceName !== `Node`) {\n            addWithFieldTypes(schemaComposer.getAnyTC(ifaceName))\n          }\n        })\n      }\n\n      tc.getFieldNames().forEach(fieldName => {\n        const fieldType = tc.getFieldTC(fieldName)\n        addWithFieldTypes(fieldType)\n\n        if (!(tc instanceof InputTypeComposer)) {\n          const fieldArgs = tc.getFieldArgs(fieldName)\n          Object.keys(fieldArgs).forEach(argName => {\n            try {\n              addWithFieldTypes(tc.getFieldArgTC(fieldName, argName))\n            } catch {\n              // this type might not exist yet. If it won't be created by the end\n              // of schema creation then building schema will fail and fact that we\n              // skip it here won't matter\n            }\n          })\n        }\n      })\n    }\n  }\n\n  schemaComposer.forEach(tc => {\n    if (!isInternalType(tc) && shouldIncludeType(tc)) {\n      if (withFieldTypes) {\n        addWithFieldTypes(tc)\n      } else {\n        addType(tc)\n      }\n    }\n  })\n\n  const printedTypeDefs = [\n    `### Type definitions saved at ${new Date().toISOString()} ###`,\n  ]\n\n  try {\n    typeDefs.forEach(tc => printedTypeDefs.push(printType(tc)))\n    report.info(`Writing GraphQL type definitions to ${path}`)\n    return fs.writeFile(path, printedTypeDefs.join(`\\n\\n`))\n  } catch (error) {\n    report.error(`Failed writing type definitions to \\`${path}\\`.`, error)\n    return Promise.resolve()\n  }\n}\n"],"file":"print.js"}