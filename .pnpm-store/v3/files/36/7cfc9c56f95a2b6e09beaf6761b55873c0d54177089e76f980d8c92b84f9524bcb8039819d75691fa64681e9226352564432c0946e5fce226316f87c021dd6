{"version":3,"sources":["../../../src/bootstrap/load-themes/index.js"],"names":["createRequireFromPath","require","path","Promise","_","debug","reporter","resolveTheme","themeSpec","configFileThatDeclaredTheme","isMainConfig","rootDir","themeName","resolve","themeDir","scopedRequire","dirname","e","pathToLocalTheme","join","localErr","panic","nodeResolutionPaths","module","paths","map","p","id","context","configFilePath","configModule","theme","themeConfig","isFunction","options","parentDir","processTheme","themesList","plugins","mapSeries","spec","themeObj","then","arr","concat","exports","config","themesA","flattenDeep","plugin","reduce","mergeGatsbyConfig","newConfig","themes"],"mappings":"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","sourcesContent":["const { createRequireFromPath } = require(`gatsby-core-utils`)\nconst path = require(`path`)\nimport { mergeGatsbyConfig } from \"../../utils/merge-gatsby-config\"\nconst Promise = require(`bluebird`)\nconst _ = require(`lodash`)\nconst debug = require(`debug`)(`gatsby:load-themes`)\nimport { preferDefault } from \"../prefer-default\"\nimport { getConfigFile } from \"../get-config-file\"\nimport { resolvePlugin } from \"../load-plugins/resolve-plugin\"\nconst reporter = require(`gatsby-cli/lib/reporter`)\n\n// get the gatsby-config file for a theme\nconst resolveTheme = async (\n  themeSpec,\n  configFileThatDeclaredTheme,\n  isMainConfig = false,\n  rootDir\n) => {\n  const themeName = themeSpec.resolve || themeSpec\n  let themeDir\n  try {\n    const scopedRequire = createRequireFromPath(`${rootDir}/:internal:`)\n    // theme is an node-resolvable module\n    themeDir = path.dirname(scopedRequire.resolve(themeName))\n  } catch (e) {\n    let pathToLocalTheme\n\n    // only try to look for local theme in main site\n    // local themes nested in other themes is potential source of problems:\n    // because those are not hosted by npm, there is potential for multiple\n    // local themes with same name that do different things and name being\n    // main identifier that Gatsby uses right now, it's safer not to support it for now.\n    if (isMainConfig) {\n      pathToLocalTheme = path.join(rootDir, `plugins`, themeName)\n      // is a local plugin OR it doesn't exist\n      try {\n        const { resolve } = resolvePlugin(themeName, rootDir)\n        themeDir = resolve\n      } catch (localErr) {\n        reporter.panic(`Failed to resolve ${themeName}`, localErr)\n      }\n    }\n\n    if (!themeDir) {\n      const nodeResolutionPaths = module.paths.map(p => path.join(p, themeName))\n      reporter.panic({\n        id: `10226`,\n        context: {\n          themeName,\n          configFilePath: configFileThatDeclaredTheme,\n          pathToLocalTheme,\n          nodeResolutionPaths,\n        },\n      })\n    }\n  }\n\n  const { configModule, configFilePath } = await getConfigFile(\n    themeDir,\n    `gatsby-config`\n  )\n  const theme = preferDefault(configModule)\n\n  // if theme is a function, call it with the themeConfig\n  let themeConfig = theme\n  if (_.isFunction(theme)) {\n    themeConfig = theme(themeSpec.options || {})\n  }\n  return {\n    themeName,\n    themeConfig,\n    themeSpec,\n    themeDir,\n    parentDir: rootDir,\n    configFilePath,\n  }\n}\n\n// single iteration of a recursive function that resolve parent themes\n// It's recursive because we support child themes declaring parents and\n// have to resolve all the way `up the tree` of parent/children relationships\n//\n// Theoretically, there could be an infinite loop here but in practice there is\n// no use case for a loop so I expect that to only happen if someone is very\n// off track and creating their own set of themes\nconst processTheme = (\n  { themeName, themeConfig, themeSpec, themeDir, configFilePath },\n  { rootDir }\n) => {\n  const themesList = themeConfig && themeConfig.plugins\n  // Gatsby themes don't have to specify a gatsby-config.js (they might only use gatsby-node, etc)\n  // in this case they're technically plugins, but we should support it anyway\n  // because we can't guarantee which files theme creators create first\n  if (themeConfig && themesList) {\n    // for every parent theme a theme defines, resolve the parent's\n    // gatsby config and return it in order [parentA, parentB, child]\n    return Promise.mapSeries(themesList, async spec => {\n      const themeObj = await resolveTheme(spec, configFilePath, false, themeDir)\n      return processTheme(themeObj, { rootDir: themeDir })\n    }).then(arr =>\n      arr.concat([\n        { themeName, themeConfig, themeSpec, themeDir, parentDir: rootDir },\n      ])\n    )\n  } else {\n    // if a theme doesn't define additional themes, return the original theme\n    return [{ themeName, themeConfig, themeSpec, themeDir, parentDir: rootDir }]\n  }\n}\n\nmodule.exports = async (config, { configFilePath, rootDir }) => {\n  const themesA = await Promise.mapSeries(\n    config.plugins || [],\n    async themeSpec => {\n      const themeObj = await resolveTheme(\n        themeSpec,\n        configFilePath,\n        true,\n        rootDir\n      )\n      return processTheme(themeObj, { rootDir })\n    }\n  ).then(arr => _.flattenDeep(arr))\n\n  // log out flattened themes list to aid in debugging\n  debug(themesA)\n\n  // map over each theme, adding the theme itself to the plugins\n  // list in the config for the theme. This enables the usage of\n  // gatsby-node, etc in themes.\n  return (\n    Promise.mapSeries(\n      themesA,\n      ({ themeName, themeConfig = {}, themeSpec, themeDir, parentDir }) => {\n        return {\n          ...themeConfig,\n          plugins: [\n            ...(themeConfig.plugins || []).map(plugin => {\n              return {\n                resolve: typeof plugin === `string` ? plugin : plugin.resolve,\n                options: plugin.options || {},\n                parentDir: themeDir,\n              }\n            }),\n            // theme plugin is last so it's gatsby-node, etc can override it's declared plugins, like a normal site.\n            { resolve: themeName, options: themeSpec.options || {}, parentDir },\n          ],\n        }\n      }\n    )\n      /**\n       * themes resolve to a gatsby-config, so here we merge all of the configs\n       * into a single config, making sure to maintain the order in which\n       * they were defined so that later configs, like the user's site and\n       * children, can override functionality in earlier themes.\n       */\n      .reduce(mergeGatsbyConfig, {})\n      .then(newConfig => {\n        return {\n          config: mergeGatsbyConfig(newConfig, config),\n          themes: themesA,\n        }\n      })\n  )\n}\n"],"file":"index.js"}