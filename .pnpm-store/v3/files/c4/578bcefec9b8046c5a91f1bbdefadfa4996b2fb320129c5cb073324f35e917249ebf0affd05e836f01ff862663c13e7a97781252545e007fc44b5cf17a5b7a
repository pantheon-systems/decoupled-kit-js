{"version":3,"sources":["../../../../src/steps/source-nodes/create-nodes/create-nodes.js"],"names":["createNodesQueue","PQueue","concurrency","createNodeWithSideEffects","node","state","wpgqlNodesGroup","referencedMediaItemNodeIds","Set","createdNodeIds","createNodesActivity","totalSideEffectNodes","type","wpUrl","remoteSchema","helpers","pluginOptions","gatsbyApi","actions","createContentDigest","link","path","plural","processedNode","builtTypename","__typename","remoteNode","id","parent","internal","contentDigest","typeSettings","name","beforeChangeNode","additionalNodeIds","changedRemoteNode","actionType","fetchGraphql","buildTypeName","wpStore","store","length","forEach","push","setStatus","createNode","createGatsbyNodesFromWPGQLContentNodes","wpgqlNodesByContentType","getState","reporter","dispatch","logger","createActivityTimer","typeName","wpgqlNodes","allNodesOfContentType","values","add","onIdle","referencedMediaItemNodeIdsArray","MediaItem","lazyNodes","usingGatsbyV4OrGreater","stopActivityTimer"],"mappings":"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","sourcesContent":["import PQueue from \"p-queue\"\nimport fetchReferencedMediaItemsAndCreateNodes from \"../fetch-nodes/fetch-referenced-media-items\"\nimport urlToPath from \"~/utils/url-to-path\"\nimport store from \"~/store\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport { usingGatsbyV4OrGreater } from \"~/utils/gatsby-version\"\n\nimport {\n  buildTypeName,\n  getTypeSettingsByType,\n} from \"~/steps/create-schema-customization/helpers\"\nimport { processNode } from \"./process-node\"\n\n// @todo concurrency is currently set so low because side effects can overwhelm\n// the remote server. A queue for the entire source plugin should be created so that\n// everything can share a queue and we can speed some of these things up\nconst createNodesQueue = new PQueue({\n  concurrency: 2,\n})\n\nexport const createNodeWithSideEffects =\n  ({\n    node,\n    state,\n    wpgqlNodesGroup = null,\n    referencedMediaItemNodeIds = new Set(),\n    createdNodeIds = [],\n    createNodesActivity = null,\n    totalSideEffectNodes = null,\n    type = null,\n  }) =>\n  async () => {\n    const { wpUrl } = state.remoteSchema\n    const { helpers, pluginOptions } = state.gatsbyApi\n\n    const { actions, createContentDigest } = helpers\n\n    if (node.link) {\n      // @todo is this still necessary? I don't think it is but double check\n      // create a pathname for the node using the WP permalink\n      node.path = urlToPath(node.link)\n    }\n\n    if (wpgqlNodesGroup?.plural !== `mediaItems`) {\n      const { processedNode } = await processNode({\n        node,\n        pluginOptions,\n        referencedMediaItemNodeIds,\n        wpUrl,\n        helpers,\n      })\n\n      node = processedNode\n    }\n\n    const builtTypename = buildTypeName(node.__typename)\n\n    let remoteNode = {\n      ...node,\n      __typename: builtTypename,\n      id: node.id,\n      parent: null,\n      internal: {\n        contentDigest: createContentDigest(node),\n        type: type || builtTypename,\n      },\n    }\n\n    const typeSettings = getTypeSettingsByType({\n      name: node.type,\n    })\n\n    if (typeof typeSettings?.beforeChangeNode === `function`) {\n      const { additionalNodeIds, remoteNode: changedRemoteNode } =\n        (await typeSettings.beforeChangeNode({\n          actionType: `CREATE_ALL`,\n          remoteNode,\n          actions,\n          helpers,\n          type: node.type,\n          fetchGraphql,\n          typeSettings,\n          buildTypeName,\n          wpStore: store,\n        })) || {}\n\n      if (changedRemoteNode) {\n        remoteNode = changedRemoteNode\n      }\n\n      if (additionalNodeIds?.length && totalSideEffectNodes) {\n        additionalNodeIds.forEach(\n          id => createdNodeIds.push(id) && totalSideEffectNodes.push(id)\n        )\n      }\n\n      if (\n        totalSideEffectNodes &&\n        typeof totalSideEffectNodes?.length === `number` &&\n        totalSideEffectNodes.length > 0 &&\n        createNodesActivity\n      ) {\n        createNodesActivity.setStatus(\n          `awaiting async side effects - ${totalSideEffectNodes.length} additional nodes fetched`\n        )\n      }\n    }\n\n    await actions.createNode(remoteNode)\n\n    createdNodeIds.push(node.id)\n  }\n\nexport const createGatsbyNodesFromWPGQLContentNodes = async ({\n  wpgqlNodesByContentType,\n  createNodesActivity,\n}) => {\n  const state = store.getState()\n  const { helpers, pluginOptions } = state.gatsbyApi\n\n  const { reporter } = helpers\n\n  // wp supports these file extensions\n  // jpeg|jpg|png|gif|ico|pdf|doc|docx|ppt|pptx|pps|ppsx|odt|xls|psd|mp3|m4a|ogg|wav|mp4|m4v|mov|wmv|avi|mpg|ogv|3gp|3g2|svg|bmp|tif|tiff|asf|asx|wm|wmx|divx|flv|qt|mpe|webm|mkv|txt|asc|c|cc|h|csv|tsv|ics|rtx|css|htm|html|m4b|ra|ram|mid|midi|wax|mka|rtf|js|swf|class|tar|zip|gz|gzip|rar|7z|exe|pot|wri|xla|xlt|xlw|mdb|mpp|docm|dotx|dotm|xlsm|xlsb|xltx|xltm|xlam|pptm|ppsm|potx|potm|ppam|sldx|sldm|onetoc|onetoc2|onetmp|onepkg|odp|ods|odg|odc|odb|odf|wp|wpd|key|numbers|pages\n\n  // gatsby-image supports these file types\n  // const imgSrcRemoteFileRegex = /<img.*?src=\\\\\"(.*?jpeg|jpg|png|webp|tif|tiff$)\\\\\"[^>]+>/gim\n\n  store.dispatch.logger.createActivityTimer({\n    typeName: `MediaItem`,\n    pluginOptions,\n    reporter,\n  })\n\n  const createdNodeIds = []\n  const totalSideEffectNodes = []\n  const referencedMediaItemNodeIds = new Set()\n\n  for (const wpgqlNodesGroup of wpgqlNodesByContentType) {\n    const wpgqlNodes = wpgqlNodesGroup.allNodesOfContentType\n\n    for (const node of wpgqlNodes.values()) {\n      createNodesQueue.add(\n        createNodeWithSideEffects({\n          state,\n          node,\n          wpgqlNodesGroup,\n          referencedMediaItemNodeIds,\n          createdNodeIds,\n          createNodesActivity,\n          totalSideEffectNodes,\n        })\n      )\n    }\n  }\n\n  await createNodesQueue.onIdle()\n\n  const referencedMediaItemNodeIdsArray = [...referencedMediaItemNodeIds]\n\n  /**\n   * if we're not lazy fetching media items (or we're on Gatsby v4+), we need to fetch media item nodes upfront here\n   */\n  if (\n    (!pluginOptions.type.MediaItem.lazyNodes || usingGatsbyV4OrGreater) &&\n    referencedMediaItemNodeIdsArray.length\n  ) {\n    await fetchReferencedMediaItemsAndCreateNodes({\n      referencedMediaItemNodeIds: referencedMediaItemNodeIdsArray,\n    })\n\n    store.dispatch.logger.stopActivityTimer({\n      typeName: `MediaItem`,\n    })\n\n    return [...createdNodeIds, ...referencedMediaItemNodeIdsArray]\n  }\n\n  store.dispatch.logger.stopActivityTimer({\n    typeName: `MediaItem`,\n  })\n\n  return createdNodeIds\n}\n"],"file":"create-nodes.js"}