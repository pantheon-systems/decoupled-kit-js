{"version":3,"sources":["../../../src/datastore/in-memory/in-memory-datastore.ts"],"names":["getNodes","nodes","store","getState","Map","Array","from","values","getNodesByType","type","nodesByType","get","iterateNodes","GatsbyIterable","iterateNodesByType","getNode","id","getTypes","keys","sort","countNodes","typeName","size","runQuery","args","Promise","resolve","readyPromise","undefined","ready","setupInMemoryStore"],"mappings":";;;;;AACA;;AAEA;;AACA;;AAEA;AACA;AACA;AACA,SAASA,QAAT,GAAwC;AAAA;;AACtC,QAAMC,KAAK,4BAAGC,aAAMC,QAAN,GAAiBF,KAApB,yEAA6B,IAAIG,GAAJ,EAAxC;AACA,SAAOC,KAAK,CAACC,IAAN,CAAWL,KAAK,CAACM,MAAN,EAAX,CAAP;AACD;AAED;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA0D;AAAA;;AACxD,QAAMR,KAAK,6BAAGC,aAAMC,QAAN,GAAiBO,WAAjB,CAA6BC,GAA7B,CAAiCF,IAAjC,CAAH,2EAA6C,IAAIL,GAAJ,EAAxD;AACA,SAAOC,KAAK,CAACC,IAAN,CAAWL,KAAK,CAACM,MAAN,EAAX,CAAP;AACD;;AAED,SAASK,YAAT,GAAqD;AAAA;;AACnD,QAAMX,KAAK,6BAAGC,aAAMC,QAAN,GAAiBF,KAApB,2EAA6B,IAAIG,GAAJ,EAAxC;AACA,SAAO,IAAIS,wBAAJ,CAAmBZ,KAAK,CAACM,MAAN,EAAnB,CAAP;AACD;;AAED,SAASO,kBAAT,CAA4BL,IAA5B,EAAuE;AAAA;;AACrE,QAAMR,KAAK,6BAAGC,aAAMC,QAAN,GAAiBO,WAAjB,CAA6BC,GAA7B,CAAiCF,IAAjC,CAAH,2EAA6C,IAAIL,GAAJ,EAAxD;AACA,SAAO,IAAIS,wBAAJ,CAAmBZ,KAAK,CAACM,MAAN,EAAnB,CAAP;AACD;;AAED,SAASQ,OAAT,CAAiBC,EAAjB,EAAsD;AACpD,SAAOd,aAAMC,QAAN,GAAiBF,KAAjB,CAAuBU,GAAvB,CAA2BK,EAA3B,CAAP;AACD;;AAED,SAASC,QAAT,GAAmC;AACjC;AACA,SAAOZ,KAAK,CAACC,IAAN,CAAWJ,aAAMC,QAAN,GAAiBO,WAAjB,CAA6BQ,IAA7B,EAAX,EAAgDC,IAAhD,EAAP;AACD;;AAED,SAASC,UAAT,CAAoBC,QAApB,EAA+C;AAC7C,MAAI,CAACA,QAAL,EAAe;AACb,WAAOnB,aAAMC,QAAN,GAAiBF,KAAjB,CAAuBqB,IAA9B;AACD;;AACD,QAAMrB,KAAK,GAAGC,aAAMC,QAAN,GAAiBO,WAAjB,CAA6BC,GAA7B,CAAiCU,QAAjC,CAAd;;AACA,SAAOpB,KAAK,GAAGA,KAAK,CAACqB,IAAT,GAAgB,CAA5B;AACD;;AAED,SAASC,QAAT,CAAkBC,IAAlB,EAA8D;AAC5D,SAAOC,OAAO,CAACC,OAAR,CAAgB,2CAAsBF,IAAtB,CAAhB,CAAP;AACD;;AAED,MAAMG,YAAY,GAAGF,OAAO,CAACC,OAAR,CAAgBE,SAAhB,CAArB;AAEA;AACA;AACA;AACA;;AACA,SAASC,KAAT,GAAgC;AAC9B,SAAOF,YAAP;AACD;;AAEM,SAASG,kBAAT,GAA0C;AAC/C,SAAO;AACLf,IAAAA,OADK;AAELE,IAAAA,QAFK;AAGLG,IAAAA,UAHK;AAILS,IAAAA,KAJK;AAKLjB,IAAAA,YALK;AAMLE,IAAAA,kBANK;AAOLS,IAAAA,QAPK;AASL;AACAvB,IAAAA,QAVK;AAWLQ,IAAAA;AAXK,GAAP;AAaD","sourcesContent":["import { IDataStore, IQueryResult } from \"../types\"\nimport { store } from \"../../redux\"\nimport { IGatsbyNode } from \"../../redux/types\"\nimport { GatsbyIterable } from \"../common/iterable\"\nimport { IRunFilterArg, runFastFiltersAndSort } from \"./run-fast-filters\"\n\n/**\n * @deprecated\n */\nfunction getNodes(): Array<IGatsbyNode> {\n  const nodes = store.getState().nodes ?? new Map()\n  return Array.from(nodes.values())\n}\n\n/**\n * @deprecated\n */\nfunction getNodesByType(type: string): Array<IGatsbyNode> {\n  const nodes = store.getState().nodesByType.get(type) ?? new Map()\n  return Array.from(nodes.values())\n}\n\nfunction iterateNodes(): GatsbyIterable<IGatsbyNode> {\n  const nodes = store.getState().nodes ?? new Map()\n  return new GatsbyIterable(nodes.values())\n}\n\nfunction iterateNodesByType(type: string): GatsbyIterable<IGatsbyNode> {\n  const nodes = store.getState().nodesByType.get(type) ?? new Map()\n  return new GatsbyIterable(nodes.values())\n}\n\nfunction getNode(id: string): IGatsbyNode | undefined {\n  return store.getState().nodes.get(id)\n}\n\nfunction getTypes(): Array<string> {\n  // Note: sorting to match the output of the LMDB version (where keys are sorted by default)\n  return Array.from(store.getState().nodesByType.keys()).sort()\n}\n\nfunction countNodes(typeName?: string): number {\n  if (!typeName) {\n    return store.getState().nodes.size\n  }\n  const nodes = store.getState().nodesByType.get(typeName)\n  return nodes ? nodes.size : 0\n}\n\nfunction runQuery(args: IRunFilterArg): Promise<IQueryResult> {\n  return Promise.resolve(runFastFiltersAndSort(args))\n}\n\nconst readyPromise = Promise.resolve(undefined)\n\n/**\n * Returns promise that resolves when the store is ready for reads\n * (the in-memory store is always ready)\n */\nfunction ready(): Promise<void> {\n  return readyPromise\n}\n\nexport function setupInMemoryStore(): IDataStore {\n  return {\n    getNode,\n    getTypes,\n    countNodes,\n    ready,\n    iterateNodes,\n    iterateNodesByType,\n    runQuery,\n\n    // deprecated:\n    getNodes,\n    getNodesByType,\n  }\n}\n"],"file":"in-memory-datastore.js"}