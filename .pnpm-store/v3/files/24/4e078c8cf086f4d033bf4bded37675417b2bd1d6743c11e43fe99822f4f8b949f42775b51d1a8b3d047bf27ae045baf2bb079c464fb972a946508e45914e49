{"version":3,"sources":["../../src/utils/run-steps.ts"],"names":["runSteps","steps","helpers","pluginOptions","apiName","step","timeBuildSteps","debug","timeStep","includes","name","activity","reporter","activityTimer","useVerboseStyle","start","Array","isArray","end","e","sharedError","status","context","error","console","panic","id","CODES","SourcePluginCodeError","sourceMessage","findApiName","initialApiNameString","potentialApiNames","split","isGatsbyNodeLifecycleSupported","require","join","Error","runApiSteps","runApisInSteps","nodeApis","Object","entries","reduce","gatsbyNodeExportObject","apiSteps","normalizedApiName"],"mappings":"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","sourcesContent":["import { GatsbyNodeApiHelpers, GatsbyReporter } from \"./gatsby-types\"\nimport { IPluginOptions } from \"~/models/gatsby-api\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { invokeAndCleanupLeftoverPreviewCallbacks } from \"../steps/preview/cleanup\"\nimport { CODES } from \"./report\"\n\nexport type Step = (\n  helpers?: GatsbyNodeApiHelpers,\n  pluginOptions?: IPluginOptions\n) => Promise<void> | void\n\nexport type ActivityTimer = ReturnType<GatsbyReporter[\"activityTimer\"]>\n\nconst runSteps = async (\n  steps: Array<Step>,\n  helpers: GatsbyNodeApiHelpers,\n  pluginOptions: IPluginOptions,\n  apiName: string\n): Promise<void> => {\n  for (const step of steps) {\n    try {\n      const { timeBuildSteps } = pluginOptions?.debug ?? {}\n      const timeStep =\n        typeof timeBuildSteps === `boolean`\n          ? timeBuildSteps\n          : timeBuildSteps?.includes(step.name) ||\n            timeBuildSteps?.includes(apiName)\n\n      let activity: ActivityTimer\n\n      if (timeStep) {\n        activity = helpers.reporter.activityTimer(\n          formatLogMessage(`step -${!apiName ? `-` : ``}> ${step.name}`, {\n            useVerboseStyle: true,\n          })\n        )\n        activity.start()\n      }\n\n      if (typeof step === `function`) {\n        await step(helpers, pluginOptions)\n      } else if (Array.isArray(step)) {\n        await runSteps(step, helpers, pluginOptions, apiName)\n      }\n\n      if (activity) {\n        activity.end()\n      }\n    } catch (e) {\n      const sharedError = `Encountered a critical error when running the ${\n        apiName ? `${apiName}.` : ``\n      }${step.name} build step.`\n\n      // on errors, invoke any preview callbacks to send news of this error back to the WP Preview window.\n      await invokeAndCleanupLeftoverPreviewCallbacks({\n        status: `GATSBY_PREVIEW_PROCESS_ERROR`,\n        context: sharedError,\n        error: e,\n      })\n\n      console.error(e)\n      helpers.reporter.panic({\n        id: CODES.SourcePluginCodeError,\n        context: {\n          sourceMessage: formatLogMessage(\n            `\\n\\n\\t${sharedError}\\n\\tSee above for more information.`,\n            { useVerboseStyle: true }\n          ),\n        },\n      })\n    }\n  }\n}\n\n/**\n * Takes in a pipe delimited string of Gatsby Node API names and returns the first supported API name as a string\n *\n * Example input: \"onPluginInit|unstable_onPluginInit\"\n * Example output: \"unstable_onPluginInit\"\n */\nconst findApiName = (initialApiNameString: string): string => {\n  if (!initialApiNameString.includes(`|`)) {\n    return initialApiNameString\n  }\n\n  const potentialApiNames = initialApiNameString.split(`|`)\n\n  try {\n    const { isGatsbyNodeLifecycleSupported } = require(`gatsby-plugin-utils`)\n\n    for (const apiName of potentialApiNames) {\n      if (isGatsbyNodeLifecycleSupported(apiName)) {\n        return apiName\n      }\n    }\n  } catch (e) {\n    console.error(\n      `Could not check if Gatsby supports node API's [${potentialApiNames.join(\n        `, `\n      )}]. Trying to use the first available API name (${potentialApiNames[0]})`\n    )\n\n    return potentialApiNames[0]\n  }\n\n  throw new Error(\n    `Couldn't find any supported Gatsby Node API's in ${initialApiNameString}`\n  )\n}\n\nconst runApiSteps =\n  (steps: Array<Step>, apiName: string) =>\n  async (\n    helpers: GatsbyNodeApiHelpers,\n    pluginOptions: IPluginOptions\n  ): Promise<void> =>\n    runSteps(steps, helpers, pluginOptions, apiName)\n\nconst runApisInSteps = (nodeApis: {\n  [apiName: string]: Array<Step> | Step\n}): { [apiName: string]: Promise<void> | void } =>\n  Object.entries(nodeApis).reduce(\n    (gatsbyNodeExportObject, [apiName, apiSteps]) => {\n      const normalizedApiName = findApiName(apiName)\n\n      return {\n        ...gatsbyNodeExportObject,\n        [normalizedApiName]:\n          typeof apiSteps === `function`\n            ? apiSteps\n            : runApiSteps(apiSteps, normalizedApiName),\n      }\n    },\n    {}\n  )\n\nexport { runSteps, runApisInSteps }\n"],"file":"run-steps.js"}