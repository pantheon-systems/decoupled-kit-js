{"version":3,"sources":["../../src/utils/nodes.ts"],"names":["hasNodeChanged","id","digest","node","internal","contentDigest","getNodeAndSavePathDependency","path","console","error","undefined","nodeId","loadNodeContent","content","plugin","store","getState","flattenedPlugins","find","plug","name","owner","Error","require","resolve"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;AAEA;AACA;AACA;AACO,MAAMA,cAAc,GAAG,CAACC,EAAD,EAAaC,MAAb,KAAyC;AACrE,QAAMC,IAAI,GAAG,wBAAQF,EAAR,CAAb;;AACA,MAAI,CAACE,IAAL,EAAW;AACT,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAOA,IAAI,CAACC,QAAL,CAAcC,aAAd,KAAgCH,MAAvC;AACD;AACF,CAPM;AASP;AACA;AACA;;;;;AACO,MAAMI,4BAA4B,GAAG,CAC1CL,EAD0C,EAE1CM,IAF0C,KAGd;AAC5B,QAAMJ,IAAI,GAAG,wBAAQF,EAAR,CAAb;;AAEA,MAAI,CAACE,IAAL,EAAW;AACTK,IAAAA,OAAO,CAACC,KAAR,CACG,oDAAmDR,EAAG,+BADzD;AAGA,WAAOS,SAAP;AACD;;AAED,+CAAqB;AAAEH,IAAAA,IAAF;AAAQI,IAAAA,MAAM,EAAEV;AAAhB,GAArB;AACA,SAAOE,IAAP;AACD,CAfM;AAiBP;AACA;AACA;;;;;AACO,eAAeS,eAAf,CAA+BT,IAA/B,EAAmE;AACxE,MAAI,OAAOA,IAAI,CAACC,QAAL,CAAcS,OAArB,KAAkC,QAAtC,EAA+C;AAC7C,WAAOV,IAAI,CAACC,QAAL,CAAcS,OAArB;AACD,GAHuE,CAKxE;;;AACA,QAAMC,MAAM,GAAGC,aACZC,QADY,GAEZC,gBAFY,CAEKC,IAFL,CAEUC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcjB,IAAI,CAACC,QAAL,CAAciB,KAF9C,CAAf;;AAIA,MAAI,CAACP,MAAL,EAAa;AACX,UAAM,IAAIQ,KAAJ,CACH,wEAAuEnB,IAAI,CAACC,QAAL,CAAciB,KAAM,IADxF,CAAN;AAGD;;AAED,QAAM;AAAET,IAAAA;AAAF,MAAsBW,OAAO,CAACT,MAAM,CAACU,OAAR,CAAnC;;AAEA,MAAI,CAACZ,eAAL,EAAsB;AACpB,UAAM,IAAIU,KAAJ,CACH,sDAAqDR,MAAM,CAACM,IAAK,EAD9D,CAAN;AAGD;;AAED,QAAMP,OAAO,GAAG,MAAMD,eAAe,CAACT,IAAD,CAArC;AAEAA,EAAAA,IAAI,CAACC,QAAL,CAAcS,OAAd,GAAwBA,OAAxB;AAEA,SAAOA,OAAP;AACD","sourcesContent":["import { createPageDependency } from \"../redux/actions/add-page-dependency\"\nimport { getNode } from \"../datastore\"\nimport { IGatsbyNode } from \"../redux/types\"\nimport { store } from \"../redux\"\n\n/**\n * Determine if node has changed.\n */\nexport const hasNodeChanged = (id: string, digest: string): boolean => {\n  const node = getNode(id)\n  if (!node) {\n    return true\n  } else {\n    return node.internal.contentDigest !== digest\n  }\n}\n\n/**\n * Get node and save path dependency.\n */\nexport const getNodeAndSavePathDependency = (\n  id: string,\n  path: string\n): IGatsbyNode | undefined => {\n  const node = getNode(id)\n\n  if (!node) {\n    console.error(\n      `getNodeAndSavePathDependency failed for node id: ${id} as it was not found in cache`\n    )\n    return undefined\n  }\n\n  createPageDependency({ path, nodeId: id })\n  return node\n}\n\n/**\n * Get content for a node from the plugin that created it.\n */\nexport async function loadNodeContent(node: IGatsbyNode): Promise<string> {\n  if (typeof node.internal.content === `string`) {\n    return node.internal.content\n  }\n\n  // Load plugin's loader function\n  const plugin = store\n    .getState()\n    .flattenedPlugins.find(plug => plug.name === node.internal.owner)\n\n  if (!plugin) {\n    throw new Error(\n      `Could not find owner plugin of node for loadNodeContent with owner \\`${node.internal.owner}\\``\n    )\n  }\n\n  const { loadNodeContent } = require(plugin.resolve)\n\n  if (!loadNodeContent) {\n    throw new Error(\n      `Could not find function loadNodeContent for plugin ${plugin.name}`\n    )\n  }\n\n  const content = await loadNodeContent(node)\n\n  node.internal.content = content\n\n  return content\n}\n"],"file":"nodes.js"}