{"version":3,"sources":["../../../src/utils/jobs/types.ts"],"names":["MESSAGE_TYPES","WorkerError","Error","constructor","error","message","JSON","stringify","name","captureStackTrace"],"mappings":";;;;IAiCYA,a;;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,6BAAAA,a;;AAmCL,MAAMC,WAAN,SAA0BC,KAA1B,CAAgC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAwB;AACjC,QAAI,OAAOA,KAAP,KAAkB,QAAtB,EAA+B;AAC7B,YAAMA,KAAN;AACD,KAFD,MAEO;AAAA;;AACL;AACA,8BAAMA,KAAK,CAACC,OAAZ,2DAAuBC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAvB;AACD;;AAED,SAAKI,IAAL,GAAa,aAAb;AAEAN,IAAAA,KAAK,CAACO,iBAAN,CAAwB,IAAxB,EAA8BR,WAA9B;AACD;;AAZoC","sourcesContent":["interface IBaseJob {\n  name: string\n  outputDir: string\n  args: Record<string, any>\n}\n\ninterface IJobInput {\n  inputPaths: Array<string>\n  plugin: {\n    name: string\n    version: string\n    resolve: string\n  }\n}\n\ninterface IInternalJob {\n  id: string\n  contentDigest: string\n  inputPaths: Array<{\n    path: string\n    contentDigest: string\n  }>\n  plugin: {\n    name: string\n    version: string\n    resolve: string\n    isLocal: boolean\n  }\n}\n\nexport type JobInput = IBaseJob & IJobInput\nexport type InternalJob = IBaseJob & IInternalJob\n\nexport enum MESSAGE_TYPES {\n  JOB_CREATED = `JOB_CREATED`,\n  JOB_COMPLETED = `JOB_COMPLETED`,\n  JOB_FAILED = `JOB_FAILED`,\n  JOB_NOT_WHITELISTED = `JOB_NOT_WHITELISTED`,\n}\n\nexport interface IJobCreatedMessage {\n  type: MESSAGE_TYPES.JOB_CREATED\n  payload: InternalJob\n}\n\nexport interface IJobCompletedMessage {\n  type: MESSAGE_TYPES.JOB_COMPLETED\n  payload: {\n    id: InternalJob[\"id\"]\n    result: Record<string, unknown>\n  }\n}\n\nexport interface IJobFailed {\n  type: MESSAGE_TYPES.JOB_FAILED\n  payload: {\n    id: InternalJob[\"id\"]\n    error: Error\n  }\n}\n\nexport interface IJobNotWhitelisted {\n  type: MESSAGE_TYPES.JOB_NOT_WHITELISTED\n  payload: {\n    id: InternalJob[\"id\"]\n  }\n}\n\nexport class WorkerError extends Error {\n  constructor(error: Error | string) {\n    if (typeof error === `string`) {\n      super(error)\n    } else {\n      // use error.message or else stringiyf the object so we don't get [Object object]\n      super(error.message ?? JSON.stringify(error))\n    }\n\n    this.name = `WorkerError`\n\n    Error.captureStackTrace(this, WorkerError)\n  }\n}\n"],"file":"types.js"}