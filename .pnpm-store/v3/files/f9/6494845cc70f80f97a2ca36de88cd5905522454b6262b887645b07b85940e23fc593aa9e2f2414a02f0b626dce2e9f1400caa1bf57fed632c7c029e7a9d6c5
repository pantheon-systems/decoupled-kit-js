{"version":3,"sources":["../../../src/state-machines/query-running/index.ts"],"names":["PAGE_QUERY_ENQUEUING_TIMEOUT","queryStates","initial","id","on","SOURCE_FILE_CHANGED","actions","QUERY_RUN_REQUESTED","context","states","extractingQueries","invoke","src","onDone","target","waitingPendingQueries","after","writingRequires","calculatingDirtyQueries","entry","pendingQueryRuns","Set","currentlyHandledPendingQueryRuns","runningStaticQueries","runningPageQueries","waitingForJobs","always","cond","ctx","filesDirty","size","done","type","queryRunningMachine","queryActions","services","queryRunningServices"],"mappings":"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","sourcesContent":["import { MachineConfig, Machine, assign } from \"xstate\"\nimport { IQueryRunningContext } from \"./types\"\nimport { queryRunningServices } from \"./services\"\nimport { queryActions } from \"./actions\"\n\n/**\n * This is a child state machine, spawned to perform the query running\n */\n\nconst PAGE_QUERY_ENQUEUING_TIMEOUT = 50\n\nexport const queryStates: MachineConfig<IQueryRunningContext, any, any> = {\n  initial: `extractingQueries`,\n  id: `queryRunningMachine`,\n  on: {\n    SOURCE_FILE_CHANGED: {\n      actions: `markSourceFilesDirty`,\n    },\n    QUERY_RUN_REQUESTED: {\n      actions: `trackRequestedQueryRun`,\n    },\n  },\n  context: {},\n  states: {\n    extractingQueries: {\n      id: `extracting-queries`,\n      invoke: {\n        id: `extracting-queries`,\n        src: `extractQueries`,\n        onDone: {\n          target: `waitingPendingQueries`,\n        },\n      },\n    },\n    // This state exists solely because \"extractQueries\" finishes too early.\n    // It finishes before extracted queries are enqueued for execution.\n    // As a result calculateDirtyQueries doesn't see them and they are not executed.\n    //\n    // This happens because extracted queries are enqueued for execution with setTimeout(x, 0)\n    // wrapper in actions of redux/machines/page-component which fires after \"extractQueries\" finishes.\n    //\n    // see https://github.com/gatsbyjs/gatsby/issues/26580\n    //\n    // FIXME: this has to be fixed properly by not leaving \"extractingQueries\" state\n    //   until all extracted queries are enqueued for execution (but requires a refactor)\n    waitingPendingQueries: {\n      id: `waiting-pending-queries`,\n      after: {\n        [PAGE_QUERY_ENQUEUING_TIMEOUT]: {\n          target: `writingRequires`,\n          actions: `markSourceFilesClean`,\n        },\n      },\n    },\n    writingRequires: {\n      invoke: {\n        src: `writeOutRequires`,\n        id: `writing-requires`,\n        onDone: {\n          target: `calculatingDirtyQueries`,\n        },\n      },\n    },\n    calculatingDirtyQueries: {\n      entry: assign<IQueryRunningContext>(({ pendingQueryRuns }) => {\n        return {\n          pendingQueryRuns: new Set(),\n          currentlyHandledPendingQueryRuns: pendingQueryRuns,\n        }\n      }),\n      invoke: {\n        id: `calculating-dirty-queries`,\n        src: `calculateDirtyQueries`,\n        onDone: {\n          target: `runningStaticQueries`,\n          actions: [\n            `assignDirtyQueries`,\n            `clearCurrentlyHandledPendingQueryRuns`,\n          ],\n        },\n      },\n    },\n    runningStaticQueries: {\n      invoke: {\n        src: `runStaticQueries`,\n        id: `running-static-queries`,\n        onDone: {\n          target: `runningPageQueries`,\n        },\n      },\n    },\n    runningPageQueries: {\n      invoke: {\n        src: `runPageQueries`,\n        id: `running-page-queries`,\n        onDone: {\n          target: `waitingForJobs`,\n          actions: `flushPageData`,\n        },\n      },\n    },\n    // This waits for the jobs API to finish\n    waitingForJobs: {\n      // If files are dirty go and extract again\n      always: [\n        {\n          cond: (ctx): boolean => !!ctx.filesDirty,\n          target: `extractingQueries`,\n        },\n        {\n          cond: ({ pendingQueryRuns }): boolean =>\n            !!pendingQueryRuns && pendingQueryRuns.size > 0,\n          target: `calculatingDirtyQueries`,\n        },\n      ],\n      invoke: {\n        src: `waitUntilAllJobsComplete`,\n        id: `waiting-for-jobs`,\n        onDone: {\n          target: `done`,\n        },\n      },\n    },\n    done: {\n      type: `final`,\n    },\n  },\n}\nexport const queryRunningMachine = Machine(queryStates, {\n  actions: queryActions,\n  services: queryRunningServices,\n})\n"],"file":"index.js"}