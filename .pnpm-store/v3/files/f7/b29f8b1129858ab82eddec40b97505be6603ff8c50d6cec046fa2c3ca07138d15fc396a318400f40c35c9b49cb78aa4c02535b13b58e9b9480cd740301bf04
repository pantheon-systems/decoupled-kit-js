{"version":3,"sources":["../../src/commands/develop-process.ts"],"names":["tracer","setTimeout","process","send","setInterval","type","SSGCount","DSGCount","SSRCount","page","store","getState","pages","values","mode","telemetry","trackCli","siteMeasurements","totalPagesCount","size","on","msg","action","exit","payload","openDebuggerPort","debugInfo","inspector","url","undefined","break","open","port","module","exports","program","global","__GATSBY","env","GATSBY_NODE_GLOBALS","JSON","parse","VERBOSE","verbose","reporter","setVerbose","GATSBY_OPEN_TRACING_CONFIG_FILE","openTracingConfigFile","pendingActivity","id","startBackgroundUpdate","parseInt","e","message","app","parentSpan","startSpan","machine","developMachine","withContext","pendingQueryRuns","Set","service","start"],"mappings":"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","sourcesContent":["import { syncStaticDir } from \"../utils/get-static-dir\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport telemetry from \"gatsby-telemetry\"\nimport { isTruthy } from \"gatsby-core-utils\"\nimport express from \"express\"\nimport inspector from \"inspector\"\nimport { initTracer } from \"../utils/tracer\"\nimport { detectPortInUseAndPrompt } from \"../utils/detect-port-in-use-and-prompt\"\nimport onExit from \"signal-exit\"\nimport {\n  userGetsSevenDayFeedback,\n  userPassesFeedbackRequestHeuristic,\n  showFeedbackRequest,\n  showSevenDayFeedbackRequest,\n} from \"../utils/feedback\"\nimport { markWebpackStatusAsPending } from \"../utils/webpack-status\"\nimport { store } from \"../redux\"\n\nimport { IProgram, IDebugInfo } from \"./types\"\nimport { interpret } from \"xstate\"\nimport { globalTracer } from \"opentracing\"\nimport { developMachine } from \"../state-machines/develop\"\nimport { logTransitions } from \"../utils/state-machine-logging\"\n\nconst tracer = globalTracer()\n\n// const isInteractive = process.stdout.isTTY\n\n// Watch the static directory and copy files to public as they're added or\n// changed. Wait 10 seconds so copying doesn't interfere with the regular\n// bootstrap.\nsetTimeout(() => {\n  syncStaticDir()\n}, 10000)\n\n// Time for another story...\n// When the parent process is killed by SIGKILL, Node doesm't kill spawned child processes\n// Hence, we peiodically send a heart beat to the parent to check if it is still alive\n// This will crash with Error [ERR_IPC_CHANNEL_CLOSED]: Channel closed\n// and kill the orphaned child process as a result\nif (process.send) {\n  setInterval(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    process.send!({\n      type: `HEARTBEAT`,\n    })\n  }, 1000)\n}\n\nonExit(() => {\n  let SSGCount = 0\n  let DSGCount = 0\n  let SSRCount = 0\n  for (const page of store.getState().pages.values()) {\n    if (page.mode === `SSR`) {\n      SSRCount++\n    } else if (page.mode === `DSG`) {\n      DSGCount++\n    } else {\n      SSGCount++\n    }\n  }\n\n  telemetry.trackCli(`DEVELOP_STOP`, {\n    siteMeasurements: {\n      totalPagesCount: store.getState().pages.size,\n      SSRCount,\n      DSGCount,\n      SSGCount,\n    },\n  })\n})\n\nprocess.on(`message`, msg => {\n  if (msg.type === `COMMAND` && msg.action.type === `EXIT`) {\n    process.exit(msg.action.payload)\n  }\n})\n\ninterface IDevelopArgs extends IProgram {\n  debugInfo: IDebugInfo | null\n}\n\nconst openDebuggerPort = (debugInfo: IDebugInfo): void => {\n  if (inspector.url() !== undefined) {\n    return // fixes #26708\n  }\n\n  if (debugInfo.break) {\n    inspector.open(debugInfo.port, undefined, true)\n    // eslint-disable-next-line no-debugger\n    debugger\n  } else {\n    inspector.open(debugInfo.port)\n  }\n}\n\nmodule.exports = async (program: IDevelopArgs): Promise<void> => {\n  // provide global Gatsby object\n  global.__GATSBY = process.env.GATSBY_NODE_GLOBALS\n    ? JSON.parse(process.env.GATSBY_NODE_GLOBALS)\n    : {}\n\n  if (isTruthy(process.env.VERBOSE)) {\n    program.verbose = true\n  }\n  reporter.setVerbose(program.verbose)\n\n  if (program.debugInfo) {\n    openDebuggerPort(program.debugInfo)\n  }\n\n  // We want to prompt the feedback request when users quit develop\n  // assuming they pass the heuristic check to know they are a user\n  // we want to request feedback from, and we're not annoying them.\n  process.on(`SIGINT`, async (): Promise<void> => {\n    if (await userGetsSevenDayFeedback()) {\n      showSevenDayFeedbackRequest()\n    } else if (await userPassesFeedbackRequestHeuristic()) {\n      showFeedbackRequest()\n    }\n    process.exit(0)\n  })\n\n  await initTracer(\n    process.env.GATSBY_OPEN_TRACING_CONFIG_FILE || program.openTracingConfigFile\n  )\n  markWebpackStatusAsPending()\n  reporter.pendingActivity({ id: `webpack-develop` })\n  telemetry.trackCli(`DEVELOP_START`)\n  telemetry.startBackgroundUpdate()\n\n  const port =\n    typeof program.port === `string` ? parseInt(program.port, 10) : program.port\n\n  try {\n    program.port = await detectPortInUseAndPrompt(port)\n  } catch (e) {\n    if (e.message === `USER_REJECTED`) {\n      process.exit(0)\n    }\n\n    throw e\n  }\n\n  const app = express()\n  const parentSpan = tracer.startSpan(`bootstrap`)\n\n  const machine = developMachine.withContext({\n    program,\n    parentSpan,\n    app,\n    pendingQueryRuns: new Set([`/`]),\n  })\n\n  const service = interpret(machine)\n\n  if (program.verbose) {\n    logTransitions(service)\n  }\n\n  service.start()\n}\n"],"file":"develop-process.js"}