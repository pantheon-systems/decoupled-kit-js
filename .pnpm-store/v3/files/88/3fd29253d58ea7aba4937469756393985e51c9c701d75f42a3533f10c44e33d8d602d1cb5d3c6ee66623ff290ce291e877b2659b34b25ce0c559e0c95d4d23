{"version":3,"sources":["../../src/redux/plugin-runner.ts"],"names":["startPluginRunner","plugins","store","getState","flattenedPlugins","pluginsImplementingOnCreatePage","filter","plugin","nodeAPIs","includes","pluginsImplementingOnCreateNode","length","emitter","on","action","page","payload","traceId","parentSpan","pluginSource","name","activity","node","internal","type","traceTags","nodeId","id","nodeType"],"mappings":";;;;;;;AACA;;AACA;;AAyCO,MAAMA,iBAAiB,GAAG,MAAY;AAC3C,QAAMC,OAAO,GAAGC,aAAMC,QAAN,GAAiBC,gBAAjC;;AACA,QAAMC,+BAA+B,GAAGJ,OAAO,CAACK,MAAR,CAAeC,MAAM,IAC3DA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAA0B,cAA1B,CADsC,CAAxC;AAGA,QAAMC,+BAA+B,GAAGT,OAAO,CAACK,MAAR,CAAeC,MAAM,IAC3DA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAA0B,cAA1B,CADsC,CAAxC;;AAGA,MAAIJ,+BAA+B,CAACM,MAAhC,GAAyC,CAA7C,EAAgD;AAC9CC,mBAAQC,EAAR,CAAY,aAAZ,EAA2BC,MAAD,IAA+B;AACvD,YAAMC,IAAI,GAAGD,MAAM,CAACE,OAApB;AACA,kCACG,cADH,EAEE;AAAED,QAAAA,IAAF;AAAQE,QAAAA,OAAO,EAAEH,MAAM,CAACG,OAAxB;AAAiCC,QAAAA,UAAU,EAAEJ,MAAM,CAACI;AAApD,OAFF,EAGE;AAAEC,QAAAA,YAAY,EAAEL,MAAM,CAACP,MAAP,CAAca,IAA9B;AAAoCC,QAAAA,QAAQ,EAAEP,MAAM,CAACO;AAArD,OAHF;AAKD,KAPD;AAQD,GAjB0C,CAmB3C;AACA;;;AACA,MAAIX,+BAA+B,CAACC,MAAhC,GAAyC,CAA7C,EAAgD;AAC9CC,mBAAQC,EAAR,CAAY,aAAZ,EAA2BC,MAAD,IAA+B;AACvD,YAAMQ,IAAI,GAAGR,MAAM,CAACE,OAApB;;AACA,UAAIM,IAAI,CAACC,QAAL,CAAcC,IAAd,KAAwB,UAA5B,EAAuC;AACrC,oCAAe,cAAf,EAA8B;AAC5BF,UAAAA,IAD4B;AAE5BJ,UAAAA,UAAU,EAAEJ,MAAM,CAACI,UAFS;AAG5BO,UAAAA,SAAS,EAAE;AAAEC,YAAAA,MAAM,EAAEJ,IAAI,CAACK,EAAf;AAAmBC,YAAAA,QAAQ,EAAEN,IAAI,CAACC,QAAL,CAAcC;AAA3C;AAHiB,SAA9B;AAKD;AACF,KATD;AAUD;AACF,CAjCM","sourcesContent":["import { Span } from \"opentracing\"\nimport { emitter, store } from \"./index\"\nimport apiRunnerNode from \"../utils/api-runner-node\"\nimport { ActivityTracker } from \"../../\"\nimport { ICreateNodeAction } from \"./types\"\n\ntype Plugin = any // TODO\n\n// This might make sense to live somewhere else\ninterface ICreatePageAction {\n  graphql<TData, TVariables = any>(\n    query: string,\n    variables?: TVariables\n  ): Promise<{\n    errors?: any\n    data?: TData\n  }>\n  traceId: \"initial-createPages\"\n  waitForCascadingActions: boolean\n  parentSpan: Span\n  activity: ActivityTracker\n  type: `CREATE_PAGE`\n  contextModified: boolean\n  plugin: Plugin\n  payload: {\n    internalComponentName: string\n    path: string\n    matchPath: string | undefined\n    component: string\n    componentChunkName: string\n    isCreatedByStatefulCreatePages: boolean\n    context: {\n      slug: string\n      id: string\n    }\n    updatedAt: number\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    pluginCreator___NODE: string\n    pluginCreatorId: string\n    componentPath: string\n  }\n}\n\nexport const startPluginRunner = (): void => {\n  const plugins = store.getState().flattenedPlugins\n  const pluginsImplementingOnCreatePage = plugins.filter(plugin =>\n    plugin.nodeAPIs.includes(`onCreatePage`)\n  )\n  const pluginsImplementingOnCreateNode = plugins.filter(plugin =>\n    plugin.nodeAPIs.includes(`onCreateNode`)\n  )\n  if (pluginsImplementingOnCreatePage.length > 0) {\n    emitter.on(`CREATE_PAGE`, (action: ICreatePageAction) => {\n      const page = action.payload\n      apiRunnerNode(\n        `onCreatePage`,\n        { page, traceId: action.traceId, parentSpan: action.parentSpan },\n        { pluginSource: action.plugin.name, activity: action.activity }\n      )\n    })\n  }\n\n  // We make page nodes outside of the normal action for speed so we manually\n  // call onCreateNode here for SitePage nodes.\n  if (pluginsImplementingOnCreateNode.length > 0) {\n    emitter.on(`CREATE_NODE`, (action: ICreateNodeAction) => {\n      const node = action.payload\n      if (node.internal.type === `SitePage`) {\n        apiRunnerNode(`onCreateNode`, {\n          node,\n          parentSpan: action.parentSpan,\n          traceTags: { nodeId: node.id, nodeType: node.internal.type },\n        })\n      }\n    })\n  }\n}\n"],"file":"plugin-runner.js"}