{"version":3,"sources":["../../../../src/steps/source-nodes/create-nodes/fetch-and-create-non-node-root-fields.js"],"names":["fetchAndCreateNonNodeRootFields","state","store","getState","remoteSchema","nonNodeQuery","gatsbyApi","helpers","pluginOptions","reporter","activity","activityTimer","start","data","query","errorContext","createdNodeIds","referencedMediaItemNodeIds","Set","type","schema","typePrefix","node","id","url","createRootNode","referencedMediaItemNodeIdsArray","newMediaItemIds","filter","getNode","MediaItem","lazyNodes","length","dispatch","logger","createActivityTimer","typeName","previouslyCachedNodeIds","key","CREATED_NODE_IDS","value","stopActivityTimer","end"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,+BAA+B,GAAG,YAAY;AAClD,QAAMC,KAAK,GAAGC,eAAMC,QAAN,EAAd;;AAEA,QAAM;AACJC,IAAAA,YAAY,EAAE;AAAEC,MAAAA;AAAF,KADV;AAEJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX;AAFP,MAGFP,KAHJ;AAKA,QAAM;AAAEQ,IAAAA;AAAF,MAAeF,OAArB;AAEA,QAAMG,QAAQ,GAAGD,QAAQ,CAACE,aAAT,CAAuB,wCAAkB,mBAAlB,CAAvB,CAAjB;AAEAD,EAAAA,QAAQ,CAACE,KAAT;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAM,2BAAa;AAClCC,IAAAA,KAAK,EAAET,YAD2B;AAElCU,IAAAA,YAAY,EAAG;AAFmB,GAAb,CAAvB;AAKA,QAAMC,cAAc,GAAG,EAAvB,CAnBkD,CAoBlD;;AACA,QAAMC,0BAA0B,GAAG,IAAIC,GAAJ,EAAnC;AAEA,QAAMC,IAAI,GAAGX,aAAa,CAACY,MAAd,CAAqBC,UAAlC;AAEA,QAAMC,IAAI,GAAG,EACX,GAAGT,IADQ;AAEXU,IAAAA,EAAE,EAAG,GAAEf,aAAa,CAACgB,GAAI,cAFd;AAGXL,IAAAA;AAHW,GAAb;AAMA,QAAMM,cAAc,GAAG,4CAA0B;AAC/CH,IAAAA,IAD+C;AAE/CrB,IAAAA,KAF+C;AAG/CgB,IAAAA,0BAH+C;AAI/CD,IAAAA,cAJ+C;AAK/CG,IAAAA,IAL+C,CAM/C;;AAN+C,GAA1B,CAAvB;AASAM,EAAAA,cAAc;AAEd,QAAMC,+BAA+B,GAAG,CAAC,GAAGT,0BAAJ,CAAxC;AAEA,QAAMU,eAAe,GAAGD,+BAA+B,CAACE,MAAhC,CACtBL,EAAE,IAAI,CAAChB,OAAO,CAACsB,OAAR,CAAgBN,EAAhB,CADe,CAAxB;AAIA;AACF;AACA;AACA;;AACE,MAAI,CAACf,aAAa,CAACW,IAAd,CAAmBW,SAAnB,CAA6BC,SAA9B,IAA2CJ,eAAe,CAACK,MAA/D,EAAuE;AACrE9B,mBAAM+B,QAAN,CAAeC,MAAf,CAAsBC,mBAAtB,CAA0C;AACxCC,MAAAA,QAAQ,EAAG,YAD6B;AAExC5B,MAAAA,aAFwC;AAGxCC,MAAAA;AAHwC,KAA1C;;AAMA,UAAM,wCAAwC;AAC5CQ,MAAAA,0BAA0B,EAAEU;AADgB,KAAxC,CAAN;AAIA,UAAMU,uBAAuB,GAAG,MAAM,+BAAmB;AACvDC,MAAAA,GAAG,EAAEC;AADkD,KAAnB,CAAtC;AAIA,UAAMvB,cAAc,GAAG,CACrB,GAAG,IAAIE,GAAJ,CAAQ,CACT,IAAImB,uBAAuB,IAAI,EAA/B,CADS,EAET,GAAGX,+BAFM,CAAR,CADkB,CAAvB,CAfqE,CAsBrE;AACA;;AACA,UAAM,+BAAmB;AAAEY,MAAAA,GAAG,EAAEC,2BAAP;AAAyBC,MAAAA,KAAK,EAAExB;AAAhC,KAAnB,CAAN;;AAEAd,mBAAM+B,QAAN,CAAeC,MAAf,CAAsBO,iBAAtB,CAAwC;AACtCL,MAAAA,QAAQ,EAAG;AAD2B,KAAxC;AAGD;;AAED1B,EAAAA,QAAQ,CAACgC,GAAT;AACD,CApFD;;eAsFe1C,+B","sourcesContent":["import store from \"~/store\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { createNodeWithSideEffects } from \"./create-nodes\"\nimport fetchReferencedMediaItemsAndCreateNodes from \"../fetch-nodes/fetch-referenced-media-items\"\nimport { CREATED_NODE_IDS } from \"~/constants\"\nimport { getPersistentCache, setPersistentCache } from \"~/utils/cache\"\n\nconst fetchAndCreateNonNodeRootFields = async () => {\n  const state = store.getState()\n\n  const {\n    remoteSchema: { nonNodeQuery },\n    gatsbyApi: { helpers, pluginOptions },\n  } = state\n\n  const { reporter } = helpers\n\n  const activity = reporter.activityTimer(formatLogMessage(`fetch root fields`))\n\n  activity.start()\n\n  const { data } = await fetchGraphql({\n    query: nonNodeQuery,\n    errorContext: `Error occurred while fetching non-Node root fields.`,\n  })\n\n  const createdNodeIds = []\n  // const totalSideEffectNodes = []\n  const referencedMediaItemNodeIds = new Set()\n\n  const type = pluginOptions.schema.typePrefix\n\n  const node = {\n    ...data,\n    id: `${pluginOptions.url}--rootfields`,\n    type,\n  }\n\n  const createRootNode = createNodeWithSideEffects({\n    node,\n    state,\n    referencedMediaItemNodeIds,\n    createdNodeIds,\n    type,\n    // totalSideEffectNodes,\n  })\n\n  createRootNode()\n\n  const referencedMediaItemNodeIdsArray = [...referencedMediaItemNodeIds]\n\n  const newMediaItemIds = referencedMediaItemNodeIdsArray.filter(\n    id => !helpers.getNode(id)\n  )\n\n  /**\n   * if we're not lazy fetching media items, we need to fetch them\n   * upfront here\n   */\n  if (!pluginOptions.type.MediaItem.lazyNodes && newMediaItemIds.length) {\n    store.dispatch.logger.createActivityTimer({\n      typeName: `MediaItems`,\n      pluginOptions,\n      reporter,\n    })\n\n    await fetchReferencedMediaItemsAndCreateNodes({\n      referencedMediaItemNodeIds: newMediaItemIds,\n    })\n\n    const previouslyCachedNodeIds = await getPersistentCache({\n      key: CREATED_NODE_IDS,\n    })\n\n    const createdNodeIds = [\n      ...new Set([\n        ...(previouslyCachedNodeIds || []),\n        ...referencedMediaItemNodeIdsArray,\n      ]),\n    ]\n\n    // save the node id's so we can touch them on the next build\n    // so that we don't have to refetch all nodes\n    await setPersistentCache({ key: CREATED_NODE_IDS, value: createdNodeIds })\n\n    store.dispatch.logger.stopActivityTimer({\n      typeName: `MediaItems`,\n    })\n  }\n\n  activity.end()\n}\n\nexport default fetchAndCreateNonNodeRootFields\n"],"file":"fetch-and-create-non-node-root-fields.js"}