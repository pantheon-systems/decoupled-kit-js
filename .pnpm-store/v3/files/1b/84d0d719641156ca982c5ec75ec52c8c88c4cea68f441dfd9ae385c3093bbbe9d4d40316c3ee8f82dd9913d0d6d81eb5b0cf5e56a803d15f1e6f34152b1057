{"version":3,"sources":["../../../../src/steps/create-schema-customization/transform-fields/transform-object.js"],"names":["transformListOfGatsbyNodes","field","fieldName","typeName","type","ofType","name","resolve","source","args","context","nodes","Array","isArray","nodeModel","getNodesByIds","ids","map","node","id","buildGatsbyNodeObjectResolver","_","nodeField","existingNode","getNodeById","schema","typePrefix","prefix","__typename","startsWith","queryInfo","isLazyMediaItem","typeInfo","nodesTypeName","settings","lazyNodes","usingGatsbyV4OrGreater","actionType","singleName","singularName","helpers","actions","createParentChildLink","parent","child","transformGatsbyNodeObject","transformerApi"],"mappings":"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","sourcesContent":["import { buildTypeName } from \"~/steps/create-schema-customization/helpers\"\nimport { fetchAndCreateSingleNode } from \"~/steps/source-nodes/update-nodes/wp-actions/update\"\nimport { getQueryInfoByTypeName } from \"~/steps/source-nodes/helpers\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport { inPreviewMode } from \"~/steps/preview/index\"\nimport { getPluginOptions } from \"../../../utils/get-gatsby-api\"\nimport { usingGatsbyV4OrGreater } from \"~/utils/gatsby-version\"\n\nexport const transformListOfGatsbyNodes = ({ field, fieldName }) => {\n  const typeName = buildTypeName(field.type.ofType.name)\n\n  return {\n    type: `[${typeName}]`,\n    resolve: (source, args, context) => {\n      let nodes = null\n\n      const field = source[fieldName]\n\n      if (field && Array.isArray(field)) {\n        nodes = field\n      } else if (Array.isArray(source?.nodes)) {\n        nodes = source.nodes\n      }\n\n      if (!nodes) {\n        return null\n      }\n\n      return context.nodeModel.getNodesByIds({\n        ids: nodes.map(node => node?.id),\n        type: typeName,\n      })\n    },\n  }\n}\n\nexport const buildGatsbyNodeObjectResolver =\n  ({ field, fieldName }) =>\n  async (source, _, context) => {\n    const typeName = buildTypeName(field.type.name)\n    const nodeField = source[fieldName]\n\n    if (!nodeField || (nodeField && !nodeField.id)) {\n      return null\n    }\n\n    const existingNode = context.nodeModel.getNodeById({\n      id: nodeField.id,\n      type: typeName,\n    })\n\n    const {\n      schema: { typePrefix: prefix },\n    } = getPluginOptions()\n\n    if (\n      existingNode?.__typename &&\n      !existingNode.__typename.startsWith(prefix)\n    ) {\n      existingNode.__typename = buildTypeName(existingNode.__typename)\n    }\n\n    if (existingNode) {\n      return existingNode\n    }\n\n    const queryInfo = getQueryInfoByTypeName(field.type.name)\n\n    if (!queryInfo) {\n      // if we don't have query info for a type\n      // it probably means this type is excluded in plugin options\n      return null\n    }\n\n    const isLazyMediaItem =\n      queryInfo.typeInfo.nodesTypeName === `MediaItem` &&\n      queryInfo.settings.lazyNodes\n\n    if (\n      // only fetch/create nodes in resolvers for media items when they have lazyNodes enabled\n      (!isLazyMediaItem &&\n        // but if we're in preview mode we want to lazy fetch nodes\n        // because if nodes are limited we still want to lazy fetch connections\n        !inPreviewMode()) ||\n      // lazyNodes option isn't supported in Gatsby v4+\n      usingGatsbyV4OrGreater\n    ) {\n      return null\n    }\n\n    // if this node doesn't exist, fetch it and create a node\n    const { node } = await fetchAndCreateSingleNode({\n      id: nodeField.id,\n      actionType: `CREATE`,\n      singleName: queryInfo.typeInfo.singularName,\n    })\n\n    if (source.id && node) {\n      const { helpers } = getGatsbyApi()\n\n      await helpers.actions.createParentChildLink({\n        parent: source,\n        child: node,\n      })\n    }\n\n    return node || null\n  }\n\nexport const transformGatsbyNodeObject = transformerApi => {\n  const { field } = transformerApi\n  const typeName = buildTypeName(field.type.name)\n\n  return {\n    type: typeName,\n    resolve: buildGatsbyNodeObjectResolver(transformerApi),\n  }\n}\n"],"file":"transform-object.js"}