{"version":3,"sources":["../../../src/steps/create-schema-customization/index.js"],"names":["customizeSchema","actions","schema","state","store","getState","gatsbyApi","pluginOptions","remoteSchema","fieldAliases","fieldBlacklist","ingestibles","nonNodeRootFields","typeDefs","gatsbyNodeTypes","typeBuilderApi","introspectionData","__schema","types","forEach","type","typeName","name","builtType","kind","buildType","unionType","interfaceType","objectType","enumType","push","wpType","typePrefix","description","fields","interfaces","isAGatsbyNode","buildObjectType","createTypes","createSchemaCustomization","api","e","reporter","panic","id","CODES","SourcePluginCodeError","error","context","sourceMessage","message"],"mappings":"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","sourcesContent":["import store from \"~/store\"\n\nimport { fieldOfTypeWasFetched } from \"./helpers\"\n\nimport buildType from \"./build-types\"\nimport { getGatsbyNodeTypeNames } from \"../source-nodes/fetch-nodes/fetch-nodes\"\nimport { typeIsExcluded } from \"~/steps/ingest-remote-schema/is-excluded\"\nimport { formatLogMessage } from \"../../utils/format-log-message\"\nimport { CODES } from \"../../utils/report\"\nimport { addRemoteFilePolyfillInterface } from \"gatsby-plugin-utils/polyfill-remote-file\"\n\n/**\n * createSchemaCustomization\n */\nconst customizeSchema = async ({ actions, schema }) => {\n  const state = store.getState()\n\n  const {\n    gatsbyApi: { pluginOptions },\n    remoteSchema,\n  } = state\n\n  const {\n    fieldAliases,\n    fieldBlacklist,\n    ingestibles: { nonNodeRootFields },\n  } = remoteSchema\n\n  const typeDefs = []\n\n  const gatsbyNodeTypes = getGatsbyNodeTypeNames()\n\n  const typeBuilderApi = {\n    typeDefs,\n    schema,\n    gatsbyNodeTypes,\n    fieldAliases,\n    fieldBlacklist,\n    pluginOptions,\n  }\n\n  // create Gatsby node types\n  remoteSchema.introspectionData.__schema.types.forEach(type => {\n    if (\n      fieldOfTypeWasFetched(type) &&\n      !typeIsExcluded({ pluginOptions, typeName: type.name })\n    ) {\n      let builtType\n\n      switch (type.kind) {\n        case `UNION`:\n          builtType = buildType.unionType({ ...typeBuilderApi, type })\n          break\n        case `INTERFACE`:\n          builtType = buildType.interfaceType({ ...typeBuilderApi, type })\n          break\n        case `OBJECT`:\n          builtType = buildType.objectType({ ...typeBuilderApi, type })\n          break\n        case `ENUM`:\n          builtType = buildType.enumType({ ...typeBuilderApi, type })\n          break\n        case `SCALAR`:\n          /**\n           * custom scalar types aren't imlemented currently.\n           *  @todo make this hookable so sub-plugins or plugin options can add custom scalar support.\n           */\n          break\n      }\n\n      if (builtType) {\n        typeDefs.push(builtType)\n      }\n    }\n  })\n\n  // Create non Gatsby node types by creating a single node\n  // where the typename is the type prefix\n  // The node fields are the non-node root fields of the remote schema\n  // like so: query { prefix { ...fields } }\n  const wpType = buildType.objectType({\n    ...typeBuilderApi,\n    type: {\n      kind: `OBJECT`,\n      name: pluginOptions.schema.typePrefix,\n      description: `Non-node WPGraphQL root fields.`,\n      fields: nonNodeRootFields,\n      interfaces: [`Node`],\n    },\n    isAGatsbyNode: true,\n  })\n\n  typeDefs.push(\n    addRemoteFilePolyfillInterface(\n      schema.buildObjectType({\n        name: pluginOptions.schema.typePrefix + `MediaItem`,\n        fields: {},\n        interfaces: [`Node`, `RemoteFile`],\n      }),\n      {\n        schema,\n        actions,\n      }\n    )\n  )\n\n  typeDefs.push(wpType)\n\n  actions.createTypes(typeDefs)\n}\n\nconst createSchemaCustomization = async api => {\n  try {\n    await customizeSchema(api)\n  } catch (e) {\n    api.reporter.panic({\n      id: CODES.SourcePluginCodeError,\n      error: e,\n      context: {\n        sourceMessage: formatLogMessage(e.message),\n      },\n    })\n  }\n}\n\nexport { createSchemaCustomization }\n"],"file":"index.js"}