{"version":3,"sources":["../../../src/steps/ingest-remote-schema/is-excluded.js"],"names":["typeIsExcluded","pluginOptions","typeName","type","exclude","fieldIsExcludedOnParentType","field","parentType","allTypeSettings","state","store","getState","typeMap","remoteSchema","fullType","get","parentTypeNodesField","fields","find","name","parentTypeNodesFieldTypeName","excludeFieldNames","includes"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,cAAc,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KACrBD,aAAa,IACbA,aAAa,CAACE,IAAd,CAAmBD,QAAnB,CADA,IAEAD,aAAa,CAACE,IAAd,CAAmBD,QAAnB,EAA6BE,OAH/B;;;;AAKA,MAAMC,2BAA2B,GAAG,CAAC;AAAEJ,EAAAA,aAAF;AAAiBK,EAAAA,KAAjB;AAAwBC,EAAAA;AAAxB,CAAD,KAA0C;AAAA;;AAC5E,QAAMC,eAAe,GAAGP,aAAa,CAACE,IAAtC;;AAEA,QAAMM,KAAK,GAAGC,eAAMC,QAAN,EAAd;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcH,KAAK,CAACI,YAA1B;AAEA,QAAMC,QAAQ,GAAGF,OAAO,CAACG,GAAR,CAAY,2BAAaR,UAAb,CAAZ,CAAjB;AAEA,QAAMS,oBAAoB,GAAGF,QAAH,aAAGA,QAAH,2CAAGA,QAAQ,CAAEG,MAAb,qDAAG,iBAAkBC,IAAlB,CAC3BZ,KAAK,IAAIA,KAAK,CAACa,IAAN,KAAgB,OADE,CAA7B;AAIA,QAAMC,4BAA4B,GAAG,2BAAaJ,oBAAb,aAAaA,oBAAb,uBAAaA,oBAAoB,CAAEb,IAAnC,CAArC;AAEA,QAAME,2BAA2B,GAC/B;AACA,4BAAAG,eAAe,CAACD,UAAD,aAACA,UAAD,uBAACA,UAAU,CAAEY,IAAb,CAAf,0GAAmCE,iBAAnC,kFAAsDC,QAAtD,CACEhB,KADF,aACEA,KADF,uBACEA,KAAK,CAAEa,IADT,QAGA;AAHA,4BAIAX,eAAe,CAACY,4BAAD,CAJf,qFAIA,uBAA+CC,iBAJ/C,2DAIA,uBAAkEC,QAAlE,CACEhB,KADF,aACEA,KADF,uBACEA,KAAK,CAAEa,IADT,CAJA,CAFF;AAUA,SAAO,CAAC,CAACd,2BAAT;AACD,CAzBD","sourcesContent":["import store from \"~/store\"\nimport { findTypeName } from \"~/steps/create-schema-customization/helpers\"\n\nconst typeIsExcluded = ({ pluginOptions, typeName }) =>\n  pluginOptions &&\n  pluginOptions.type[typeName] &&\n  pluginOptions.type[typeName].exclude\n\nconst fieldIsExcludedOnParentType = ({ pluginOptions, field, parentType }) => {\n  const allTypeSettings = pluginOptions.type\n\n  const state = store.getState()\n  const { typeMap } = state.remoteSchema\n\n  const fullType = typeMap.get(findTypeName(parentType))\n\n  const parentTypeNodesField = fullType?.fields?.find(\n    field => field.name === `nodes`\n  )\n\n  const parentTypeNodesFieldTypeName = findTypeName(parentTypeNodesField?.type)\n\n  const fieldIsExcludedOnParentType =\n    // if this field is excluded on either the parent type\n    allTypeSettings[parentType?.name]?.excludeFieldNames?.includes(\n      field?.name\n    ) ||\n    // or the parent type has a \"nodes\" field and that type has this field excluded\n    allTypeSettings[parentTypeNodesFieldTypeName]?.excludeFieldNames?.includes(\n      field?.name\n    )\n\n  return !!fieldIsExcludedOnParentType\n}\n\nexport { typeIsExcluded, fieldIsExcludedOnParentType }\n"],"file":"is-excluded.js"}