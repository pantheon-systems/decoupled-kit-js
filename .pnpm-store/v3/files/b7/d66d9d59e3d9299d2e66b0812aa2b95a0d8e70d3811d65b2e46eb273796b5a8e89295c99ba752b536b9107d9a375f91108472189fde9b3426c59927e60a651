{"version":3,"sources":["../../src/utils/engines-fs-provider.ts"],"names":["global","_fsWrapper","_actualFsWrapper","__non_webpack_require__","require"],"mappings":";;;;AAAA;AACA;AACA;AACA;;AAEA;AAYA;AAGA,IAAIA,MAAM,CAACC,UAAX,EAAuB;AACrBD,EAAAA,MAAM,CAACE,gBAAP,GAA0BF,MAAM,CAACC,UAAjC;AACD,CAFD,MAEO;AACL;AACAD,EAAAA,MAAM,CAACE,gBAAP,GAA0BC,uBAAuB,CAAE,IAAF,CAAjD;AACD,C,CAED;;;AACAC,OAAO,CAAE,IAAF,CAAP,C,CAEA","sourcesContent":["// This module should be imported as first or one first modules in engines.\n// It allows to provide alternative `fs` module by setting `global._fsWrapper`\n// variable before importing engine. It will automatically fallback to regular\n// `fs` if alternative `fs` is not provided.\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\ndeclare global {\n  namespace NodeJS {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    interface Global {\n      _fsWrapper: typeof import(\"fs\")\n      _actualFsWrapper: typeof import(\"fs\")\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare const __non_webpack_require__: typeof require\n\nif (global._fsWrapper) {\n  global._actualFsWrapper = global._fsWrapper\n} else {\n  // fs alternative not provided - falling back to regular fs\n  global._actualFsWrapper = __non_webpack_require__(`fs`)\n}\n\n// hydrate webpack module cache (consume global, so it's not lazy)\nrequire(`fs`)\n\n// https://stackoverflow.com/a/59499895\nexport {}\n"],"file":"engines-fs-provider.js"}