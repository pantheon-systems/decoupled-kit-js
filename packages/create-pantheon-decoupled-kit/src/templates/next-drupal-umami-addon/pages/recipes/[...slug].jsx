import { NextSeo } from 'next-seo';
import { IMAGE_URL } from '../../lib/constants';
import { getPreview } from '../../lib/getPreview';
import { isMultiLanguage } from '../../lib/isMultiLanguage';
import {
	getCurrentLocaleStore,
	globalDrupalStateStores,
} from '../../lib/stores';

import { Recipe } from '@pantheon-systems/nextjs-kit';
import Layout from '../../components/layout';

export default function RecipeTemplate({
	recipe,
	navItems,
	hrefLang,
	preview,
}) {
	const {
		title,
		field_media_image,
		field_recipe_category,
		field_ingredients,
		field_recipe_instruction,
		thumbnail,
	} = recipe;
	const imgSrc = field_media_image?.field_media_image?.uri?.url ?? null;

	return (
		<Layout preview={preview} footerMenu={navItems} mainNavItems={navItems}>
			<NextSeo
				title="Decoupled Next Drupal Demo"
				description="Generated by create-pantheon-decoupled-kit."
				languageAlternates={hrefLang || false}
			/>
			<Recipe
				title={title}
				category={field_recipe_category[0].name}
				imageProps={
					imgSrc
						? {
								src: IMAGE_URL + imgSrc,
								alt: thumbnail?.resourceIdObjMeta?.alt,
						  }
						: undefined
				}
				ingredients={field_ingredients}
				instructions={field_recipe_instruction.value}
			/>
		</Layout>
	);
}

export async function getServerSideProps(context) {
	const { locales, locale } = context;
	const multiLanguage = isMultiLanguage(locales);
	const lang = context.preview ? context.previewData.previewLang : locale;
	const store = getCurrentLocaleStore(lang, globalDrupalStateStores);

	// handle nested slugs like /recipes/featured
	const slug = `/recipes${context.params.slug
		.map((segment) => `/${segment}`)
		.join('')}`;

	const params =
		'include=field_media_image.field_media_image,field_recipe_category';
	const previewParams =
		context.preview && (await getPreview(context, 'node--recipe', params));

	if (previewParams?.error) {
		return {
			redirect: {
				destination: previewParams.redirect,
				permanent: false,
			},
		};
	}

	try {
		const recipe = await store.getObjectByPath({
			objectName: 'node--recipe',
			path: `${multiLanguage ? lang : ''}${slug}`,
			refresh: true,
			res: context.res,
			params: context.preview ? previewParams : params,
			anon: context.preview ? false : true,
		});

		const navItems = await store.getObject({
			objectName: 'menu_items--main',
			refresh: true,
			res: context.res,
			anon: true,
		});

		if (!recipe) {
			return { props: { navItems } };
		}

		const origin = process.env.NEXT_PUBLIC_FRONTEND_URL;
		// Load all the paths for the current recipe.
		const paths = locales.map(async (locale) => {
			const storeByLocales = getCurrentLocaleStore(
				locale,
				globalDrupalStateStores,
			);
			const { path } = await storeByLocales.getObject({
				objectName: 'node--recipe',
				id: recipe.id,
				params: context.preview ? previewParams : params,
				refresh: true,
				res: context.res,
				anon: context.preview ? false : true,
			});
			return path;
		});

		// Resolve all promises returned as part of paths
		// and prepare hrefLang.
		const hrefLang = await Promise.all(paths).then((values) => {
			return values.map((value) => {
				return {
					hrefLang: value.langcode,
					href: origin + '/' + value.langcode + value.alias,
				};
			});
		});

		return {
			props: {
				recipe,
				navItems,
				hrefLang,
				preview: Boolean(context.preview),
			},
		};
	} catch (error) {
		console.error('Unable to fetch data for recipe: ', error);
		return {
			notFound: true,
		};
	}
}
