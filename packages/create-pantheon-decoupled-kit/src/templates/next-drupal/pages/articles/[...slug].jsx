import { NextSeo } from 'next-seo';
import { IMAGE_URL } from '../../lib/constants';
import { getPreview } from '../../lib/getPreview';
import { isMultiLanguage } from '../../lib/isMultiLanguage';
import {
	getCurrentLocaleStore,
	globalDrupalStateStores,
} from '../../lib/stores';

import { ContentWithImage } from '@pantheon-systems/nextjs-kit';
import Layout from '../../components/layout';
import styles from './[...slug].module.css';

export default function ArticleTemplate({
	article,
	hrefLang,
	navItems,
	preview,
}) {
	const { title, body, thumbnail } = article;

	const imgSrc = article.field_media_image?.field_media_image?.uri?.url;
	return (
		<Layout preview={preview} footerMenu={navItems} mainNavItems={navItems}>
			<NextSeo
				title="Decoupled Next Drupal Demo"
				description="Generated by create-pantheon-decoupled-kit."
				languageAlternates={hrefLang}
			/>
			<ContentWithImage
				title={title}
				content={body.processed}
				imageProps={
					imgSrc
						? {
								src: IMAGE_URL + imgSrc,
								alt: thumbnail?.resourceIdObjMeta?.alt,
						  }
						: undefined
				}
				contentClassName={styles.content}
			/>
		</Layout>
	);
}

export async function getServerSideProps(context) {
	const { locales, locale } = context;
	const multiLanguage = isMultiLanguage(locales);
	const lang = context.preview ? context.previewData.previewLang : locale;

	const store = getCurrentLocaleStore(lang, globalDrupalStateStores);

	// handle nested slugs like /article/featured
	const slug = `/articles${context.params.slug
		.map((segment) => `/${segment}`)
		.join('')}`;

	const params = 'include=field_media_image.field_media_image';
	// if preview, use preview endpoint and add to store.
	const previewParams =
		context.preview && (await getPreview(context, 'node--article', params));

	if (previewParams?.error) {
		return {
			redirect: {
				destination: previewParams.redirect,
				permanent: false,
			},
		};
	}

	const article = await store.getObjectByPath({
		objectName: 'node--article',
		// Prefix the slug with the current locale
		path: `${multiLanguage ? lang : ''}${slug}`,
		params: context.preview ? previewParams : params,
		refresh: true,
		res: context.res,
		anon: context.preview ? false : true,
	});

	const navItems = await store.getObject({
		objectName: 'menu_items--main',
		refresh: true,
		res: context.res,
		anon: true,
	});

	const origin = process.env.NEXT_PUBLIC_FRONTEND_URL;
	// Load all the paths for the current article.
	const paths = locales.map(async (locale) => {
		const localeStore = getCurrentLocaleStore(locale, globalDrupalStateStores);
		const { path } = await localeStore.getObject({
			objectName: 'node--article',
			id: article.id,
			params: context.preview ? previewParams : params,
			refresh: true,
			res: context.res,
			anon: context.preview ? false : true,
		});
		return path;
	});

	// Resolve all promises returned as part of paths
	// and prepare hrefLang.
	const hrefLang = await Promise.all(paths).then((values) => {
		return values.map((value) => {
			return {
				hrefLang: value.langcode,
				href: origin + '/' + value.langcode + value.alias,
			};
		});
	});

	return {
		props: {
			article,
			hrefLang,
			navItems,
			preview: Boolean(context.preview),
		},
	};
}
