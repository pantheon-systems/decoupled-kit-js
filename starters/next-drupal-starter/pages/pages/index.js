import Link from "next/link";
import { NextSeo } from "next-seo";
import { DrupalState } from "@pantheon-systems/drupal-kit";
import { isMultiLanguage } from "../../lib/isMultiLanguage";
import Layout from "../../components/layout";

export default function PagesList({ hrefLang, pages }) {
  return (
    <Layout>
      <NextSeo
        title="Decoupled Next Drupal Demo"
        description="Generated by create next app."
        languageAlternates={hrefLang || false}
      />{" "}
      <header className="prose text-2xl mx-auto mt-20">
        <h1 className="text-center mx-auto">Pages</h1>
      </header>
      <div className="mt-12 mx-auto max-w-[50vw]">
        <ul>
          {pages ? (
            pages?.map(({ id, title, body, path }) => (
              <li className="prose justify-items-start" key={id}>
                <h2>{title}</h2>
                <div dangerouslySetInnerHTML={{ __html: body.summary }} />
                <Link passHref href={`/pages${path.alias}`}>
                  <a className="font-normal underline">Read more ‚Üí</a>
                </Link>
              </li>
            ))
          ) : (
            <h2 className="text-xl text-center mt-14">No pages found üèú</h2>
          )}
        </ul>
      </div>
    </Layout>
  );
}

export async function getStaticProps(context) {
  const origin = process.env.FRONTEND_URL;
  const { locales, locale } = context;
  const multiLanguage = isMultiLanguage(locales);

  const hrefLang = locales.map((locale) => {
    return {
      hrefLang: locale,
      href: origin + "/" + locale,
    };
  });

  const store = new DrupalState({
    apiBase: process.env.BACKEND_URL,
    defaultLocale: multiLanguage ? locale : "",
  });

  try {
    const pages = await store.getObject({
      objectName: "node--page",
      query: `
      {
        id
        title
        body
        path {
          alias
        }
      }
    `,
    });

    if (!pages) {
      throw new Error(
        "No pages returned. Make sure the objectName and store.params are valid!: ",
        error
      );
    }

    return {
      props: {
        pages,
        hrefLang,
      },
      revalidate: 60,
    };
  } catch (error) {
    console.error("Unable to fetch pages: ", error);
    return {
      props: {},
    };
  }
}
